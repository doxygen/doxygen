/* WARNING: This file is generated!
 * Do not edit this file, but edit config.xml instead and run
 * python configgen.py -doc config.xml to regenerate this file!
 */
/*
 *
 * 
 *
 * Copyright (C) 1997-2013 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
/*! \page config Configuration

\tableofcontents
\section config_format Format

A configuration file is a free-form ASCII text file with a structure
that is similar to that of a \c Makefile, with the default name \c Doxyfile. It is
parsed by \c doxygen. The file may contain tabs and newlines for
formatting purposes. The statements in the file are case-sensitive.
Comments may be placed anywhere within the file (except within quotes).
Comments beginning with two hash characters (\c \#\#) are kept when updating
the configuration file and are placed in front of the TAG are in front of.
Comments beginning with two hash characters (\c \#\#) at the end of the
configuration file are also kept and placed at the end of the file.
Comments begin with the hash character (\c \#) and ends at the end of the line.

The file essentially consists of a list of assignment statements.
Each statement consists of a \c TAG_NAME written in capitals,
followed by the equal sign (<code>=</code>) and one or more values. If the same tag
is assigned more than once, the last assignment overwrites any earlier
assignment. For tags that take a list as their argument,
the <code>+=</code> operator can be used instead of <code>=</code> to append 
new values to the list. Values are sequences of non-blanks. If the value should 
contain one or more blanks it must be surrounded by quotes (<code>&quot;...&quot;</code>).
Multiple lines can be concatenated by inserting a backslash (\c \\)
as the last character of a line. Environment variables can be expanded 
using the pattern <code>\$(ENV_VARIABLE_NAME)</code>.

You can also include part of a configuration file from another configuration
file using a <code>\@INCLUDE</code> tag as follows:
\verbatim
@INCLUDE = config_file_name
\endverbatim 
The include file is searched in the current working directory. You can 
also specify a list of directories that should be searched before looking
in the current working directory. Do this by putting a <code>\@INCLUDE_PATH</code> tag 
with these paths before the <code>\@INCLUDE</code> tag, e.g.:
\verbatim
@INCLUDE_PATH = my_config_dir
\endverbatim

The configuration options can be divided into several categories.
Below is an alphabetical index of the tags that are recognized 
followed by the descriptions of the tags grouped by category.
\secreflist
\refitem cfg_abbreviate_brief ABBREVIATE_BRIEF
\refitem cfg_aliases ALIASES
\refitem cfg_allexternals ALLEXTERNALS
\refitem cfg_alphabetical_index ALPHABETICAL_INDEX
\refitem cfg_always_detailed_sec ALWAYS_DETAILED_SEC
\refitem cfg_autolink_support AUTOLINK_SUPPORT
\refitem cfg_binary_toc BINARY_TOC
\refitem cfg_brief_member_desc BRIEF_MEMBER_DESC
\refitem cfg_builtin_stl_support BUILTIN_STL_SUPPORT
\refitem cfg_caller_graph CALLER_GRAPH
\refitem cfg_call_graph CALL_GRAPH
\refitem cfg_case_sense_names CASE_SENSE_NAMES
\refitem cfg_chm_file CHM_FILE
\refitem cfg_chm_index_encoding CHM_INDEX_ENCODING
\refitem cfg_cite_bib_files CITE_BIB_FILES
\refitem cfg_clang_assisted_parsing CLANG_ASSISTED_PARSING
\refitem cfg_clang_options CLANG_OPTIONS
\refitem cfg_class_diagrams CLASS_DIAGRAMS
\refitem cfg_class_graph CLASS_GRAPH
\refitem cfg_collaboration_graph COLLABORATION_GRAPH
\refitem cfg_cols_in_alpha_index COLS_IN_ALPHA_INDEX
\refitem cfg_compact_latex COMPACT_LATEX
\refitem cfg_compact_rtf COMPACT_RTF
\refitem cfg_cpp_cli_support CPP_CLI_SUPPORT
\refitem cfg_create_subdirs CREATE_SUBDIRS
\refitem cfg_directory_graph DIRECTORY_GRAPH
\refitem cfg_disable_index DISABLE_INDEX
\refitem cfg_distribute_group_doc DISTRIBUTE_GROUP_DOC
\refitem cfg_docbook_output DOCBOOK_OUTPUT
\refitem cfg_docset_bundle_id DOCSET_BUNDLE_ID
\refitem cfg_docset_feedname DOCSET_FEEDNAME
\refitem cfg_docset_publisher_id DOCSET_PUBLISHER_ID
\refitem cfg_docset_publisher_name DOCSET_PUBLISHER_NAME
\refitem cfg_dotfile_dirs DOTFILE_DIRS
\refitem cfg_dot_cleanup DOT_CLEANUP
\refitem cfg_dot_fontname DOT_FONTNAME
\refitem cfg_dot_fontpath DOT_FONTPATH
\refitem cfg_dot_fontsize DOT_FONTSIZE
\refitem cfg_dot_graph_max_nodes DOT_GRAPH_MAX_NODES
\refitem cfg_dot_image_format DOT_IMAGE_FORMAT
\refitem cfg_dot_multi_targets DOT_MULTI_TARGETS
\refitem cfg_dot_num_threads DOT_NUM_THREADS
\refitem cfg_dot_path DOT_PATH
\refitem cfg_dot_transparent DOT_TRANSPARENT
\refitem cfg_doxyfile_encoding DOXYFILE_ENCODING
\refitem cfg_eclipse_doc_id ECLIPSE_DOC_ID
\refitem cfg_enabled_sections ENABLED_SECTIONS
\refitem cfg_enable_preprocessing ENABLE_PREPROCESSING
\refitem cfg_enum_values_per_line ENUM_VALUES_PER_LINE
\refitem cfg_example_path EXAMPLE_PATH
\refitem cfg_example_patterns EXAMPLE_PATTERNS
\refitem cfg_example_recursive EXAMPLE_RECURSIVE
\refitem cfg_exclude EXCLUDE
\refitem cfg_exclude_patterns EXCLUDE_PATTERNS
\refitem cfg_exclude_symbols EXCLUDE_SYMBOLS
\refitem cfg_exclude_symlinks EXCLUDE_SYMLINKS
\refitem cfg_expand_as_defined EXPAND_AS_DEFINED
\refitem cfg_expand_only_predef EXPAND_ONLY_PREDEF
\refitem cfg_extension_mapping EXTENSION_MAPPING
\refitem cfg_external_groups EXTERNAL_GROUPS
\refitem cfg_external_pages EXTERNAL_PAGES
\refitem cfg_external_search EXTERNAL_SEARCH
\refitem cfg_external_search_id EXTERNAL_SEARCH_ID
\refitem cfg_extract_all EXTRACT_ALL
\refitem cfg_extract_anon_nspaces EXTRACT_ANON_NSPACES
\refitem cfg_extract_local_classes EXTRACT_LOCAL_CLASSES
\refitem cfg_extract_local_methods EXTRACT_LOCAL_METHODS
\refitem cfg_extract_package EXTRACT_PACKAGE
\refitem cfg_extract_private EXTRACT_PRIVATE
\refitem cfg_extract_static EXTRACT_STATIC
\refitem cfg_extra_packages EXTRA_PACKAGES
\refitem cfg_extra_search_mappings EXTRA_SEARCH_MAPPINGS
\refitem cfg_ext_links_in_window EXT_LINKS_IN_WINDOW
\refitem cfg_file_patterns FILE_PATTERNS
\refitem cfg_file_version_filter FILE_VERSION_FILTER
\refitem cfg_filter_patterns FILTER_PATTERNS
\refitem cfg_filter_source_files FILTER_SOURCE_FILES
\refitem cfg_filter_source_patterns FILTER_SOURCE_PATTERNS
\refitem cfg_force_local_includes FORCE_LOCAL_INCLUDES
\refitem cfg_formula_fontsize FORMULA_FONTSIZE
\refitem cfg_formula_transparent FORMULA_TRANSPARENT
\refitem cfg_full_path_names FULL_PATH_NAMES
\refitem cfg_generate_autogen_def GENERATE_AUTOGEN_DEF
\refitem cfg_generate_buglist GENERATE_BUGLIST
\refitem cfg_generate_chi GENERATE_CHI
\refitem cfg_generate_deprecatedlist GENERATE_DEPRECATEDLIST
\refitem cfg_generate_docbook GENERATE_DOCBOOK
\refitem cfg_generate_docset GENERATE_DOCSET
\refitem cfg_generate_eclipsehelp GENERATE_ECLIPSEHELP
\refitem cfg_generate_html GENERATE_HTML
\refitem cfg_generate_htmlhelp GENERATE_HTMLHELP
\refitem cfg_generate_latex GENERATE_LATEX
\refitem cfg_generate_legend GENERATE_LEGEND
\refitem cfg_generate_man GENERATE_MAN
\refitem cfg_generate_perlmod GENERATE_PERLMOD
\refitem cfg_generate_qhp GENERATE_QHP
\refitem cfg_generate_rtf GENERATE_RTF
\refitem cfg_generate_tagfile GENERATE_TAGFILE
\refitem cfg_generate_testlist GENERATE_TESTLIST
\refitem cfg_generate_todolist GENERATE_TODOLIST
\refitem cfg_generate_treeview GENERATE_TREEVIEW
\refitem cfg_generate_xml GENERATE_XML
\refitem cfg_graphical_hierarchy GRAPHICAL_HIERARCHY
\refitem cfg_group_graphs GROUP_GRAPHS
\refitem cfg_have_dot HAVE_DOT
\refitem cfg_hhc_location HHC_LOCATION
\refitem cfg_hide_friend_compounds HIDE_FRIEND_COMPOUNDS
\refitem cfg_hide_in_body_docs HIDE_IN_BODY_DOCS
\refitem cfg_hide_scope_names HIDE_SCOPE_NAMES
\refitem cfg_hide_undoc_classes HIDE_UNDOC_CLASSES
\refitem cfg_hide_undoc_members HIDE_UNDOC_MEMBERS
\refitem cfg_hide_undoc_relations HIDE_UNDOC_RELATIONS
\refitem cfg_html_colorstyle_gamma HTML_COLORSTYLE_GAMMA
\refitem cfg_html_colorstyle_hue HTML_COLORSTYLE_HUE
\refitem cfg_html_colorstyle_sat HTML_COLORSTYLE_SAT
\refitem cfg_html_dynamic_sections HTML_DYNAMIC_SECTIONS
\refitem cfg_html_extra_files HTML_EXTRA_FILES
\refitem cfg_html_extra_stylesheet HTML_EXTRA_STYLESHEET
\refitem cfg_html_file_extension HTML_FILE_EXTENSION
\refitem cfg_html_footer HTML_FOOTER
\refitem cfg_html_header HTML_HEADER
\refitem cfg_html_index_num_entries HTML_INDEX_NUM_ENTRIES
\refitem cfg_html_output HTML_OUTPUT
\refitem cfg_html_stylesheet HTML_STYLESHEET
\refitem cfg_html_timestamp HTML_TIMESTAMP
\refitem cfg_idl_property_support IDL_PROPERTY_SUPPORT
\refitem cfg_ignore_prefix IGNORE_PREFIX
\refitem cfg_image_path IMAGE_PATH
\refitem cfg_included_by_graph INCLUDED_BY_GRAPH
\refitem cfg_include_file_patterns INCLUDE_FILE_PATTERNS
\refitem cfg_include_graph INCLUDE_GRAPH
\refitem cfg_include_path INCLUDE_PATH
\refitem cfg_inherit_docs INHERIT_DOCS
\refitem cfg_inline_grouped_classes INLINE_GROUPED_CLASSES
\refitem cfg_inline_info INLINE_INFO
\refitem cfg_inline_inherited_memb INLINE_INHERITED_MEMB
\refitem cfg_inline_simple_structs INLINE_SIMPLE_STRUCTS
\refitem cfg_inline_sources INLINE_SOURCES
\refitem cfg_input INPUT
\refitem cfg_input_encoding INPUT_ENCODING
\refitem cfg_input_filter INPUT_FILTER
\refitem cfg_interactive_svg INTERACTIVE_SVG
\refitem cfg_internal_docs INTERNAL_DOCS
\refitem cfg_javadoc_autobrief JAVADOC_AUTOBRIEF
\refitem cfg_latex_batchmode LATEX_BATCHMODE
\refitem cfg_latex_bib_style LATEX_BIB_STYLE
\refitem cfg_latex_cmd_name LATEX_CMD_NAME
\refitem cfg_latex_extra_files LATEX_EXTRA_FILES
\refitem cfg_latex_footer LATEX_FOOTER
\refitem cfg_latex_header LATEX_HEADER
\refitem cfg_latex_hide_indices LATEX_HIDE_INDICES
\refitem cfg_latex_output LATEX_OUTPUT
\refitem cfg_latex_source_code LATEX_SOURCE_CODE
\refitem cfg_layout_file LAYOUT_FILE
\refitem cfg_lookup_cache_size LOOKUP_CACHE_SIZE
\refitem cfg_macro_expansion MACRO_EXPANSION
\refitem cfg_makeindex_cmd_name MAKEINDEX_CMD_NAME
\refitem cfg_man_extension MAN_EXTENSION
\refitem cfg_man_links MAN_LINKS
\refitem cfg_man_output MAN_OUTPUT
\refitem cfg_markdown_support MARKDOWN_SUPPORT
\refitem cfg_mathjax_codefile MATHJAX_CODEFILE
\refitem cfg_mathjax_extensions MATHJAX_EXTENSIONS
\refitem cfg_mathjax_format MATHJAX_FORMAT
\refitem cfg_mathjax_relpath MATHJAX_RELPATH
\refitem cfg_max_dot_graph_depth MAX_DOT_GRAPH_DEPTH
\refitem cfg_max_initializer_lines MAX_INITIALIZER_LINES
\refitem cfg_mscfile_dirs MSCFILE_DIRS
\refitem cfg_mscgen_path MSCGEN_PATH
\refitem cfg_multiline_cpp_is_brief MULTILINE_CPP_IS_BRIEF
\refitem cfg_optimize_for_fortran OPTIMIZE_FOR_FORTRAN
\refitem cfg_optimize_output_for_c OPTIMIZE_OUTPUT_FOR_C
\refitem cfg_optimize_output_java OPTIMIZE_OUTPUT_JAVA
\refitem cfg_optimize_output_vhdl OPTIMIZE_OUTPUT_VHDL
\refitem cfg_output_directory OUTPUT_DIRECTORY
\refitem cfg_output_language OUTPUT_LANGUAGE
\refitem cfg_paper_type PAPER_TYPE
\refitem cfg_pdf_hyperlinks PDF_HYPERLINKS
\refitem cfg_perlmod_latex PERLMOD_LATEX
\refitem cfg_perlmod_makevar_prefix PERLMOD_MAKEVAR_PREFIX
\refitem cfg_perlmod_pretty PERLMOD_PRETTY
\refitem cfg_perl_path PERL_PATH
\refitem cfg_predefined PREDEFINED
\refitem cfg_project_brief PROJECT_BRIEF
\refitem cfg_project_logo PROJECT_LOGO
\refitem cfg_project_name PROJECT_NAME
\refitem cfg_project_number PROJECT_NUMBER
\refitem cfg_qch_file QCH_FILE
\refitem cfg_qhg_location QHG_LOCATION
\refitem cfg_qhp_cust_filter_attrs QHP_CUST_FILTER_ATTRS
\refitem cfg_qhp_cust_filter_name QHP_CUST_FILTER_NAME
\refitem cfg_qhp_namespace QHP_NAMESPACE
\refitem cfg_qhp_sect_filter_attrs QHP_SECT_FILTER_ATTRS
\refitem cfg_qhp_virtual_folder QHP_VIRTUAL_FOLDER
\refitem cfg_qt_autobrief QT_AUTOBRIEF
\refitem cfg_quiet QUIET
\refitem cfg_recursive RECURSIVE
\refitem cfg_referenced_by_relation REFERENCED_BY_RELATION
\refitem cfg_references_link_source REFERENCES_LINK_SOURCE
\refitem cfg_references_relation REFERENCES_RELATION
\refitem cfg_repeat_brief REPEAT_BRIEF
\refitem cfg_rtf_extensions_file RTF_EXTENSIONS_FILE
\refitem cfg_rtf_hyperlinks RTF_HYPERLINKS
\refitem cfg_rtf_output RTF_OUTPUT
\refitem cfg_rtf_stylesheet_file RTF_STYLESHEET_FILE
\refitem cfg_searchdata_file SEARCHDATA_FILE
\refitem cfg_searchengine SEARCHENGINE
\refitem cfg_searchengine_url SEARCHENGINE_URL
\refitem cfg_search_includes SEARCH_INCLUDES
\refitem cfg_separate_member_pages SEPARATE_MEMBER_PAGES
\refitem cfg_server_based_search SERVER_BASED_SEARCH
\refitem cfg_short_names SHORT_NAMES
\refitem cfg_show_files SHOW_FILES
\refitem cfg_show_include_files SHOW_INCLUDE_FILES
\refitem cfg_show_namespaces SHOW_NAMESPACES
\refitem cfg_show_used_files SHOW_USED_FILES
\refitem cfg_sip_support SIP_SUPPORT
\refitem cfg_skip_function_macros SKIP_FUNCTION_MACROS
\refitem cfg_sort_brief_docs SORT_BRIEF_DOCS
\refitem cfg_sort_by_scope_name SORT_BY_SCOPE_NAME
\refitem cfg_sort_group_names SORT_GROUP_NAMES
\refitem cfg_sort_members_ctors_1st SORT_MEMBERS_CTORS_1ST
\refitem cfg_sort_member_docs SORT_MEMBER_DOCS
\refitem cfg_source_browser SOURCE_BROWSER
\refitem cfg_source_tooltips SOURCE_TOOLTIPS
\refitem cfg_strict_proto_matching STRICT_PROTO_MATCHING
\refitem cfg_strip_code_comments STRIP_CODE_COMMENTS
\refitem cfg_strip_from_inc_path STRIP_FROM_INC_PATH
\refitem cfg_strip_from_path STRIP_FROM_PATH
\refitem cfg_subgrouping SUBGROUPING
\refitem cfg_tab_size TAB_SIZE
\refitem cfg_tagfiles TAGFILES
\refitem cfg_tcl_subst TCL_SUBST
\refitem cfg_template_relations TEMPLATE_RELATIONS
\refitem cfg_toc_expand TOC_EXPAND
\refitem cfg_treeview_width TREEVIEW_WIDTH
\refitem cfg_typedef_hides_struct TYPEDEF_HIDES_STRUCT
\refitem cfg_uml_limit_num_fields UML_LIMIT_NUM_FIELDS
\refitem cfg_uml_look UML_LOOK
\refitem cfg_use_htags USE_HTAGS
\refitem cfg_use_mathjax USE_MATHJAX
\refitem cfg_use_mdfile_as_mainpage USE_MDFILE_AS_MAINPAGE
\refitem cfg_use_pdflatex USE_PDFLATEX
\refitem cfg_verbatim_headers VERBATIM_HEADERS
\refitem cfg_warnings WARNINGS
\refitem cfg_warn_format WARN_FORMAT
\refitem cfg_warn_if_doc_error WARN_IF_DOC_ERROR
\refitem cfg_warn_if_undocumented WARN_IF_UNDOCUMENTED
\refitem cfg_warn_logfile WARN_LOGFILE
\refitem cfg_warn_no_paramdoc WARN_NO_PARAMDOC
\refitem cfg_xml_dtd XML_DTD
\refitem cfg_xml_output XML_OUTPUT
\refitem cfg_xml_programlisting XML_PROGRAMLISTING
\refitem cfg_xml_schema XML_SCHEMA
\endsecreflist
\section config_project Project related configuration options
 \anchor cfg_doxyfile_encoding
<dl>

<dt>\c DOXYFILE_ENCODING <dd>
 \addindex DOXYFILE_ENCODING
 This tag specifies the encoding used for all characters in the config file that 
 follow. The default is UTF-8 which is also the encoding used for all text before
 the first occurrence of this tag. Doxygen uses \c libiconv (or the iconv built into
 \c libc) for the transcoding. See http://www.gnu.org/software/libiconv for the list of
 possible encodings.

The default value is: <code>UTF-8</code>.

 \anchor cfg_project_name
<dt>\c PROJECT_NAME <dd>
 \addindex PROJECT_NAME
 The \c PROJECT_NAME tag is a single word (or a sequence of words
 surrounded by double-quotes, unless you are using Doxywizard) that should identify the project for which the 
 documentation is generated. This name is used in the title of most 
 generated pages and in a few other places.

The default value is: <code>My Project</code>.

 \anchor cfg_project_number
<dt>\c PROJECT_NUMBER <dd>
 \addindex PROJECT_NUMBER
 The \c PROJECT_NUMBER tag can be used to enter a project or revision number.
 This could be handy for archiving the generated documentation or
 if some version control system is used.

 \anchor cfg_project_brief
<dt>\c PROJECT_BRIEF <dd>
 \addindex PROJECT_BRIEF
 Using the \c PROJECT_BRIEF tag one can provide an optional one line description 
 for a project that appears at the top of each page and should give viewer 
 a quick idea about the purpose of the project. Keep the description short.

 \anchor cfg_project_logo
<dt>\c PROJECT_LOGO <dd>
 \addindex PROJECT_LOGO
 With the \c PROJECT_LOGO tag one can specify an logo or icon that is 
 included in the documentation. The maximum height of the logo should not 
 exceed 55 pixels and the maximum width should not exceed 200 pixels. 
 Doxygen will copy the logo to the output directory.

 \anchor cfg_output_directory
<dt>\c OUTPUT_DIRECTORY <dd>
 \addindex OUTPUT_DIRECTORY
 The \c OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
 path into which the generated documentation will be written. 
 If a relative path is entered, it will be relative to the location 
 where doxygen was started. If left blank the current directory will be used.

 \anchor cfg_create_subdirs
<dt>\c CREATE_SUBDIRS <dd>
 \addindex CREATE_SUBDIRS
 If the \c CREATE_SUBDIRS tag is set to \c YES, then doxygen will create
 4096 sub-directories (in 2 levels) under the output directory of each output 
 format and will distribute the generated files over these directories. 
 Enabling this option can be useful when feeding doxygen a huge amount of source
 files, where putting all generated files in the same directory would otherwise
 causes performance problems for the file system.


The default value is: <code>NO</code>.

 \anchor cfg_output_language
<dt>\c OUTPUT_LANGUAGE <dd>
 \addindex OUTPUT_LANGUAGE
 The \c OUTPUT_LANGUAGE tag is used to specify the language in which all
 documentation generated by doxygen is written. Doxygen will use this
 information to generate all constant output in the proper language.

Possible values are: 
<code>Afrikaans</code>, 
<code>Arabic</code>, 
<code>Brazilian</code>, 
<code>Catalan</code>, 
<code>Chinese</code>, 
<code>Chinese-Traditional</code>, 
<code>Croatian</code>, 
<code>Czech</code>, 
<code>Danish</code>, 
<code>Dutch</code>, 
<code>English</code>, 
<code>Esperanto</code>, 
<code>Farsi</code>, 
<code>Finnish</code>, 
<code>French</code>, 
<code>German</code>, 
<code>Greek</code>, 
<code>Hungarian</code>, 
<code>Italian</code>, 
<code>Japanese</code>, 
<code>Japanese-en</code>, 
<code>Korean</code>, 
<code>Korean-en</code>, 
<code>Latvian</code>, 
<code>Norwegian</code>, 
<code>Macedonian</code>, 
<code>Persian</code>, 
<code>Polish</code>, 
<code>Portuguese</code>, 
<code>Romanian</code>, 
<code>Russian</code>, 
<code>Serbian</code>, 
<code>Slovak</code>, 
<code>Slovene</code>, 
<code>Spanish</code>, 
<code>Swedish</code>, 
<code>Turkish</code>, 
<code>Ukrainian</code> and 
<code>Vietnamese</code>.


The default value is: <code>English</code>.

 \anchor cfg_brief_member_desc
<dt>\c BRIEF_MEMBER_DESC <dd>
 \addindex BRIEF_MEMBER_DESC
 If the \c BRIEF_MEMBER_DESC tag is set to \c YES doxygen will
 include brief member descriptions after the members that are listed in
 the file and class documentation (similar to \c Javadoc).
 Set to \c NO to disable this.


The default value is: <code>YES</code>.

 \anchor cfg_repeat_brief
<dt>\c REPEAT_BRIEF <dd>
 \addindex REPEAT_BRIEF
 If the \c REPEAT_BRIEF tag is set to \c YES doxygen will 
 prepend the brief description of a member or function before the detailed 
 description 
 <br>Note: 
 If both \ref cfg_hide_undoc_members "HIDE_UNDOC_MEMBERS" and
 \ref cfg_brief_member_desc "BRIEF_MEMBER_DESC" are set to \c NO, the 
 brief descriptions will be completely suppressed.


The default value is: <code>YES</code>.

 \anchor cfg_abbreviate_brief
<dt>\c ABBREVIATE_BRIEF <dd>
 \addindex ABBREVIATE_BRIEF
 This tag implements a quasi-intelligent brief description abbreviator
 that is used to form the text in various listings. Each string
 in this list, if found as the leading text of the brief description, will be
 stripped from the text and the result, after processing the whole list, is used
 as the annotated text. Otherwise, the brief description is used as-is. If left
 blank, the following values are used (`$name` is automatically replaced with the
 name of the entity):
<code>The $name class</code>, 
<code>The $name widget</code>, 
<code>The $name file</code>, 
<code>is</code>, 
<code>provides</code>, 
<code>specifies</code>, 
<code>contains</code>, 
<code>represents</code>, 
<code>a</code>, 
<code>an</code> and 
<code>the</code>.

 \anchor cfg_always_detailed_sec
<dt>\c ALWAYS_DETAILED_SEC <dd>
 \addindex ALWAYS_DETAILED_SEC
 If the \c ALWAYS_DETAILED_SEC and \ref cfg_repeat_brief "REPEAT_BRIEF" tags 
 are both set to \c YES then
 doxygen will generate a detailed section even if there is only a brief
 description.


The default value is: <code>NO</code>.

 \anchor cfg_inline_inherited_memb
<dt>\c INLINE_INHERITED_MEMB <dd>
 \addindex INLINE_INHERITED_MEMB
 If the \c INLINE_INHERITED_MEMB tag is set to \c YES, doxygen will show all inherited
 members of a class in the documentation of that class as if those members were
 ordinary class members. Constructors, destructors and assignment operators of
 the base classes will not be shown.


The default value is: <code>NO</code>.

 \anchor cfg_full_path_names
<dt>\c FULL_PATH_NAMES <dd>
 \addindex FULL_PATH_NAMES
 If the \c FULL_PATH_NAMES tag is set to \c YES doxygen will prepend the full
 path before files name in the file list and in the header files. If set
 to \c NO the shortest path that makes the file name unique will be used


The default value is: <code>YES</code>.

 \anchor cfg_strip_from_path
<dt>\c STRIP_FROM_PATH <dd>
 \addindex STRIP_FROM_PATH
 The \c STRIP_FROM_PATH tag
 can be used to strip a user-defined part of the path. Stripping is
 only done if one of the specified strings matches the left-hand part of the 
 path. The tag can be used to show relative paths in the file list.
 If left blank the directory from which doxygen is run is used as the
 path to strip.
 <br>Note that you can specify absolute paths here, but also 
 relative paths, which will be relative from the directory where doxygen is 
 started.


This tag requires that the tag \ref cfg_full_path_names "FULL_PATH_NAMES" is set to \c YES.
 \anchor cfg_strip_from_inc_path
<dt>\c STRIP_FROM_INC_PATH <dd>
 \addindex STRIP_FROM_INC_PATH
 The \c STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of 
 the path mentioned in the documentation of a class, which tells
 the reader which header file to include in order to use a class. 
 If left blank only the name of the header file containing the class
 definition is used. Otherwise one should specify the list of include paths that 
 are normally passed to the compiler using the `-I` flag.

 \anchor cfg_short_names
<dt>\c SHORT_NAMES <dd>
 \addindex SHORT_NAMES
 If the \c SHORT_NAMES tag is set to \c YES, doxygen will generate much shorter
 (but less readable) file names. This can be useful is your file systems
 doesn't support long names like on DOS, Mac, or CD-ROM.


The default value is: <code>NO</code>.

 \anchor cfg_javadoc_autobrief
<dt>\c JAVADOC_AUTOBRIEF <dd>
 \addindex JAVADOC_AUTOBRIEF
  If the \c JAVADOC_AUTOBRIEF tag is set to \c YES then doxygen
  will interpret the first line (until the first dot) of a Javadoc-style
  comment as the brief description. If set to \c NO, the 
  Javadoc-style will behave just like regular Qt-style comments
  (thus requiring an explicit \ref cmdbrief "\@brief" command for a brief description.)


The default value is: <code>NO</code>.

 \anchor cfg_qt_autobrief
<dt>\c QT_AUTOBRIEF <dd>
 \addindex QT_AUTOBRIEF
  If the \c QT_AUTOBRIEF tag is set to \c YES then doxygen
  will interpret the first line (until the first dot) of a Qt-style
  comment as the brief description. If set to \c NO, the
  Qt-style will behave just like regular Qt-style comments (thus
  requiring an explicit \ref cmdbrief "\\brief" command for a brief description.)


The default value is: <code>NO</code>.

 \anchor cfg_multiline_cpp_is_brief
<dt>\c MULTILINE_CPP_IS_BRIEF <dd>
 \addindex MULTILINE_CPP_IS_BRIEF
  The \c MULTILINE_CPP_IS_BRIEF tag can be set to \c YES to make doxygen
  treat a multi-line C++ special comment block (i.e. a block of \c //! or \c ///
  comments) as a brief description. This used to be the default behavior.
  The new default is to treat a multi-line C++ comment block as a detailed
  description. Set this tag to \c YES if you prefer the old behavior instead.
  <br>Note that setting this tag to \c YES also means that rational rose comments
  are not recognized any more.


The default value is: <code>NO</code>.

 \anchor cfg_inherit_docs
<dt>\c INHERIT_DOCS <dd>
 \addindex INHERIT_DOCS
 If the \c INHERIT_DOCS tag is set to \c YES then an undocumented
 member inherits the documentation from any documented member that it
 re-implements.


The default value is: <code>YES</code>.

 \anchor cfg_separate_member_pages
<dt>\c SEPARATE_MEMBER_PAGES <dd>
 \addindex SEPARATE_MEMBER_PAGES
 If the \c SEPARATE_MEMBER_PAGES tag is set to \c YES, then doxygen will produce
 a new page for each member. If set to \c NO, the documentation of a member will
 be part of the file/class/namespace that contains it.


The default value is: <code>NO</code>.

 \anchor cfg_tab_size
<dt>\c TAB_SIZE <dd>
 \addindex TAB_SIZE
 The \c TAB_SIZE tag can be used to set the number of spaces in a tab.
 Doxygen uses this value to replace tabs by spaces in code fragments.


 Minimum value: <code>1</code>, maximum value: <code>16</code>, default value: <code>4</code>.

 \anchor cfg_aliases
<dt>\c ALIASES <dd>
 \addindex ALIASES
 This tag can be used to specify a number of aliases that act
 as commands in the documentation. An alias has the form: 
\verbatim
 name=value
\endverbatim
 For example adding 
\verbatim
 "sideeffect=@par Side Effects:\n" 
\endverbatim
 will allow you to
 put the command \c \\sideeffect (or \c \@sideeffect) in the documentation, which 
 will result in a user-defined paragraph with heading "Side Effects:".
 You can put \ref cmdn "\\n"'s in the value part of an alias to insert newlines.

 \anchor cfg_tcl_subst
<dt>\c TCL_SUBST <dd>
 \addindex TCL_SUBST
 This tag can be used to specify a number of word-keyword mappings (TCL only). 
 A mapping has the form <code>"name=value"</code>. For example adding 
 <code>"class=itcl::class"</code> will allow you to use the command class in the 
 <code>itcl::class</code> meaning.

 \anchor cfg_optimize_output_for_c
<dt>\c OPTIMIZE_OUTPUT_FOR_C <dd>
 \addindex OPTIMIZE_OUTPUT_FOR_C
 Set the \c OPTIMIZE_OUTPUT_FOR_C tag to \c YES if your project consists 
 of C sources only. Doxygen will then generate output that is more tailored 
 for C. For instance, some of the names that are used will be different. 
 The list of all members will be omitted, etc.


The default value is: <code>NO</code>.

 \anchor cfg_optimize_output_java
<dt>\c OPTIMIZE_OUTPUT_JAVA <dd>
 \addindex OPTIMIZE_OUTPUT_JAVA
 Set the \c OPTIMIZE_OUTPUT_JAVA tag to \c YES if your project consists of Java or
 Python sources only. Doxygen will then generate output that is more tailored 
 for that language. For instance, namespaces will be presented as packages, 
 qualified scopes will look different, etc.


The default value is: <code>NO</code>.

 \anchor cfg_optimize_for_fortran
<dt>\c OPTIMIZE_FOR_FORTRAN <dd>
 \addindex OPTIMIZE_FOR_FORTRAN
 Set the \c OPTIMIZE_FOR_FORTRAN tag to \c YES if your project consists of Fortran 
 sources. Doxygen will then generate output that is tailored for Fortran.


The default value is: <code>NO</code>.

 \anchor cfg_optimize_output_vhdl
<dt>\c OPTIMIZE_OUTPUT_VHDL <dd>
 \addindex OPTIMIZE_OUTPUT_VHDL
 Set the \c OPTIMIZE_OUTPUT_VHDL tag to \c YES if your project consists of VHDL 
 sources. Doxygen will then generate output that is tailored for VHDL.


The default value is: <code>NO</code>.

 \anchor cfg_extension_mapping
<dt>\c EXTENSION_MAPPING <dd>
 \addindex EXTENSION_MAPPING
 Doxygen selects the parser to use depending on the extension of the files it parses.
 With this tag you can assign which parser to use for a given extension.
 Doxygen has a built-in mapping, but you can override or extend it using this tag.
 The format is <code>ext=language</code>, where \c ext is a file extension, and language is one of
 the parsers supported by doxygen: IDL, Java, Javascript, C#, C, C++, D, PHP,
 Objective-C, Python, Fortran, VHDL. 

 For instance to make doxygen treat
 <code>.inc</code> files as Fortran files (default is PHP), and <code>.f</code> files as C (default is Fortran),
 use: `inc=Fortran f=C`.

 <br>Note For files without extension you can use `no_extension` as a placeholder.
 <br>Note that for custom extensions you also need to set \ref cfg_file_patterns "FILE_PATTERNS" otherwise the 
 files are not read by doxygen.

 \anchor cfg_markdown_support
<dt>\c MARKDOWN_SUPPORT <dd>
 \addindex MARKDOWN_SUPPORT
 If the \c MARKDOWN_SUPPORT tag is enabled then doxygen pre-processes all 
 comments according to the Markdown format, which allows for more readable 
 documentation. See http://daringfireball.net/projects/markdown/ for details. 
 The output of markdown processing is further processed by doxygen, so you 
 can mix doxygen, HTML, and XML commands with Markdown formatting. 
 Disable only in case of backward compatibilities issues.


The default value is: <code>YES</code>.

 \anchor cfg_autolink_support
<dt>\c AUTOLINK_SUPPORT <dd>
 \addindex AUTOLINK_SUPPORT
 When enabled doxygen tries to link words that correspond to documented classes, 
 or namespaces to their corresponding documentation. Such a link can be 
 prevented in individual cases by by putting a \c % sign in front of the word or 
 globally by setting \c AUTOLINK_SUPPORT to \c NO.


The default value is: <code>YES</code>.

 \anchor cfg_builtin_stl_support
<dt>\c BUILTIN_STL_SUPPORT <dd>
 \addindex BUILTIN_STL_SUPPORT
 If you use STL classes (i.e. `std::string`, `std::vector`, etc.) but do not want to
 include (a tag file for) the STL sources as input, then you should
 set this tag to \c YES in order to let doxygen match functions declarations and
 definitions whose arguments contain STL classes (e.g. `func(std::string`); versus
 `func(std::string) {}`). This also make the inheritance and collaboration
 diagrams that involve STL classes more complete and accurate.


The default value is: <code>NO</code>.

 \anchor cfg_cpp_cli_support
<dt>\c CPP_CLI_SUPPORT <dd>
 \addindex CPP_CLI_SUPPORT
 If you use Microsoft's C++/CLI language, you should set this option to \c YES to
 enable parsing support.


The default value is: <code>NO</code>.

 \anchor cfg_sip_support
<dt>\c SIP_SUPPORT <dd>
 \addindex SIP_SUPPORT
 Set the \c SIP_SUPPORT tag to \c YES if your project consists 
 of <a href="http://www.riverbankcomputing.co.uk/software/sip/intro">sip</a> sources only. 
 Doxygen will parse them like normal C++ but will assume all classes use public 
 instead of private inheritance when no explicit protection keyword is present.


The default value is: <code>NO</code>.

 \anchor cfg_idl_property_support
<dt>\c IDL_PROPERTY_SUPPORT <dd>
 \addindex IDL_PROPERTY_SUPPORT
 For Microsoft's IDL there are \c propget and \c propput attributes to indicate getter
 and setter methods for a property. Setting this option to \c YES
 will make doxygen to replace the get and set methods by a property in the
 documentation. This will only work if the methods are indeed getting or 
 setting a simple type. If this is not the case, or you want to show the 
 methods anyway, you should set this option to \c NO.


The default value is: <code>YES</code>.

 \anchor cfg_distribute_group_doc
<dt>\c DISTRIBUTE_GROUP_DOC <dd>
 \addindex DISTRIBUTE_GROUP_DOC
 If member grouping is used in the documentation and the \c DISTRIBUTE_GROUP_DOC
 tag is set to \c YES, then doxygen will reuse the documentation of the first
 member in the group (if any) for the other members of the group. By default
 all members of a group must be documented explicitly.


The default value is: <code>NO</code>.

 \anchor cfg_subgrouping
<dt>\c SUBGROUPING <dd>
 \addindex SUBGROUPING
 Set the \c SUBGROUPING tag to \c YES to allow class member groups of
 the same type (for instance a group of public functions) to be put as a
 subgroup of that type (e.g. under the Public Functions section). Set it to
 \c NO to prevent subgrouping. Alternatively, this can be done per class using
 the \ref cmdnosubgrouping "\\nosubgrouping" command.


The default value is: <code>YES</code>.

 \anchor cfg_inline_grouped_classes
<dt>\c INLINE_GROUPED_CLASSES <dd>
 \addindex INLINE_GROUPED_CLASSES
 When the \c INLINE_GROUPED_CLASSES tag is set to \c YES, classes, structs and 
 unions are shown inside the group in which they are included 
 (e.g. using \ref cmdingroup "\\ingroup") instead of on a separate page (for HTML and Man pages) 
 or section (for \f$\mbox{\LaTeX}\f$ and RTF).
 <br>Note that this feature does not work in
 combination with \ref cfg_separate_member_pages "SEPARATE_MEMBER_PAGES".


The default value is: <code>NO</code>.

 \anchor cfg_inline_simple_structs
<dt>\c INLINE_SIMPLE_STRUCTS <dd>
 \addindex INLINE_SIMPLE_STRUCTS
 When the \c INLINE_SIMPLE_STRUCTS tag is set to \c YES, structs, classes, and 
 unions with only public data fields or simple typedef fields will be shown 
 inline in the documentation of the scope in which they are defined (i.e. file, 
 namespace, or group documentation), provided this scope is documented. If set 
 to \c NO, structs, classes, and unions are shown on a separate 
 page (for HTML and Man pages) or section (for \f$\mbox{\LaTeX}\f$ and RTF).


The default value is: <code>NO</code>.

 \anchor cfg_typedef_hides_struct
<dt>\c TYPEDEF_HIDES_STRUCT <dd>
 \addindex TYPEDEF_HIDES_STRUCT
 When \c TYPEDEF_HIDES_STRUCT tag is enabled, a typedef of a struct, union, or enum
 is documented as struct, union, or enum with the name of the typedef. So 
 <code>typedef struct TypeS {} TypeT</code>, will appear in the documentation as a struct 
 with name \c TypeT. When disabled the typedef will appear as a member of a file, 
 namespace, or class. And the struct will be named \c TypeS. This can typically 
 be useful for C code in case the coding convention dictates that all compound 
 types are typedef'ed and only the typedef is referenced, never the tag name.


The default value is: <code>NO</code>.

 \anchor cfg_lookup_cache_size
<dt>\c LOOKUP_CACHE_SIZE <dd>
 \addindex LOOKUP_CACHE_SIZE
 The size of the symbol lookup cache can be 
 set using \c LOOKUP_CACHE_SIZE. This cache is used to resolve symbols given 
 their name and scope. Since this can be an expensive process and often the 
 same symbol appears multiple times in the code, doxygen keeps a cache of 
 pre-resolved symbols. If the cache is too small doxygen will become slower. 
 If the cache is too large, memory is wasted. The cache size is given by this 
 formula: \f$2^{(16+\mbox{LOOKUP\_CACHE\_SIZE})}\f$. The valid range is 0..9, the default is 0, 
 corresponding to a cache size of \f$2^{16} = 65536\f$ symbols. 
 At the end of a run doxygen will report the cache usage and suggest the
 optimal cache size from a speed point of view.


 Minimum value: <code>0</code>, maximum value: <code>9</code>, default value: <code>0</code>.

</dl>
\section config_build Build related configuration options
 \anchor cfg_extract_all
<dl>

<dt>\c EXTRACT_ALL <dd>
 \addindex EXTRACT_ALL
 If the \c EXTRACT_ALL tag is set to \c YES doxygen will assume all 
 entities in documentation are documented, even if no documentation was 
 available. Private class members and static file members will be hidden 
 unless the \ref cfg_extract_private "EXTRACT_PRIVATE" respectively 
 \ref cfg_extract_static "EXTRACT_STATIC" tags are set to \c YES.

 \note This will also disable the warnings about undocumented members 
 that are normally produced when \ref cfg_warnings "WARNINGS" is 
 set to \c YES.


The default value is: <code>NO</code>.

 \anchor cfg_extract_private
<dt>\c EXTRACT_PRIVATE <dd>
 \addindex EXTRACT_PRIVATE
 If the \c EXTRACT_PRIVATE tag is set to \c YES all private members of a 
 class will be included in the documentation.


The default value is: <code>NO</code>.

 \anchor cfg_extract_package
<dt>\c EXTRACT_PACKAGE <dd>
 \addindex EXTRACT_PACKAGE
 If the \c EXTRACT_PACKAGE tag is set to \c YES all members with package 
 or internal scope will be included in the documentation.


The default value is: <code>NO</code>.

 \anchor cfg_extract_static
<dt>\c EXTRACT_STATIC <dd>
 \addindex EXTRACT_STATIC
 If the \c EXTRACT_STATIC tag is set to \c YES all static members of a file
 will be included in the documentation.


The default value is: <code>NO</code>.

 \anchor cfg_extract_local_classes
<dt>\c EXTRACT_LOCAL_CLASSES <dd>
 \addindex EXTRACT_LOCAL_CLASSES
 If the \c EXTRACT_LOCAL_CLASSES tag is set to \c YES classes (and structs) 
 defined locally in source files will be included in the documentation. 
 If set to \c NO only classes defined in header files are included. Does not
 have any effect for Java sources.


The default value is: <code>YES</code>.

 \anchor cfg_extract_local_methods
<dt>\c EXTRACT_LOCAL_METHODS <dd>
 \addindex EXTRACT_LOCAL_METHODS
 This flag is only useful for Objective-C code. When set to \c YES local 
 methods, which are defined in the implementation section but not in
 the interface are included in the documentation.
 If set to \c NO only methods in the interface are included.


The default value is: <code>NO</code>.

 \anchor cfg_extract_anon_nspaces
<dt>\c EXTRACT_ANON_NSPACES <dd>
 \addindex EXTRACT_ANON_NSPACES
 If this flag is set to \c YES, the members of anonymous namespaces will be extracted
 and appear in the documentation as a namespace called 'anonymous_namespace{file}',
 where file will be replaced with the base name of the file that contains the anonymous
 namespace. By default anonymous namespace are hidden.


The default value is: <code>NO</code>.

 \anchor cfg_hide_undoc_members
<dt>\c HIDE_UNDOC_MEMBERS <dd>
 \addindex HIDE_UNDOC_MEMBERS
 If the \c HIDE_UNDOC_MEMBERS tag is set to \c YES, doxygen will hide all
 undocumented members inside documented classes or files. 
 If set to \c NO these members will be included in the
 various overviews, but no documentation section is generated.
 This option has no effect if \ref cfg_extract_all "EXTRACT_ALL" is enabled.


The default value is: <code>NO</code>.

 \anchor cfg_hide_undoc_classes
<dt>\c HIDE_UNDOC_CLASSES <dd>
 \addindex HIDE_UNDOC_CLASSES
 If the \c HIDE_UNDOC_CLASSES tag is set to \c YES, doxygen will hide all
 undocumented classes that are normally visible in the class hierarchy. 
 If set to \c NO these classes will be included in the
 various overviews.
 This option has no effect if \ref cfg_extract_all "EXTRACT_ALL" is enabled.


The default value is: <code>NO</code>.

 \anchor cfg_hide_friend_compounds
<dt>\c HIDE_FRIEND_COMPOUNDS <dd>
 \addindex HIDE_FRIEND_COMPOUNDS
 If the \c HIDE_FRIEND_COMPOUNDS tag is set to \c YES, doxygen will hide all
 friend (class|struct|union) declarations.
 If set to \c NO these declarations will be included in the
 documentation.


The default value is: <code>NO</code>.

 \anchor cfg_hide_in_body_docs
<dt>\c HIDE_IN_BODY_DOCS <dd>
 \addindex HIDE_IN_BODY_DOCS
 If the \c HIDE_IN_BODY_DOCS tag is set to \c YES, doxygen will hide any 
 documentation blocks found inside the body of a function.
 If set to \c NO these blocks will be appended to the 
 function's detailed documentation block.


The default value is: <code>NO</code>.

 \anchor cfg_internal_docs
<dt>\c INTERNAL_DOCS <dd>
 \addindex INTERNAL_DOCS
 The \c INTERNAL_DOCS tag determines if documentation
 that is typed after a \ref cmdinternal "\\internal" command is included. If the tag is set
 to \c NO then the documentation will be excluded.
 Set it to \c YES to include the internal documentation.


The default value is: <code>NO</code>.

 \anchor cfg_case_sense_names
<dt>\c CASE_SENSE_NAMES <dd>
 \addindex CASE_SENSE_NAMES
 If the \c CASE_SENSE_NAMES tag is set to \c NO then doxygen
 will only generate file names in lower-case letters. If set to
 \c YES upper-case letters are also allowed. This is useful if you have
 classes or files whose names only differ in case and if your file system
 supports case sensitive file names. Windows and Mac users are advised to set this
 option to \c NO.


The default value is: system dependent.

 \anchor cfg_hide_scope_names
<dt>\c HIDE_SCOPE_NAMES <dd>
 \addindex HIDE_SCOPE_NAMES
 If the \c HIDE_SCOPE_NAMES tag is set to \c NO then doxygen 
 will show members with their full class and namespace scopes in the
 documentation. If set to \c YES the scope will be hidden.


The default value is: <code>NO</code>.

 \anchor cfg_show_include_files
<dt>\c SHOW_INCLUDE_FILES <dd>
 \addindex SHOW_INCLUDE_FILES
 If the \c SHOW_INCLUDE_FILES tag is set to \c YES then doxygen
 will put a list of the files that are included by a file in the documentation 
 of that file.


The default value is: <code>YES</code>.

 \anchor cfg_force_local_includes
<dt>\c FORCE_LOCAL_INCLUDES <dd>
 \addindex FORCE_LOCAL_INCLUDES
 If the \c FORCE_LOCAL_INCLUDES tag is set to \c YES then doxygen 
 will list include files with double quotes in the documentation 
 rather than with sharp brackets.


The default value is: <code>NO</code>.

 \anchor cfg_inline_info
<dt>\c INLINE_INFO <dd>
 \addindex INLINE_INFO
 If the \c INLINE_INFO tag is set to \c YES then a tag [inline]
 is inserted in the documentation for inline members.


The default value is: <code>YES</code>.

 \anchor cfg_sort_member_docs
<dt>\c SORT_MEMBER_DOCS <dd>
 \addindex SORT_MEMBER_DOCS
 If the \c SORT_MEMBER_DOCS tag is set to \c YES then doxygen
 will sort the (detailed) documentation of file and class members
 alphabetically by member name. If set to \c NO the members will appear in
 declaration order.


The default value is: <code>YES</code>.

 \anchor cfg_sort_brief_docs
<dt>\c SORT_BRIEF_DOCS <dd>
 \addindex SORT_BRIEF_DOCS
 If the \c SORT_BRIEF_DOCS tag is set to \c YES then doxygen will sort the
 brief descriptions of file, namespace and class members alphabetically
 by member name. If set to \c NO the members will appear in
 declaration order.


The default value is: <code>NO</code>.

 \anchor cfg_sort_members_ctors_1st
<dt>\c SORT_MEMBERS_CTORS_1ST <dd>
 \addindex SORT_MEMBERS_CTORS_1ST
 If the \c SORT_MEMBERS_CTORS_1ST tag is set to \c YES then doxygen
 will sort the (brief and detailed) documentation of class members so that
 constructors and destructors are listed first. If set to \c NO
 the constructors will appear in the respective orders defined by
 \ref cfg_sort_brief_docs "SORT_BRIEF_DOCS" and \ref cfg_sort_member_docs "SORT_MEMBER_DOCS".
 \note If \ref cfg_sort_brief_docs "SORT_BRIEF_DOCS" is set to \c NO this option is ignored for
       sorting brief member documentation.
 \note If \ref cfg_sort_member_docs "SORT_MEMBER_DOCS" is set to \c NO this option is ignored for
       sorting detailed member documentation.


The default value is: <code>NO</code>.

 \anchor cfg_sort_group_names
<dt>\c SORT_GROUP_NAMES <dd>
 \addindex SORT_GROUP_NAMES
 If the \c SORT_GROUP_NAMES tag is set to \c YES then doxygen will sort the 
 hierarchy of group names into alphabetical order. If set to \c NO
 the group names will appear in their defined order.


The default value is: <code>NO</code>.

 \anchor cfg_sort_by_scope_name
<dt>\c SORT_BY_SCOPE_NAME <dd>
 \addindex SORT_BY_SCOPE_NAME
 If the \c SORT_BY_SCOPE_NAME tag is set to \c YES, the class list will be
 sorted by fully-qualified names, including namespaces. If set to
 \c NO, the class list will be sorted only by class name,
 not including the namespace part.
 \note This option is not very useful if \ref cfg_hide_scope_names "HIDE_SCOPE_NAMES" is set to \c YES.
 \note This option applies only to the class list, not to the 
       alphabetical list.


The default value is: <code>NO</code>.

 \anchor cfg_strict_proto_matching
<dt>\c STRICT_PROTO_MATCHING <dd>
 \addindex STRICT_PROTO_MATCHING
 If the \c STRICT_PROTO_MATCHING option is enabled and doxygen fails to
 do proper type resolution of all parameters of a function it will reject a  
 match between the prototype and the implementation of a member function even
 if there is only one candidate or it is obvious which candidate to choose
 by doing a simple string match. By disabling \c STRICT_PROTO_MATCHING doxygen 
 will still accept a match between prototype and implementation in such cases.


The default value is: <code>NO</code>.

 \anchor cfg_generate_todolist
<dt>\c GENERATE_TODOLIST <dd>
 \addindex GENERATE_TODOLIST
 The \c GENERATE_TODOLIST tag can be used to enable (\c YES) or
 disable (\c NO) the todo list. This list is created by 
 putting \ref cmdtodo "\\todo" commands in the documentation.


The default value is: <code>YES</code>.

 \anchor cfg_generate_testlist
<dt>\c GENERATE_TESTLIST <dd>
 \addindex GENERATE_TESTLIST
 The \c GENERATE_TESTLIST tag can be used to enable (\c YES) or
 disable (\c NO) the test list. This list is created by 
 putting \ref cmdtest "\\test" commands in the documentation.


The default value is: <code>YES</code>.

 \anchor cfg_generate_buglist
<dt>\c GENERATE_BUGLIST <dd>
 \addindex GENERATE_BUGLIST
 The \c GENERATE_BUGLIST tag can be used to enable (\c YES) or
 disable (\c NO) the bug list. This list is created by 
 putting \ref cmdbug "\\bug" commands in the documentation.


The default value is: <code>YES</code>.

 \anchor cfg_generate_deprecatedlist
<dt>\c GENERATE_DEPRECATEDLIST <dd>
 \addindex GENERATE_DEPRECATEDLIST
 The \c GENERATE_DEPRECATEDLIST tag can be used to enable (\c YES) or
 disable (\c NO) the deprecated list. This list is created by 
 putting \ref cmddeprecated "\\deprecated"
 commands in the documentation.


The default value is: <code>YES</code>.

 \anchor cfg_enabled_sections
<dt>\c ENABLED_SECTIONS <dd>
 \addindex ENABLED_SECTIONS
 The \c ENABLED_SECTIONS tag can be used to enable conditional
 documentation sections, marked by \ref cmdif "\\if" \<section_label\> ... 
 \ref cmdendif "\\endif" and \ref cmdcond "\\cond" \<section_label\> ...
 \ref cmdendcond "\\endcond" blocks.

 \anchor cfg_max_initializer_lines
<dt>\c MAX_INITIALIZER_LINES <dd>
 \addindex MAX_INITIALIZER_LINES
 The \c MAX_INITIALIZER_LINES tag determines the maximum number of lines
 that the initial value of a variable or macro / define can have for it to appear in
 the documentation. If the initializer
 consists of more lines than specified here it will be hidden. Use a value
 of 0 to hide initializers completely. The appearance of the value of
 individual variables and macros / defines can be controlled using \ref cmdshowinitializer "\\showinitializer"
 or \ref cmdhideinitializer "\\hideinitializer" command in the documentation regardless of this setting.


 Minimum value: <code>0</code>, maximum value: <code>10000</code>, default value: <code>30</code>.

 \anchor cfg_show_used_files
<dt>\c SHOW_USED_FILES <dd>
 \addindex SHOW_USED_FILES
 Set the \c SHOW_USED_FILES tag to \c NO to disable the list of files generated
 at the bottom of the documentation of classes and structs. If set to \c YES the
 list will mention the files that were used to generate the documentation.


The default value is: <code>YES</code>.

 \anchor cfg_show_files
<dt>\c SHOW_FILES <dd>
 \addindex SHOW_FILES
 Set the \c SHOW_FILES tag to \c NO to disable the generation of the Files page.
 This will remove the Files entry from the Quick Index and from the
 Folder Tree View (if specified).


The default value is: <code>YES</code>.

 \anchor cfg_show_namespaces
<dt>\c SHOW_NAMESPACES <dd>
 \addindex SHOW_NAMESPACES
 Set the \c SHOW_NAMESPACES tag to \c NO to disable the generation of the
 Namespaces page. This will remove the Namespaces entry from the Quick Index
 and from the Folder Tree View (if specified).


The default value is: <code>YES</code>.

 \anchor cfg_file_version_filter
<dt>\c FILE_VERSION_FILTER <dd>
 \addindex FILE_VERSION_FILTER
 The \c FILE_VERSION_FILTER tag can be used to specify a program or script that
 doxygen should invoke to get the current version for each file (typically from the
 version control system). Doxygen will invoke the program by executing (via
 <code>popen()</code>) the command <code>command input-file</code>, where \c command is 
 the value of the \c FILE_VERSION_FILTER tag, and \c input-file is the name 
 of an input file provided by doxygen. 
 Whatever the program writes to standard output is used as the file version.Example of using a shell script as a filter for Unix:
\verbatim
 FILE_VERSION_FILTER = "/bin/sh versionfilter.sh"
\endverbatim
<br>
Example shell script for CVS:
\verbatim
#!/bin/sh
cvs status $1 | sed -n 's/^[ \]*Working revision:[ \t]*\([0-9][0-9\.]*\).*/\1/p'
\endverbatim 
<br> 
Example shell script for Subversion:
\verbatim
#!/bin/sh
svn stat -v $1 | sed -n 's/^[ A-Z?\*|!]\{1,15\}/r/;s/ \{1,15\}/\/r/;s/ .*//p'
\endverbatim
<br>
Example filter for ClearCase:
\verbatim
FILE_VERSION_INFO = "cleartool desc -fmt \%Vn"
\endverbatim

 \anchor cfg_layout_file
<dt>\c LAYOUT_FILE <dd>
 \addindex LAYOUT_FILE
 The \c LAYOUT_FILE tag can be used to specify a layout file which will be parsed by
 doxygen. The layout file controls the global structure of the generated output files
 in an output format independent way. To create the layout file that represents
 doxygen's defaults, run doxygen with the `-l` option. You can optionally specify a
 file name after the option, if omitted \c DoxygenLayout.xml will be used as the name
 of the layout file.
 <br>Note that if you run doxygen from a directory containing 
 a file called \c DoxygenLayout.xml, doxygen will parse it automatically even if 
 the \c LAYOUT_FILE tag is left empty.

 \anchor cfg_cite_bib_files
<dt>\c CITE_BIB_FILES <dd>
 \addindex CITE_BIB_FILES
 The \c CITE_BIB_FILES tag can be used to specify one or more \c bib files 
 containing the reference definitions. This must be a list of <code>.bib</code> files. The 
 <code>.bib</code> extension is automatically appended if omitted. This requires the 
 \c bibtex tool to be installed. See also http://en.wikipedia.org/wiki/BibTeX for
 more info. For \f$\mbox{\LaTeX}\f$ the style of the bibliography can be controlled 
 using \ref cfg_latex_bib_style "LATEX_BIB_STYLE".
 To use this 
 feature you need \c bibtex and \c perl available in the search path. Do not use 
 file names with spaces, \c bibtex cannot handle them.
 See also \ref cmdcite "\\cite" for info how to create references.

</dl>
\section config_messages Configuration options related to warning and progress messages
 \anchor cfg_quiet
<dl>

<dt>\c QUIET <dd>
 \addindex QUIET
 The \c QUIET tag can be used to turn on/off the messages that are generated
 to standard output by doxygen. If \c QUIET is set to \c YES this implies that the messages are off.


The default value is: <code>NO</code>.

 \anchor cfg_warnings
<dt>\c WARNINGS <dd>
 \addindex WARNINGS
 The \c WARNINGS tag can be used to turn on/off the warning messages that are
 generated to standard error (\c stderr) by doxygen. If \c WARNINGS is set to 
 \c YES this implies that the warnings are on.
<br>
 \b Tip: Turn warnings on while writing the documentation.


The default value is: <code>YES</code>.

 \anchor cfg_warn_if_undocumented
<dt>\c WARN_IF_UNDOCUMENTED <dd>
 \addindex WARN_IF_UNDOCUMENTED
 If the \c WARN_IF_UNDOCUMENTED tag is set to \c YES, then doxygen will generate warnings
 for undocumented members. If \ref cfg_extract_all "EXTRACT_ALL" is set to \c YES then this flag will
 automatically be disabled.


The default value is: <code>YES</code>.

 \anchor cfg_warn_if_doc_error
<dt>\c WARN_IF_DOC_ERROR <dd>
 \addindex WARN_IF_DOC_ERROR
 If the \c WARN_IF_DOC_ERROR tag is set to \c YES, doxygen will generate warnings for
 potential errors in the documentation, such as not documenting some
 parameters in a documented function, or documenting parameters that
 don't exist or using markup commands wrongly.


The default value is: <code>YES</code>.

 \anchor cfg_warn_no_paramdoc
<dt>\c WARN_NO_PARAMDOC <dd>
 \addindex WARN_NO_PARAMDOC
 This \c WARN_NO_PARAMDOC option can be enabled to get warnings for 
 functions that are documented, but have no documentation for their parameters
 or return value. If set to \c NO doxygen will only warn about
 wrong or incomplete parameter documentation, but not about the absence of
 documentation.


The default value is: <code>NO</code>.

 \anchor cfg_warn_format
<dt>\c WARN_FORMAT <dd>
 \addindex WARN_FORMAT
 The \c WARN_FORMAT tag determines the format of the warning messages that
 doxygen can produce. The string should contain the <code>\$file</code>, 
 <code>\$line</code>, and <code>\$text</code> 
 tags, which will be replaced by the file and line number from which the
 warning originated and the warning text.
 Optionally the format may contain 
 <code>$version</code>, which will be replaced by the version of the file (if it could 
 be obtained via \ref cfg_file_version_filter "FILE_VERSION_FILTER")

The default value is: <code>$file:$line: $text</code>.

 \anchor cfg_warn_logfile
<dt>\c WARN_LOGFILE <dd>
 \addindex WARN_LOGFILE
 The \c WARN_LOGFILE tag can be used to specify a file to which warning
 and error messages should be written. If left blank the output is written 
 to standard error (`stderr`).

</dl>
\section config_input Configuration options related to the input files
 \anchor cfg_input
<dl>

<dt>\c INPUT <dd>
 \addindex INPUT
 The \c INPUT tag is used to specify the files and/or directories that contain 
 documented source files. You may enter file names like 
 \c myfile.cpp or directories like \c /usr/src/myproject. 
 Separate the files or directories with spaces.

 \note If this tag is empty the current directory is searched.

 \anchor cfg_input_encoding
<dt>\c INPUT_ENCODING <dd>
 \addindex INPUT_ENCODING
 This tag can be used to specify the character encoding of the source files that 
 doxygen parses. Internally doxygen uses the UTF-8 encoding.
 Doxygen uses `libiconv` (or the `iconv` built into `libc`) for the transcoding. 
 See <a href="http://www.gnu.org/software/libiconv">the libiconv documentation</a> for 
 the list of possible encodings.

The default value is: <code>UTF-8</code>.

 \anchor cfg_file_patterns
<dt>\c FILE_PATTERNS <dd>
 \addindex FILE_PATTERNS
 If the value of the \ref cfg_input "INPUT" tag contains directories, you can use the 
 \c FILE_PATTERNS tag to specify one or more wildcard patterns 
 (like `*.cpp` and `*.h`) to filter out the source-files 
 in the directories. If left blank the following patterns are tested:
<code>*.c</code>, 
<code>*.cc</code>, 
<code>*.cxx</code>, 
<code>*.cpp</code>, 
<code>*.c++</code>, 
<code>*.java</code>, 
<code>*.ii</code>, 
<code>*.ixx</code>, 
<code>*.ipp</code>, 
<code>*.i++</code>, 
<code>*.inl</code>, 
<code>*.idl</code>, 
<code>*.ddl</code>, 
<code>*.odl</code>, 
<code>*.h</code>, 
<code>*.hh</code>, 
<code>*.hxx</code>, 
<code>*.hpp</code>, 
<code>*.h++</code>, 
<code>*.cs</code>, 
<code>*.d</code>, 
<code>*.php</code>, 
<code>*.php4</code>, 
<code>*.php5</code>, 
<code>*.phtml</code>, 
<code>*.inc</code>, 
<code>*.m</code>, 
<code>*.markdown</code>, 
<code>*.md</code>, 
<code>*.mm</code>, 
<code>*.dox</code>, 
<code>*.py</code>, 
<code>*.f90</code>, 
<code>*.f</code>, 
<code>*.for</code>, 
<code>*.tcl</code>, 
<code>*.vhd</code>, 
<code>*.vhdl</code>, 
<code>*.ucf</code>, 
<code>*.qsf</code>, 
<code>*.as</code> and 
<code>*.js</code>.

 \anchor cfg_recursive
<dt>\c RECURSIVE <dd>
 \addindex RECURSIVE
 The \c RECURSIVE tag can be used to specify whether or not subdirectories
 should be searched for input files as well.


The default value is: <code>NO</code>.

 \anchor cfg_exclude
<dt>\c EXCLUDE <dd>
 \addindex EXCLUDE
 The \c EXCLUDE tag can be used to specify files and/or directories that should be
 excluded from the \ref cfg_input "INPUT" source files. This way you can easily exclude a
 subdirectory from a directory tree whose root is specified with the \ref cfg_input "INPUT" tag.
 <br>Note that relative paths are relative to the directory from which doxygen is run.

 \anchor cfg_exclude_symlinks
<dt>\c EXCLUDE_SYMLINKS <dd>
 \addindex EXCLUDE_SYMLINKS
 The \c EXCLUDE_SYMLINKS tag can be used to select whether or not files or directories 
 that are symbolic links (a Unix file system feature) are excluded from the input.


The default value is: <code>NO</code>.

 \anchor cfg_exclude_patterns
<dt>\c EXCLUDE_PATTERNS <dd>
 \addindex EXCLUDE_PATTERNS
 If the value of the \ref cfg_input "INPUT" tag contains directories, you can use the
 \c EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude
 certain files from those directories.
 <br>Note that the wildcards are matched 
 against the file with absolute path, so to exclude all test directories 
 for example use the pattern `*``/test/``*`

 \anchor cfg_exclude_symbols
<dt>\c EXCLUDE_SYMBOLS <dd>
 \addindex EXCLUDE_SYMBOLS
 The \c EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names 
 (namespaces, classes, functions, etc.) that should be excluded from the 
 output. The symbol name can be a fully qualified name, a word, or if the 
 wildcard `*` is used, a substring. Examples: `ANamespace`, `AClass`, 
 `AClass::ANamespace`, `ANamespace::*Test` 
 <br>Note that the wildcards are matched against the file with absolute path, 
 so to exclude all test directories use the pattern 
 `*``/test/``*`

 \anchor cfg_example_path
<dt>\c EXAMPLE_PATH <dd>
 \addindex EXAMPLE_PATH
 The \c EXAMPLE_PATH tag can be used to specify one or more files or
 directories that contain example code fragments that are included (see
 the \ref cmdinclude "\\include" command).

 \anchor cfg_example_patterns
<dt>\c EXAMPLE_PATTERNS <dd>
 \addindex EXAMPLE_PATTERNS
 If the value of the \ref cfg_example_path "EXAMPLE_PATH" tag contains directories, 
 you can use the
 \c EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like `*.cpp`
 and `*.h`) to filter out the source-files in the directories. If left
 blank all files are included.

 \anchor cfg_example_recursive
<dt>\c EXAMPLE_RECURSIVE <dd>
 \addindex EXAMPLE_RECURSIVE
 If the \c EXAMPLE_RECURSIVE tag is set to \c YES then subdirectories will be
 searched for input files to be used with the \ref cmdinclude "\\include" or
 \ref cmddontinclude "\\dontinclude" 
 commands irrespective of the value of the \ref cfg_recursive "RECURSIVE" tag.


The default value is: <code>NO</code>.

 \anchor cfg_image_path
<dt>\c IMAGE_PATH <dd>
 \addindex IMAGE_PATH
 The \c IMAGE_PATH tag can be used to specify one or more files or
 directories that contain images that are to be included in the 
 documentation (see the \ref cmdimage "\\image" command).

 \anchor cfg_input_filter
<dt>\c INPUT_FILTER <dd>
 \addindex INPUT_FILTER
 The \c INPUT_FILTER tag can be used to specify a program that doxygen should
 invoke to filter for each input file. Doxygen will invoke the filter program
 by executing (via <code>popen()</code>) the command:
 <br>
   <code>\<filter\> \<input-file\></code>
 <br>
 where <code>\<filter\></code>
 is the value of the \c INPUT_FILTER tag, and <code>\<input-file\></code> is the name of an
 input file. Doxygen will then use the output that the filter program writes
 to standard output.  If \ref cfg_filter_patterns "FILTER_PATTERNS" is specified, this tag will be ignored. 
 <br>Note that the filter must not add or remove lines; it is applied before the 
 code is scanned, but not when the output code is generated. If lines are added 
 or removed, the anchors will not be placed correctly.

 \anchor cfg_filter_patterns
<dt>\c FILTER_PATTERNS <dd>
 \addindex FILTER_PATTERNS
 The \c FILTER_PATTERNS tag can be used to specify filters on a per file pattern
 basis. Doxygen will compare the file name with each pattern and apply the
 filter if there is a match. The filters are a list of the form:
 pattern=filter (like `*.cpp=my_cpp_filter`). See \ref cfg_input_filter "INPUT_FILTER" for further
 information on how filters are used. If the \c FILTER_PATTERNS tag is empty or if
 none of the patterns match the file name, \ref cfg_input_filter "INPUT_FILTER" is 
 applied.

 \anchor cfg_filter_source_files
<dt>\c FILTER_SOURCE_FILES <dd>
 \addindex FILTER_SOURCE_FILES
 If the \c FILTER_SOURCE_FILES tag is set to \c YES, the input filter (if set using
 \ref cfg_input_filter "INPUT_FILTER" ) will also be used to filter the input
 files that are used for producing the source files to browse 
 (i.e. when \ref cfg_source_browser "SOURCE_BROWSER" is set to \c YES).


The default value is: <code>NO</code>.

 \anchor cfg_filter_source_patterns
<dt>\c FILTER_SOURCE_PATTERNS <dd>
 \addindex FILTER_SOURCE_PATTERNS
 The \c FILTER_SOURCE_PATTERNS tag can be used to specify source filters per 
 file pattern. A pattern will override the setting 
 for \ref cfg_filter_patterns "FILTER_PATTERN" (if any) 
 and it is also possible to disable source filtering for a specific pattern 
 using `*.ext=` (so without naming a filter).


This tag requires that the tag \ref cfg_filter_source_files "FILTER_SOURCE_FILES" is set to \c YES.
 \anchor cfg_use_mdfile_as_mainpage
<dt>\c USE_MDFILE_AS_MAINPAGE <dd>
 \addindex USE_MDFILE_AS_MAINPAGE
 If the \c USE_MDFILE_AS_MAINPAGE tag refers to the name of a markdown file that 
 is part of the input, its contents will be placed on the main page (`index.html`). 
 This can be useful if you have a project on for instance GitHub and want to reuse 
 the introduction page also for the doxygen output.

</dl>
\section config_source_browser Configuration options related to source browsing
 \anchor cfg_source_browser
<dl>

<dt>\c SOURCE_BROWSER <dd>
 \addindex SOURCE_BROWSER
 If the \c SOURCE_BROWSER tag is set to \c YES then a list of source files will
 be generated. Documented entities will be cross-referenced with these sources.
 <br>Note: To get rid of all source code in the generated output, make sure that also
 \ref cfg_verbatim_headers "VERBATIM_HEADERS" is set to \c NO.


The default value is: <code>NO</code>.

 \anchor cfg_inline_sources
<dt>\c INLINE_SOURCES <dd>
 \addindex INLINE_SOURCES
 Setting the \c INLINE_SOURCES tag to \c YES will include the body
 of functions, classes and enums directly into the documentation.


The default value is: <code>NO</code>.

 \anchor cfg_strip_code_comments
<dt>\c STRIP_CODE_COMMENTS <dd>
 \addindex STRIP_CODE_COMMENTS
 Setting the \c STRIP_CODE_COMMENTS tag to \c YES will instruct
 doxygen to hide any special comment blocks from generated source code
 fragments. Normal C, C++ and Fortran comments will always remain visible.


The default value is: <code>YES</code>.

 \anchor cfg_referenced_by_relation
<dt>\c REFERENCED_BY_RELATION <dd>
 \addindex REFERENCED_BY_RELATION
 If the \c REFERENCED_BY_RELATION tag is set to \c YES
 then for each documented function all documented
 functions referencing it will be listed.


The default value is: <code>NO</code>.

 \anchor cfg_references_relation
<dt>\c REFERENCES_RELATION <dd>
 \addindex REFERENCES_RELATION
 If the \c REFERENCES_RELATION tag is set to \c YES
 then for each documented function all documented entities
 called/used by that function will be listed.


The default value is: <code>NO</code>.

 \anchor cfg_references_link_source
<dt>\c REFERENCES_LINK_SOURCE <dd>
 \addindex REFERENCES_LINK_SOURCE
 If the \c REFERENCES_LINK_SOURCE tag is set to \c YES
 and \ref cfg_source_browser "SOURCE_BROWSER" tag is set to \c YES, then the hyperlinks from 
 functions in \ref cfg_references_relation "REFERENCES_RELATION" and
 \ref cfg_referenced_by_relation "REFERENCED_BY_RELATION" lists will 
 link to the source code.  Otherwise they will link to the documentation.


The default value is: <code>YES</code>.

 \anchor cfg_source_tooltips
<dt>\c SOURCE_TOOLTIPS <dd>
 \addindex SOURCE_TOOLTIPS
If SOURCE_TOOLTIPS is enabled (the default) then hovering a hyperlink in the 
source code will show a tooltip with additional information such as prototype, 
brief description and links to the definition and documentation. Since this will 
make the HTML file larger and loading of large files a bit slower, you can opt 
to disable this feature.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_source_browser "SOURCE_BROWSER" is set to \c YES.
 \anchor cfg_use_htags
<dt>\c USE_HTAGS <dd>
 \addindex USE_HTAGS
 If the \c USE_HTAGS tag is set to \c YES then the references to source code
 will point to the HTML generated by the \c htags(1) tool instead of doxygen
 built-in source browser. The \c htags tool is part of GNU's global source
 tagging system (see http://www.gnu.org/software/global/global.html). You 
 will need version 4.8.6 or higher. 
<br>
 To use it do the following:
 -# Install the latest version of \c global
 -# Enable \ref cfg_source_browser "SOURCE_BROWSER" and \c USE_HTAGS in the config file
 -# Make sure the \ref cfg_input "INPUT" points to the root of the source tree
 -# Run \c doxygen as normal
<br>
 Doxygen will invoke \c htags (and that will in turn invoke \c gtags), so these tools
 must be available from the command line (i.e. in the search path).
<br>
 The result: instead of the source browser generated by doxygen, the links to
 source code will now point to the output of \c htags.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_source_browser "SOURCE_BROWSER" is set to \c YES.
 \anchor cfg_verbatim_headers
<dt>\c VERBATIM_HEADERS <dd>
 \addindex VERBATIM_HEADERS
  If the \c VERBATIM_HEADERS tag is set the \c YES then doxygen
  will generate a verbatim copy of the header file for each class for
  which an include is specified. Set to \c NO to disable this.
  \sa Section \ref cmdclass "\\class".


The default value is: <code>YES</code>.

 \anchor cfg_clang_assisted_parsing
<dt>\c CLANG_ASSISTED_PARSING <dd>
 \addindex CLANG_ASSISTED_PARSING
  If the \c CLANG_ASSISTED_PARSING tag is set to \c YES, then doxygen will use the 
  <a href="http://clang.llvm.org/">clang parser</a> for more acurate parsing 
  at the cost of reduced performance. This can be particularly helpful with 
  template rich C++ code for which doxygen's built-in parser lacks the 
  necessary type information.

  @note The availability of this option depends on whether or not doxygen
  was compiled with the `--with-libclang` option.


The default value is: <code>NO</code>.

 \anchor cfg_clang_options
<dt>\c CLANG_OPTIONS <dd>
 \addindex CLANG_OPTIONS
 If clang assisted parsing is enabled you can provide the compiler with command 
 line options that you would normally use when invoking the compiler. Note that 
 the include paths will already be set by doxygen for the files and directories 
 specified with \ref cfg_input "INPUT" and \ref cfg_include_path "INCLUDE_PATH".


This tag requires that the tag \ref cfg_clang_assisted_parsing "CLANG_ASSISTED_PARSING" is set to \c YES.
</dl>
\section config_index Configuration options related to the alphabetical class index
 \anchor cfg_alphabetical_index
<dl>

<dt>\c ALPHABETICAL_INDEX <dd>
 \addindex ALPHABETICAL_INDEX
 If the \c ALPHABETICAL_INDEX tag is set to \c YES, an alphabetical index
 of all compounds will be generated. Enable this if the project contains 
 a lot of classes, structs, unions or interfaces.


The default value is: <code>YES</code>.

 \anchor cfg_cols_in_alpha_index
<dt>\c COLS_IN_ALPHA_INDEX <dd>
 \addindex COLS_IN_ALPHA_INDEX
 The \c COLS_IN_ALPHA_INDEX tag can be 
 used to specify the number of columns in which the alphabetical index list will be split.


 Minimum value: <code>1</code>, maximum value: <code>20</code>, default value: <code>5</code>.


This tag requires that the tag \ref cfg_alphabetical_index "ALPHABETICAL_INDEX" is set to \c YES.
 \anchor cfg_ignore_prefix
<dt>\c IGNORE_PREFIX <dd>
 \addindex IGNORE_PREFIX
 In case all classes in a project start with a common prefix, all classes will 
 be put under the same header in the alphabetical index.
 The \c IGNORE_PREFIX tag can be used to specify a prefix 
 (or a list of prefixes) that should be ignored while generating the index headers.


This tag requires that the tag \ref cfg_alphabetical_index "ALPHABETICAL_INDEX" is set to \c YES.
</dl>
\section config_html Configuration options related to the HTML output
 \anchor cfg_generate_html
<dl>

<dt>\c GENERATE_HTML <dd>
 \addindex GENERATE_HTML
 If the \c GENERATE_HTML tag is set to \c YES doxygen will
 generate HTML output


The default value is: <code>YES</code>.

 \anchor cfg_html_output
<dt>\c HTML_OUTPUT <dd>
 \addindex HTML_OUTPUT
 The \c HTML_OUTPUT tag is used to specify where the HTML docs will be put.
 If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be
 put in front of it.

The default directory is: <code>html</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_html_file_extension
<dt>\c HTML_FILE_EXTENSION <dd>
 \addindex HTML_FILE_EXTENSION
 The \c HTML_FILE_EXTENSION tag can be used to specify the file extension for 
 each generated HTML page (for example: <code>.htm, .php, .asp</code>).

The default value is: <code>.html</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_html_header
<dt>\c HTML_HEADER <dd>
 \addindex HTML_HEADER
 The \c HTML_HEADER tag can be used to specify a user-defined HTML 
 header file for each generated HTML page. 
 If the tag is left blank doxygen will generate a 
 standard header. 
<br>
 To get valid HTML the header file that
 includes any scripts and style sheets that doxygen
 needs, which is dependent on the configuration options used (e.g. the
 setting \ref cfg_generate_treeview "GENERATE_TREEVIEW").
 It is highly recommended to start with a default header using
\verbatim
doxygen -w html new_header.html new_footer.html new_stylesheet.css YourConfigFile
\endverbatim
 and then modify the file \c new_header.html.

 See also section \ref doxygen_usage for information on how to generate
 the default header that doxygen normally uses.

 @note The header is subject to change so you typically
 have to regenerate the default header when upgrading to a newer version of 
 doxygen. The following markers have a special meaning inside the header and footer:
 <dl>
 <dt><code>\$title</code><dd>will be replaced with the title of the page.
 <dt><code>\$datetime</code><dd>will be replaced with current the date and time.
 <dt><code>\$date</code><dd>will be replaced with the current date.
 <dt><code>\$year</code><dd>will be replaces with the current year.
 <dt><code>\$doxygenversion</code><dd>will be replaced with the version of doxygen
 <dt><code>\$projectname</code><dd>will be replaced with the name of 
            the project (see \ref cfg_project_name "PROJECT_NAME")
 <dt><code>\$projectnumber</code><dd>will be replaced with the project number
            (see \ref cfg_project_number "PROJECT_NUMBER")
 <dt><code>\$projectbrief</code><dd>will be replaced with the project brief
            description (see \ref cfg_project_brief "PROJECT_BRIEF")
 <dt><code>\$projectlogo</code><dd>will be replaced with the project logo
            (see \ref cfg_project_logo "PROJECT_LOGO")
 <dt><code>\$treeview</code><dd>will be replaced with links to 
            the javascript and style sheets needed for the navigation tree 
            (or an empty string when \ref cfg_generate_treeview "GENERATE_TREEVIEW" 
            is disabled).
 <dt><code>\$search</code><dd>will be replaced with a links to 
            the javascript and style sheets needed for the search engine 
            (or an empty string when \ref cfg_searchengine "SEARCHENGINE" 
            is disabled).
 <dt><code>\$mathjax</code><dd>will be replaced with a links to 
            the javascript and style sheets needed for the MathJax feature 
            (or an empty string when \ref cfg_use_mathjax "USE_MATHJAX" is disabled).
 <dt><code>\$relpath^</code><dd>
 If \ref cfg_create_subdirs "CREATE_SUBDIRS" is enabled, the command <code>\$relpath^</code> can be 
 used to produce a relative path to the root of the HTML output directory,
 e.g. use <code>\$relpath^doxygen.css</code>, to refer to the standard style sheet.
 </dl>

 To cope with differences in the layout of the header and footer that depend on 
 configuration settings, the header can also contain special blocks that 
 will be copied to the output or skipped depending on the configuration.
 Such blocks have the following form:
\verbatim
 <!--BEGIN BLOCKNAME-->
 Some context copied when condition BLOCKNAME holds
 <!--END BLOCKNAME-->
 <!--BEGIN !BLOCKNAME-->
 Some context copied when condition BLOCKNAME does not hold
 <!--END !BLOCKNAME-->
\endverbatim
 The following block names are supported:
 <dl>
 <dt><code>DISABLE_INDEX</code><dd>Content within this block is copied to the output
     when the \ref cfg_disable_index "DISABLE_INDEX" option is enabled (so when the index is disabled).
 <dt><code>GENERATE_TREEVIEW</code><dd>Content within this block is copied to the output
     when the \ref cfg_generate_treeview "GENERATE_TREEVIEW" option is enabled.
 <dt><code>SEARCHENGINE</code><dd>Content within this block is copied to the output
     when the \ref cfg_searchengine "SEARCHENGINE" option is enabled.
 <dt><code>PROJECT_NAME</code><dd>Content within the block is copied to the output
      when the \ref cfg_project_name "PROJECT_NAME" option is not empty.
 <dt><code>PROJECT_NUMBER</code><dd>Content within the block is copied to the output
      when the \ref cfg_project_number "PROJECT_NUMBER" option is not empty.
 <dt><code>PROJECT_BRIEF</code><dd>Content within the block is copied to the output
      when the \ref cfg_project_brief "PROJECT_BRIEF" option is not empty.
 <dt><code>PROJECT_LOGO</code><dd>Content within the block is copied to the output
      when the \ref cfg_project_logo "PROJECT_LOGO" option is not empty.
 <dt><code>TITLEAREA</code><dd>Content within this block is copied to the output
     when a title is visible at the top of each page. This is the case
     if either \ref cfg_project_name "PROJECT_NAME", 
     \ref cfg_project_brief "PROJECT_BRIEF", \ref cfg_project_logo "PROJECT_LOGO" 
     is filled in or if both \ref cfg_disable_index "DISABLE_INDEX" and 
     \ref cfg_searchengine "SEARCHENGINE" are enabled.
 </dl>


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_html_footer
<dt>\c HTML_FOOTER <dd>
 \addindex HTML_FOOTER
 The \c HTML_FOOTER tag can be used to specify a user-defined HTML footer for 
 each generated HTML page. 
 If the tag is left blank doxygen will generate a standard footer.

 See \ref cfg_html_header "HTML_HEADER" for more information on 
 how to generate a default footer and what special commands can be 
 used inside the footer.

 See also section \ref doxygen_usage for information on how to generate
 the default footer that doxygen normally uses.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_html_stylesheet
<dt>\c HTML_STYLESHEET <dd>
 \addindex HTML_STYLESHEET
 The \c HTML_STYLESHEET tag can be used to specify a user-defined cascading 
 style sheet that is used by each HTML page. It can be used to 
 fine-tune the look of the HTML output. If left blank doxygen 
 will generate a default style sheet. 
 
 See also section \ref doxygen_usage for information on how to generate
 the style sheet that doxygen normally uses.

 \note It is recommended to use 
 \ref cfg_html_extra_stylesheet "HTML_EXTRA_STYLESHEET" instead of this tag,
 as it is more robust and 
 this tag (<code>HTML_STYLESHEET</code>) will in the future become obsolete.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_html_extra_stylesheet
<dt>\c HTML_EXTRA_STYLESHEET <dd>
 \addindex HTML_EXTRA_STYLESHEET
 The \c HTML_EXTRA_STYLESHEET tag can be used to specify an additional 
 user-defined cascading style sheet that is included after the standard 
 style sheets created by doxygen. Using this option one can overrule 
 certain style aspects. This is preferred over using \ref cfg_html_stylesheet "HTML_STYLESHEET" 
 since it does not replace the standard style sheet and is therefor more 
 robust against future updates. Doxygen will copy the style sheet file to 
 the output directory. Here is an example stylesheet that gives the contents area a fixed width:
\verbatim
body {
        background-color: #CCC;
        color: black;
        margin: 0;
}

div.contents {
        margin-bottom: 10px;
        padding: 12px;
        margin-left: auto;
        margin-right: auto;
        width: 960px;
        background-color: white;
        border-radius: 8px;
}

#titlearea {
        background-color: white;
}

hr.footer {
        display: none;
}

.footer {
        background-color: #AAA;
}
\endverbatim


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_html_extra_files
<dt>\c HTML_EXTRA_FILES <dd>
 \addindex HTML_EXTRA_FILES
 The \c HTML_EXTRA_FILES tag can be used to specify one or more extra images or 
 other source files which should be copied to the HTML output directory. Note 
 that these files will be copied to the base HTML output directory. Use the 
 <code>$relpath^</code> marker in the \ref cfg_html_header "HTML_HEADER" and/or
 \ref cfg_html_footer "HTML_FOOTER" files to load these 
 files. In the \ref cfg_html_stylesheet "HTML_STYLESHEET" file, use the file name only. Also note that 
 the files will be copied as-is; there are no commands or markers available.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_html_colorstyle_hue
<dt>\c HTML_COLORSTYLE_HUE <dd>
 \addindex HTML_COLORSTYLE_HUE
 The \c HTML_COLORSTYLE_HUE tag controls the color of the HTML output. 
 Doxygen will adjust the colors in the stylesheet and background images 
 according to this color. Hue is specified as an angle on a colorwheel, 
 see http://en.wikipedia.org/wiki/Hue for more information. 
 For instance the value 0 represents red, 60 is yellow, 120 is green, 
 180 is cyan, 240 is blue, 300 purple, and 360 is red again.


 Minimum value: <code>0</code>, maximum value: <code>359</code>, default value: <code>220</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_html_colorstyle_sat
<dt>\c HTML_COLORSTYLE_SAT <dd>
 \addindex HTML_COLORSTYLE_SAT
 The \c HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of 
 the colors in the HTML output. For a value of 0 the output will use 
 grayscales only. A value of 255 will produce the most vivid colors.


 Minimum value: <code>0</code>, maximum value: <code>255</code>, default value: <code>100</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_html_colorstyle_gamma
<dt>\c HTML_COLORSTYLE_GAMMA <dd>
 \addindex HTML_COLORSTYLE_GAMMA
 The \c HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to 
 the luminance component of the colors in the HTML output. Values below 
 100 gradually make the output lighter, whereas values above 100 make 
 the output darker. The value divided by 100 is the actual gamma applied, 
 so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2, 
 and 100 does not change the gamma.


 Minimum value: <code>40</code>, maximum value: <code>240</code>, default value: <code>80</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_html_timestamp
<dt>\c HTML_TIMESTAMP <dd>
 \addindex HTML_TIMESTAMP
 If the \c HTML_TIMESTAMP tag is set to \c YES then the footer of 
 each generated HTML page will contain the date and time when the page 
 was generated. Setting this to \c NO can help when comparing the output of 
 multiple runs.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_html_dynamic_sections
<dt>\c HTML_DYNAMIC_SECTIONS <dd>
 \addindex HTML_DYNAMIC_SECTIONS
 If the \c HTML_DYNAMIC_SECTIONS tag is set to \c YES then the generated HTML
 documentation will contain sections that can be hidden and shown after the
 page has loaded.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_html_index_num_entries
<dt>\c HTML_INDEX_NUM_ENTRIES <dd>
 \addindex HTML_INDEX_NUM_ENTRIES
 With \c HTML_INDEX_NUM_ENTRIES one can control the preferred number of 
 entries shown in the various tree structured indices initially; the user 
 can expand and collapse entries dynamically later on. Doxygen will expand 
 the tree to such a level that at most the specified number of entries are 
 visible (unless a fully collapsed tree already exceeds this amount). 
 So setting the number of entries 1 will produce a full collapsed tree by 
 default. 0 is a special value representing an infinite number of entries 
 and will result in a full expanded tree by default.


 Minimum value: <code>0</code>, maximum value: <code>9999</code>, default value: <code>100</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_generate_docset
<dt>\c GENERATE_DOCSET <dd>
 \addindex GENERATE_DOCSET
 If the \c GENERATE_DOCSET tag is set to \c YES, additional index files
 will be generated that can be used as input for 
 <a href="http://developer.apple.com/tools/xcode/">Apple's Xcode 3
 integrated development environment</a>, introduced with OSX 10.5 (Leopard).
 To create a documentation set, doxygen will generate a Makefile in the
 HTML output directory. Running \c make will produce the docset in that
 directory and running <code>make install</code> will install the docset in 
 <code>~/Library/Developer/Shared/Documentation/DocSets</code> 
 so that Xcode will find it at startup. See
 http://developer.apple.com/tools/creatingdocsetswithdoxygen.html for
 more information.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_docset_feedname
<dt>\c DOCSET_FEEDNAME <dd>
 \addindex DOCSET_FEEDNAME
 This tag determines the name of the docset
 feed. A documentation feed provides an umbrella under which multiple
 documentation sets from a single provider (such as a company or product suite) 
 can be grouped.

The default value is: <code>Doxygen generated docs</code>.


This tag requires that the tag \ref cfg_generate_docset "GENERATE_DOCSET" is set to \c YES.
 \anchor cfg_docset_bundle_id
<dt>\c DOCSET_BUNDLE_ID <dd>
 \addindex DOCSET_BUNDLE_ID
 This tag specifies a string that
 should uniquely identify the documentation set bundle. This should be a
 reverse domain-name style string, e.g. <code>com.mycompany.MyDocSet</code>. 
 Doxygen will append <code>.docset</code> to the name.

The default value is: <code>org.doxygen.Project</code>.


This tag requires that the tag \ref cfg_generate_docset "GENERATE_DOCSET" is set to \c YES.
 \anchor cfg_docset_publisher_id
<dt>\c DOCSET_PUBLISHER_ID <dd>
 \addindex DOCSET_PUBLISHER_ID
The \c DOCSET_PUBLISHER_ID
tag specifies a string that should uniquely identify 
the documentation publisher. This should be a reverse domain-name style 
string, e.g. <code>com.mycompany.MyDocSet.documentation</code>.

The default value is: <code>org.doxygen.Publisher</code>.


This tag requires that the tag \ref cfg_generate_docset "GENERATE_DOCSET" is set to \c YES.
 \anchor cfg_docset_publisher_name
<dt>\c DOCSET_PUBLISHER_NAME <dd>
 \addindex DOCSET_PUBLISHER_NAME
The \c DOCSET_PUBLISHER_NAME tag identifies the documentation publisher.

The default value is: <code>Publisher</code>.


This tag requires that the tag \ref cfg_generate_docset "GENERATE_DOCSET" is set to \c YES.
 \anchor cfg_generate_htmlhelp
<dt>\c GENERATE_HTMLHELP <dd>
 \addindex GENERATE_HTMLHELP
 If the \c GENERATE_HTMLHELP tag is set to \c YES then
 doxygen generates three additional HTML index files: 
 \c index.hhp, \c index.hhc, and \c index.hhk. The \c index.hhp is a 
 project file that can be read by 
 <a href="http://www.microsoft.com/en-us/download/details.aspx?id=21138">
 Microsoft's HTML Help Workshop</a>
 on Windows.
<br>
 The HTML Help Workshop contains a compiler that can convert all HTML output 
 generated by doxygen into a single compiled HTML file (`.chm`). Compiled
 HTML files are now used as the Windows 98 help format, and will replace
 the old Windows help format (`.hlp`) on all Windows platforms in the future.
 Compressed HTML files also contain an index, a table of contents,
 and you can search for words in the documentation.
 The HTML workshop also contains a viewer for compressed HTML files.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_chm_file
<dt>\c CHM_FILE <dd>
 \addindex CHM_FILE
  The \c CHM_FILE tag can
  be used to specify the file name of the resulting `.chm` file. You
  can add a path in front of the file if the result should not be
  written to the html output directory.


This tag requires that the tag \ref cfg_generate_htmlhelp "GENERATE_HTMLHELP" is set to \c YES.
 \anchor cfg_hhc_location
<dt>\c HHC_LOCATION <dd>
 \addindex HHC_LOCATION
  The \c HHC_LOCATION tag can
  be used to specify the location (absolute path including file name) of 
  the HTML help compiler (\c hhc.exe). If non-empty doxygen will try to run
  the HTML help compiler on the generated \c index.hhp.

The file has to be specified with full path.


This tag requires that the tag \ref cfg_generate_htmlhelp "GENERATE_HTMLHELP" is set to \c YES.
 \anchor cfg_generate_chi
<dt>\c GENERATE_CHI <dd>
 \addindex GENERATE_CHI
 The \c GENERATE_CHI flag
 controls if a separate `.chi` index file is generated (\c YES) or that
 it should be included in the master `.chm` file (\c NO).


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_htmlhelp "GENERATE_HTMLHELP" is set to \c YES.
 \anchor cfg_chm_index_encoding
<dt>\c CHM_INDEX_ENCODING <dd>
 \addindex CHM_INDEX_ENCODING
 The \c CHM_INDEX_ENCODING 
 is used to encode HtmlHelp index (\c hhk), content (\c hhc) and project file 
 content.


This tag requires that the tag \ref cfg_generate_htmlhelp "GENERATE_HTMLHELP" is set to \c YES.
 \anchor cfg_binary_toc
<dt>\c BINARY_TOC <dd>
 \addindex BINARY_TOC
 The \c BINARY_TOC flag
 controls whether a binary table of contents is generated (\c YES) or a
 normal table of contents (\c NO) in the `.chm` file.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_htmlhelp "GENERATE_HTMLHELP" is set to \c YES.
 \anchor cfg_toc_expand
<dt>\c TOC_EXPAND <dd>
 \addindex TOC_EXPAND
 The \c TOC_EXPAND flag can be set to \c YES to add extra items for 
 group members to the table of contents of the HTML help documentation 
 and to the tree view.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_htmlhelp "GENERATE_HTMLHELP" is set to \c YES.
 \anchor cfg_generate_qhp
<dt>\c GENERATE_QHP <dd>
 \addindex GENERATE_QHP
 If the \c GENERATE_QHP tag is set to \c YES and both \ref cfg_qhp_namespace "QHP_NAMESPACE"
 and \ref cfg_qhp_virtual_folder "QHP_VIRTUAL_FOLDER" are set, an additional index file will
 be generated that can be used as input for Qt's qhelpgenerator
 to generate a Qt Compressed Help (`.qch`) of the generated HTML
 documentation.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_qch_file
<dt>\c QCH_FILE <dd>
 \addindex QCH_FILE
 If the \ref cfg_qhg_location "QHG_LOCATION" tag is specified, the \c QCH_FILE tag can
 be used to specify the file name of the resulting `.qch` file.
 The path specified is relative to the HTML output folder.


This tag requires that the tag \ref cfg_generate_qhp "GENERATE_QHP" is set to \c YES.
 \anchor cfg_qhp_namespace
<dt>\c QHP_NAMESPACE <dd>
 \addindex QHP_NAMESPACE
 The \c QHP_NAMESPACE tag specifies the namespace to use when generating
 Qt Help Project output. For more information please see
 <a href="http://qt-project.org/doc/qt-4.8/qthelpproject.html#namespace">Qt Help Project / Namespace</a>.

The default value is: <code>org.doxygen.Project</code>.


This tag requires that the tag \ref cfg_generate_qhp "GENERATE_QHP" is set to \c YES.
 \anchor cfg_qhp_virtual_folder
<dt>\c QHP_VIRTUAL_FOLDER <dd>
 \addindex QHP_VIRTUAL_FOLDER
 The \c QHP_VIRTUAL_FOLDER tag specifies the namespace to use when
 generating Qt Help Project output. For more information please see
 <a href="http://qt-project.org/doc/qt-4.8/qthelpproject.html#virtual-folders">Qt Help Project / Virtual Folders</a>.

The default value is: <code>doc</code>.


This tag requires that the tag \ref cfg_generate_qhp "GENERATE_QHP" is set to \c YES.
 \anchor cfg_qhp_cust_filter_name
<dt>\c QHP_CUST_FILTER_NAME <dd>
 \addindex QHP_CUST_FILTER_NAME
  If the \c QHP_CUST_FILTER_NAME tag is set, it specifies the name of a custom filter to add. For more information please see
  <a href="http://qt-project.org/doc/qt-4.8/qthelpproject.html#custom-filters">Qt Help Project / Custom Filters</a>.


This tag requires that the tag \ref cfg_generate_qhp "GENERATE_QHP" is set to \c YES.
 \anchor cfg_qhp_cust_filter_attrs
<dt>\c QHP_CUST_FILTER_ATTRS <dd>
 \addindex QHP_CUST_FILTER_ATTRS
  The \c QHP_CUST_FILTER_ATTRS tag specifies the list of the attributes of the custom filter to add.
  For more information please see
  <a href="http://qt-project.org/doc/qt-4.8/qthelpproject.html#custom-filters">Qt Help Project / Custom Filters</a>.


This tag requires that the tag \ref cfg_generate_qhp "GENERATE_QHP" is set to \c YES.
 \anchor cfg_qhp_sect_filter_attrs
<dt>\c QHP_SECT_FILTER_ATTRS <dd>
 \addindex QHP_SECT_FILTER_ATTRS
  The \c QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this project's filter section matches.
  <a href="http://qt-project.org/doc/qt-4.8/qthelpproject.html#filter-attributes">Qt Help Project / Filter Attributes</a>.


This tag requires that the tag \ref cfg_generate_qhp "GENERATE_QHP" is set to \c YES.
 \anchor cfg_qhg_location
<dt>\c QHG_LOCATION <dd>
 \addindex QHG_LOCATION
 The \c QHG_LOCATION tag can be used to specify the location of Qt's qhelpgenerator.
 If non-empty doxygen will try to run qhelpgenerator on the generated `.qhp` file.


This tag requires that the tag \ref cfg_generate_qhp "GENERATE_QHP" is set to \c YES.
 \anchor cfg_generate_eclipsehelp
<dt>\c GENERATE_ECLIPSEHELP <dd>
 \addindex GENERATE_ECLIPSEHELP
 If the \c GENERATE_ECLIPSEHELP tag is set to \c YES, additional index files  
 will be generated, together with the HTML files, they form an `Eclipse` help 
 plugin. 

 To install this plugin and make it available under the help contents 
 menu in `Eclipse`, the contents of the directory containing the HTML and XML 
 files needs to be copied into the plugins directory of eclipse. The name of 
 the directory within the plugins directory should be the same as 
 the \ref cfg_eclipse_doc_id "ECLIPSE_DOC_ID" value. 

 After copying `Eclipse` needs to be restarted before the help appears.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_eclipse_doc_id
<dt>\c ECLIPSE_DOC_ID <dd>
 \addindex ECLIPSE_DOC_ID
 A unique identifier for the `Eclipse` help plugin. When installing the plugin 
 the directory name containing the HTML and XML files should also have 
 this name. Each documentation set should have its own identifier.

The default value is: <code>org.doxygen.Project</code>.


This tag requires that the tag \ref cfg_generate_eclipsehelp "GENERATE_ECLIPSEHELP" is set to \c YES.
 \anchor cfg_disable_index
<dt>\c DISABLE_INDEX <dd>
 \addindex DISABLE_INDEX
 If you want full control over the layout of the generated HTML pages it
 might be necessary to disable the index and replace it with your own.
 The \c DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) at
 top of each HTML page. A value of \c NO enables the index and the
 value \c YES disables it. Since the tabs in the index contain the same 
 information as the navigation tree, you can set this option to \c YES if 
 you also set \ref cfg_generate_treeview "GENERATE_TREEVIEW" to \c YES.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_generate_treeview
<dt>\c GENERATE_TREEVIEW <dd>
 \addindex GENERATE_TREEVIEW
 The \c GENERATE_TREEVIEW tag is used to specify whether a tree-like index
 structure should be generated to display hierarchical information.
 If the tag value is set to \c YES, a side panel will be generated
 containing a tree-like index structure (just like the one that
 is generated for HTML Help). For this to work a browser that supports
 JavaScript, DHTML, CSS and frames is required (i.e. any modern browser).
 Windows users are probably better off using the HTML help feature.

 Via custom stylesheets (see \ref cfg_html_extra_stylesheet "HTML_EXTRA_STYLESHEET")
 one can further \ref doxygen_finetune "fine-tune" the look of the index.
 As an example, the default style sheet generated by doxygen has an
 example that shows how to put an image at the root of the tree instead of
 the \ref cfg_project_name "PROJECT_NAME".

 Since the tree basically has the same information as the tab index, you could
 consider setting \ref cfg_disable_index "DISABLE_INDEX" to \c YES when 
 enabling this option.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_enum_values_per_line
<dt>\c ENUM_VALUES_PER_LINE <dd>
 \addindex ENUM_VALUES_PER_LINE
 The \c ENUM_VALUES_PER_LINE tag can be used to set the number of enum values
 that doxygen will group on one line in the generated HTML documentation. 
 <br>Note that a value of 0 will completely suppress the enum values from
 appearing in the overview section.


 Minimum value: <code>0</code>, maximum value: <code>20</code>, default value: <code>4</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_treeview_width
<dt>\c TREEVIEW_WIDTH <dd>
 \addindex TREEVIEW_WIDTH
 If the treeview is enabled (see \ref cfg_generate_treeview "GENERATE_TREEVIEW") then this tag can be
 used to set the initial width (in pixels) of the frame in which the tree
 is shown.


 Minimum value: <code>0</code>, maximum value: <code>1500</code>, default value: <code>250</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_ext_links_in_window
<dt>\c EXT_LINKS_IN_WINDOW <dd>
 \addindex EXT_LINKS_IN_WINDOW
 When the \c EXT_LINKS_IN_WINDOW option is set to \c YES doxygen will open 
 links to external symbols imported via tag files in a separate window.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_formula_fontsize
<dt>\c FORMULA_FONTSIZE <dd>
 \addindex FORMULA_FONTSIZE
 Use this tag to change the font size of \f$\mbox{\LaTeX}\f$ formulas included
 as images in the HTML documentation.
 When you change the font size after a successful doxygen run you need
 to manually remove any `form_*.png` images from the HTML 
 output directory to force them to be regenerated.


 Minimum value: <code>8</code>, maximum value: <code>50</code>, default value: <code>10</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_formula_transparent
<dt>\c FORMULA_TRANSPARENT <dd>
 \addindex FORMULA_TRANSPARENT
 Use the \c FORMULA_TRANPARENT tag to determine whether or not the images 
 generated for formulas are transparent PNGs. Transparent PNGs are 
 not supported properly for IE 6.0, but are supported on all modern browsers. 
 <br>Note that when changing this option you need to delete any `form_*.png` files 
 in the HTML output directory before the changes have effect.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_use_mathjax
<dt>\c USE_MATHJAX <dd>
 \addindex USE_MATHJAX
 Enable the \c USE_MATHJAX option to render \f$\mbox{\LaTeX}\f$ formulas using MathJax 
 (see http://www.mathjax.org) which uses client side Javascript for the 
 rendering instead of using prerendered bitmaps. Use this if you do not 
 have \f$\mbox{\LaTeX}\f$ installed or if you want to formulas look prettier in the HTML 
 output. When enabled you may also need to install MathJax separately and 
 configure the path to it using the \ref cfg_mathjax_relpath "MATHJAX_RELPATH" 
 option.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_mathjax_format
<dt>\c MATHJAX_FORMAT <dd>
 \addindex MATHJAX_FORMAT
 When MathJax is enabled you can set the default output format to be used for 
 the MathJax output.
 See <a href="http://docs.mathjax.org/en/latest/output.html">the MathJax site</a>
 for more details.

Possible values are: 
<code>HTML-CSS</code> (which is slower, but has the best compatibility), 
<code>NativeMML</code> (i.e. MathML) and 
<code>SVG</code>.


The default value is: <code>HTML-CSS</code>.


This tag requires that the tag \ref cfg_use_mathjax "USE_MATHJAX" is set to \c YES.
 \anchor cfg_mathjax_relpath
<dt>\c MATHJAX_RELPATH <dd>
 \addindex MATHJAX_RELPATH
 When MathJax is enabled you need to specify the location relative to the 
 HTML output directory using the \c MATHJAX_RELPATH option. The destination 
 directory should contain the `MathJax.js` script. For instance, if the \c mathjax 
 directory is located at the same level as the HTML output directory, then 
 \c MATHJAX_RELPATH should be <code>../mathjax</code>. The default value points to 
 the MathJax Content Delivery Network so you can quickly see the result without 
 installing MathJax.  However, it is strongly recommended to install a local 
 copy of MathJax from http://www.mathjax.org before deployment.

The default value is: <code>http://cdn.mathjax.org/mathjax/latest</code>.


This tag requires that the tag \ref cfg_use_mathjax "USE_MATHJAX" is set to \c YES.
 \anchor cfg_mathjax_extensions
<dt>\c MATHJAX_EXTENSIONS <dd>
 \addindex MATHJAX_EXTENSIONS
 The \c MATHJAX_EXTENSIONS tag can be used to specify one or more MathJax extension 
 names that should be enabled during MathJax rendering. For example
\verbatim
MATHJAX_EXTENSIONS     = TeX/AMSmath TeX/AMSsymbols
\endverbatim


This tag requires that the tag \ref cfg_use_mathjax "USE_MATHJAX" is set to \c YES.
 \anchor cfg_mathjax_codefile
<dt>\c MATHJAX_CODEFILE <dd>
 \addindex MATHJAX_CODEFILE
 The \c MATHJAX_CODEFILE tag can be used to specify a file with javascript 
 pieces of code that will be used on startup of the MathJax code. 
 See 
<a href="http://docs.mathjax.org/en/latest/output.html">the MathJax site</a>
 for more details. As an example to disable the "Math Renderer" menu item in the "Math
 Settings" menu of MathJax:
\verbatim
MATHJAX_CODEFILE = disableRenderer.js
\endverbatim
  with in the file <code>disableRenderer.js</code>:
\verbatim
  MathJax.Hub.Config({
   menuSettings: {
    showRenderer: false,
   } 
  });
\endverbatim


This tag requires that the tag \ref cfg_use_mathjax "USE_MATHJAX" is set to \c YES.
 \anchor cfg_searchengine
<dt>\c SEARCHENGINE <dd>
 \addindex SEARCHENGINE
 When the \c SEARCHENGINE tag is enabled doxygen will generate a search box
 for the HTML output. The underlying search engine uses javascript 
 and DHTML and should work on any modern browser. Note that when using
 HTML help (\ref cfg_generate_htmlhelp "GENERATE_HTMLHELP"), 
 Qt help (\ref cfg_generate_qhp "GENERATE_QHP"), or docsets
 (\ref cfg_generate_docset "GENERATE_DOCSET") there is already a search 
 function so this one should typically be disabled. For large projects 
 the javascript based search engine can be slow, then enabling 
 \ref cfg_server_based_search "SERVER_BASED_SEARCH" may provide a 
 better solution. 

 It is possible to search using the keyboard;
 to jump to the search box use <code>\<access key\> + S</code> (what the <code>\<access key\></code> is
 depends on the OS and browser, but it is typically <code>\<CTRL\></code>, <code>\<ALT\></code>/<code>\<option\></code>, or both).
 Inside the search box use the <code>\<cursor down key\></code> to jump into the search 
 results window, the results can be navigated using the <code>\<cursor keys\></code>.
 Press <code>\<Enter\></code> to select an item or <code>\<escape\></code> to cancel the search. The
 filter options can be selected when the cursor is inside the search box
 by pressing <code>\<Shift\>+\<cursor down\></code>. Also here use the <code>\<cursor keys\></code> to 
 select a filter and <code>\<Enter\></code> or <code>\<escape\></code> to activate or cancel the filter option.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_generate_html "GENERATE_HTML" is set to \c YES.
 \anchor cfg_server_based_search
<dt>\c SERVER_BASED_SEARCH <dd>
 \addindex SERVER_BASED_SEARCH
When the \c SERVER_BASED_SEARCH tag is enabled the search engine will be 
implemented using a web server instead of a web client using Javascript. 

There are two flavours of web server based searching depending on the 
\ref cfg_external_search "EXTERNAL_SEARCH" setting. When disabled, 
doxygen will generate a PHP script for searching and an index file used 
by the script. When \ref cfg_external_search "EXTERNAL_SEARCH" is 
enabled the indexing and searching needs to be provided by external tools. 
See the section \ref extsearch for details.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_searchengine "SEARCHENGINE" is set to \c YES.
 \anchor cfg_external_search
<dt>\c EXTERNAL_SEARCH <dd>
 \addindex EXTERNAL_SEARCH
 When \c EXTERNAL_SEARCH tag is enabled doxygen will no longer generate the PHP 
 script for searching. Instead the search results are written to an XML file 
 which needs to be processed by an external indexer. Doxygen will invoke an 
 external search engine pointed to by the 
 \ref cfg_searchengine_url "SEARCHENGINE_URL" option to obtain 
 the search results.
 <br>Doxygen ships with an example indexer (\c doxyindexer) and 
 search engine (<code>doxysearch.cgi</code>) which are based on the open source search 
 engine library <a href="http://xapian.org/">Xapian</a>.
 <br>See the section \ref extsearch for details.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_searchengine "SEARCHENGINE" is set to \c YES.
 \anchor cfg_searchengine_url
<dt>\c SEARCHENGINE_URL <dd>
 \addindex SEARCHENGINE_URL
 The \c SEARCHENGINE_URL should point to a search engine hosted by a web server 
 which will return the search results when \ref cfg_external_search "EXTERNAL_SEARCH" 
 is enabled.
 <br>Doxygen ships with an example indexer (\c doxyindexer) and 
 search engine (<code>doxysearch.cgi</code>) which are based on the open source search 
 engine library <a href="http://xapian.org/">Xapian</a>.
 See the section \ref extsearch for details.


This tag requires that the tag \ref cfg_searchengine "SEARCHENGINE" is set to \c YES.
 \anchor cfg_searchdata_file
<dt>\c SEARCHDATA_FILE <dd>
 \addindex SEARCHDATA_FILE
When \ref cfg_server_based_search "SERVER_BASED_SEARCH" and 
\ref cfg_external_search "EXTERNAL_SEARCH" are both enabled the unindexed 
search data is written to a file for indexing by an external tool. With the 
\c SEARCHDATA_FILE tag the name of this file can be specified.

The default file is: <code>searchdata.xml</code>.


This tag requires that the tag \ref cfg_searchengine "SEARCHENGINE" is set to \c YES.
 \anchor cfg_external_search_id
<dt>\c EXTERNAL_SEARCH_ID <dd>
 \addindex EXTERNAL_SEARCH_ID
When \ref cfg_server_based_search "SERVER_BASED_SEARCH" and 
\ref cfg_external_search "EXTERNAL_SEARCH" are both enabled the 
\c EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is 
useful in combination with \ref cfg_extra_search_mappings "EXTRA_SEARCH_MAPPINGS" 
to search through multiple projects and redirect the results back to the right project.


This tag requires that the tag \ref cfg_searchengine "SEARCHENGINE" is set to \c YES.
 \anchor cfg_extra_search_mappings
<dt>\c EXTRA_SEARCH_MAPPINGS <dd>
 \addindex EXTRA_SEARCH_MAPPINGS
 The \c EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen 
 projects other than the one defined by this configuration file, but that are 
 all added to the same external search index. Each project needs to have a 
 unique id set via \ref cfg_external_search_id "EXTERNAL_SEARCH_ID". 
 The search mapping then maps the id of to a relative location where the 
 documentation can be found. 

 The format is: 
\verbatim
EXTRA_SEARCH_MAPPINGS = tagname1=loc1 tagname2=loc2 ... 
\endverbatim


This tag requires that the tag \ref cfg_searchengine "SEARCHENGINE" is set to \c YES.
</dl>
\section config_latex Configuration options related to the LaTeX output
 \anchor cfg_generate_latex
<dl>

<dt>\c GENERATE_LATEX <dd>
 \addindex GENERATE_LATEX
 If the \c GENERATE_LATEX tag is set to \c YES doxygen will
 generate \f$\mbox{\LaTeX}\f$ output.


The default value is: <code>YES</code>.

 \anchor cfg_latex_output
<dt>\c LATEX_OUTPUT <dd>
 \addindex LATEX_OUTPUT
 The \c LATEX_OUTPUT tag is used to specify where the \f$\mbox{\LaTeX}\f$ 
 docs will be put.
 If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be
 put in front of it.

The default directory is: <code>latex</code>.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_latex_cmd_name
<dt>\c LATEX_CMD_NAME <dd>
 \addindex LATEX_CMD_NAME
 The \c LATEX_CMD_NAME tag can be used to specify the \f$\mbox{\LaTeX}\f$ command name to be invoked. 
 <br>Note that when enabling \ref cfg_use_pdflatex "USE_PDFLATEX" this option is only used for
 generating bitmaps for formulas in the HTML output, but not in the
 \c Makefile that is written to the output directory.

The default file is: <code>latex</code>.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_makeindex_cmd_name
<dt>\c MAKEINDEX_CMD_NAME <dd>
 \addindex MAKEINDEX_CMD_NAME
 The \c MAKEINDEX_CMD_NAME tag can be used to specify the command name to 
 generate index for \f$\mbox{\LaTeX}\f$.

The default file is: <code>makeindex</code>.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_compact_latex
<dt>\c COMPACT_LATEX <dd>
 \addindex COMPACT_LATEX
 If the \c COMPACT_LATEX tag is set to \c YES doxygen generates more compact
 \f$\mbox{\LaTeX}\f$ documents. This may be useful for small projects and may help to
 save some trees in general.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_paper_type
<dt>\c PAPER_TYPE <dd>
 \addindex PAPER_TYPE
 The \c PAPER_TYPE tag can be used to set the paper type that is used
 by the printer.

Possible values are: 
<code>a4</code> (210 x 297 mm), 
<code>letter</code> (8.5 x 11 inches), 
<code>legal</code> (8.5 x 14 inches) and 
<code>executive</code> (7.25 x 10.5 inches).


The default value is: <code>a4</code>.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_extra_packages
<dt>\c EXTRA_PACKAGES <dd>
 \addindex EXTRA_PACKAGES
 The \c EXTRA_PACKAGES tag can be used to specify one or more \f$\mbox{\LaTeX}\f$ 
 package names that should be included in the \f$\mbox{\LaTeX}\f$ output.
 To get the times font for instance you can specify 
\verbatim
EXTRA_PACKAGES=times
\endverbatim
 If left blank no extra packages will be included.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_latex_header
<dt>\c LATEX_HEADER <dd>
 \addindex LATEX_HEADER
 The \c LATEX_HEADER tag can be used to specify a personal \f$\mbox{\LaTeX}\f$ 
 header for the generated \f$\mbox{\LaTeX}\f$ document. 
 The header should contain everything until the first chapter. 

 If it is left blank doxygen will generate a 
 standard header. See section \ref doxygen_usage for information on how to 
 let doxygen write the default header to a separate file.
 
 <br>Note: Only use a user-defined header if you know what you are doing!

 The following commands have a special meaning inside the header:
 <code>\$title</code>, <code>\$datetime</code>, <code>\$date</code>,
 <code>\$doxygenversion</code>, <code>\$projectname</code>, 
 <code>\$projectnumber</code>. 
 Doxygen will replace them by respectively 
 the title of the page, the current date and time, only the current date,
 the version number of doxygen, the project name (see \ref cfg_project_name "PROJECT_NAME"), or the
 project number (see \ref cfg_project_number "PROJECT_NUMBER").


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_latex_footer
<dt>\c LATEX_FOOTER <dd>
 \addindex LATEX_FOOTER
 The \c LATEX_FOOTER tag can be used to specify a personal \f$\mbox{\LaTeX}\f$ footer for 
 the generated \f$\mbox{\LaTeX}\f$ document. The footer should contain everything after 
 the last chapter. If it is left blank doxygen will generate a 
 standard footer.
 
 <br>Note: Only use a user-defined footer if you know what you are doing!


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_latex_extra_files
<dt>\c LATEX_EXTRA_FILES <dd>
 \addindex LATEX_EXTRA_FILES
 The \c LATEX_EXTRA_FILES tag can be used to specify one or more extra images
 or other source files which should be copied to the \ref cfg_latex_output "LATEX_OUTPUT"
 output directory.
 Note that the files will be copied as-is; there are no commands or markers
 available.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_pdf_hyperlinks
<dt>\c PDF_HYPERLINKS <dd>
 \addindex PDF_HYPERLINKS
 If the \c PDF_HYPERLINKS tag is set to \c YES, the \f$\mbox{\LaTeX}\f$ that 
 is generated is prepared for conversion to PDF (using \c ps2pdf or \c pdflatex). 
 The PDF file will
 contain links (just like the HTML output) instead of page references.
 This makes the output suitable for online browsing using a PDF viewer.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_use_pdflatex
<dt>\c USE_PDFLATEX <dd>
 \addindex USE_PDFLATEX
 If the \c LATEX_PDFLATEX tag is set to \c YES, doxygen will use
 \c pdflatex to generate the PDF file directly from the \f$\mbox{\LaTeX}\f$
 files.  Set this option to \c YES to get a higher quality PDF documentation.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_latex_batchmode
<dt>\c LATEX_BATCHMODE <dd>
 \addindex LATEX_BATCHMODE
 If the \c LATEX_BATCHMODE tag is set to \c YES, doxygen will add the \c \\batchmode
 command to the generated \f$\mbox{\LaTeX}\f$ files. This will 
 instruct \f$\mbox{\LaTeX}\f$ to keep running if errors occur, instead of 
 asking the user for help. This option is also used when generating formulas 
 in HTML.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_latex_hide_indices
<dt>\c LATEX_HIDE_INDICES <dd>
 \addindex LATEX_HIDE_INDICES
 If the \c LATEX_HIDE_INDICES tag is set to \c YES then doxygen will not
 include the index chapters (such as File Index, Compound Index, etc.) 
 in the output.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_latex_source_code
<dt>\c LATEX_SOURCE_CODE <dd>
 \addindex LATEX_SOURCE_CODE
 If the \c LATEX_SOURCE_CODE tag is set to \c YES then doxygen will include 
 source code with syntax highlighting in the \f$\mbox{\LaTeX}\f$ output. 
 <br>Note that which sources are shown also depends on other settings 
 such as \ref cfg_source_browser "SOURCE_BROWSER".


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
 \anchor cfg_latex_bib_style
<dt>\c LATEX_BIB_STYLE <dd>
 \addindex LATEX_BIB_STYLE
 The \c LATEX_BIB_STYLE tag can be used to specify the style to use for the 
 bibliography, e.g. \c plainnat, or \c ieeetr. 
 See http://en.wikipedia.org/wiki/BibTeX and \ref cmdcite "\\cite"
 for more info.

The default value is: <code>plain</code>.


This tag requires that the tag \ref cfg_generate_latex "GENERATE_LATEX" is set to \c YES.
</dl>
\section config_rtf Configuration options related to the RTF output
 \anchor cfg_generate_rtf
<dl>

<dt>\c GENERATE_RTF <dd>
 \addindex GENERATE_RTF
 If the \c GENERATE_RTF tag is set to \c YES doxygen will generate RTF output.
 The RTF output is optimized for Word 97 and may not look too pretty with
 other RTF readers/editors.


The default value is: <code>NO</code>.

 \anchor cfg_rtf_output
<dt>\c RTF_OUTPUT <dd>
 \addindex RTF_OUTPUT
 The \c RTF_OUTPUT tag is used to specify where the RTF docs will be put.
 If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be
 put in front of it.

The default directory is: <code>rtf</code>.


This tag requires that the tag \ref cfg_generate_rtf "GENERATE_RTF" is set to \c YES.
 \anchor cfg_compact_rtf
<dt>\c COMPACT_RTF <dd>
 \addindex COMPACT_RTF
 If the \c COMPACT_RTF tag is set to \c YES doxygen generates more compact
 RTF documents. This may be useful for small projects and may help to
 save some trees in general.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_rtf "GENERATE_RTF" is set to \c YES.
 \anchor cfg_rtf_hyperlinks
<dt>\c RTF_HYPERLINKS <dd>
 \addindex RTF_HYPERLINKS
 If the \c RTF_HYPERLINKS tag is set to \c YES, the RTF that is generated
 will contain hyperlink fields. The RTF file will
 contain links (just like the HTML output) instead of page references.
 This makes the output suitable for online browsing using Word or some other
 Word compatible readers that support those fields.

 <br>Note: WordPad (write) and others do not support links.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_rtf "GENERATE_RTF" is set to \c YES.
 \anchor cfg_rtf_stylesheet_file
<dt>\c RTF_STYLESHEET_FILE <dd>
 \addindex RTF_STYLESHEET_FILE
 Load stylesheet definitions from file. Syntax is similar to doxygen's
 config file, i.e. a series of assignments. You only have to provide
 replacements, missing definitions are set to their default value.
<br>
 See also section \ref doxygen_usage for information on how to generate
 the default style sheet that doxygen normally uses.


This tag requires that the tag \ref cfg_generate_rtf "GENERATE_RTF" is set to \c YES.
 \anchor cfg_rtf_extensions_file
<dt>\c RTF_EXTENSIONS_FILE <dd>
 \addindex RTF_EXTENSIONS_FILE
 Set optional variables used in the generation of an RTF document.
 Syntax is similar to doxygen's config file. 
 A template extensions file can be generated using 
 <code>doxygen -e rtf extensionFile</code>.


This tag requires that the tag \ref cfg_generate_rtf "GENERATE_RTF" is set to \c YES.
</dl>
\section config_man Configuration options related to the man page output
 \anchor cfg_generate_man
<dl>

<dt>\c GENERATE_MAN <dd>
 \addindex GENERATE_MAN
 If the \c GENERATE_MAN tag is set to \c YES doxygen will
 generate man pages for classes and files.


The default value is: <code>NO</code>.

 \anchor cfg_man_output
<dt>\c MAN_OUTPUT <dd>
 \addindex MAN_OUTPUT
 The \c MAN_OUTPUT tag is used to specify where the man pages will be put.
 If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be
 put in front of it. 
 A directory \c man3 will be created inside the directory specified by 
 \c MAN_OUTPUT.

The default directory is: <code>man</code>.


This tag requires that the tag \ref cfg_generate_man "GENERATE_MAN" is set to \c YES.
 \anchor cfg_man_extension
<dt>\c MAN_EXTENSION <dd>
 \addindex MAN_EXTENSION
 The \c MAN_EXTENSION tag determines the extension that is added to
 the generated man pages. In case
 the manual section does not start with a number, the number 3 is prepended.
 The dot (.) at the beginning of the \c MAN_EXTENSION tag is optional.

The default value is: <code>.3</code>.


This tag requires that the tag \ref cfg_generate_man "GENERATE_MAN" is set to \c YES.
 \anchor cfg_man_links
<dt>\c MAN_LINKS <dd>
 \addindex MAN_LINKS
 If the \c MAN_LINKS tag is set to \c YES and doxygen generates man output, 
 then it will generate one additional man file for each entity documented in 
 the real man page(s). These additional files only source the real man page, 
 but without them the \c man command would be unable to find the correct page.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_man "GENERATE_MAN" is set to \c YES.
</dl>
\section config_xml Configuration options related to the XML output
 \anchor cfg_generate_xml
<dl>

<dt>\c GENERATE_XML <dd>
 \addindex GENERATE_XML
 If the \c GENERATE_XML tag is set to \c YES doxygen will
 generate an XML file that captures the structure of
 the code including all documentation.


The default value is: <code>NO</code>.

 \anchor cfg_xml_output
<dt>\c XML_OUTPUT <dd>
 \addindex XML_OUTPUT
 The \c XML_OUTPUT tag is used to specify where the XML pages will be put. 
 If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be 
 put in front of it.

The default directory is: <code>xml</code>.


This tag requires that the tag \ref cfg_generate_xml "GENERATE_XML" is set to \c YES.
 \anchor cfg_xml_schema
<dt>\c XML_SCHEMA <dd>
 \addindex XML_SCHEMA
 The \c XML_SCHEMA tag can be used to specify a XML schema,
 which can be used by a validating XML parser to check the
 syntax of the XML files.


This tag requires that the tag \ref cfg_generate_xml "GENERATE_XML" is set to \c YES.
 \anchor cfg_xml_dtd
<dt>\c XML_DTD <dd>
 \addindex XML_DTD
 The \c XML_DTD tag can be used to specify a XML DTD,
 which can be used by a validating XML parser to check the
 syntax of the XML files.


This tag requires that the tag \ref cfg_generate_xml "GENERATE_XML" is set to \c YES.
 \anchor cfg_xml_programlisting
<dt>\c XML_PROGRAMLISTING <dd>
 \addindex XML_PROGRAMLISTING
 If the \c XML_PROGRAMLISTING tag is set to \c YES doxygen will
 dump the program listings (including syntax highlighting
 and cross-referencing information) to the XML output. Note that
 enabling this will significantly increase the size of the XML output.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_generate_xml "GENERATE_XML" is set to \c YES.
</dl>
\section config_docbook Configuration options related to the DOCBOOK output
 \anchor cfg_generate_docbook
<dl>

<dt>\c GENERATE_DOCBOOK <dd>
 \addindex GENERATE_DOCBOOK
If the \c GENERATE_DOCBOOK tag is set to \c YES doxygen will generate Docbook files 
that can be used to generate PDF.


The default value is: <code>NO</code>.

 \anchor cfg_docbook_output
<dt>\c DOCBOOK_OUTPUT <dd>
 \addindex DOCBOOK_OUTPUT
The \c DOCBOOK_OUTPUT tag is used to specify where the Docbook pages will be put. 
If a relative path is entered the value of \ref cfg_output_directory "OUTPUT_DIRECTORY" will be put in 
front of it.

The default directory is: <code>docbook</code>.


This tag requires that the tag \ref cfg_generate_docbook "GENERATE_DOCBOOK" is set to \c YES.
</dl>
\section config_autogen Configuration options for the AutoGen Definitions output
 \anchor cfg_generate_autogen_def
<dl>

<dt>\c GENERATE_AUTOGEN_DEF <dd>
 \addindex GENERATE_AUTOGEN_DEF
 If the \c GENERATE_AUTOGEN_DEF tag is set to \c YES doxygen will
 generate an AutoGen Definitions (see http://autogen.sf.net) file
 that captures the structure of the code including all
 documentation. Note that this feature is still experimental 
 and incomplete at the moment.


The default value is: <code>NO</code>.

</dl>
\section config_perlmod Configuration options related to the Perl module output
 \anchor cfg_generate_perlmod
<dl>

<dt>\c GENERATE_PERLMOD <dd>
 \addindex GENERATE_PERLMOD
 If the \c GENERATE_PERLMOD tag is set to \c YES doxygen will
 generate a Perl module file that captures the structure of
 the code including all documentation.
 <br>Note that this 
 feature is still experimental and incomplete at the
 moment.


The default value is: <code>NO</code>.

 \anchor cfg_perlmod_latex
<dt>\c PERLMOD_LATEX <dd>
 \addindex PERLMOD_LATEX
 If the \c PERLMOD_LATEX tag is set to \c YES doxygen will generate 
 the necessary \c Makefile rules, \c Perl scripts and \f$\mbox{\LaTeX}\f$ code to be able 
 to generate PDF and DVI output from the Perl module output.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_generate_perlmod "GENERATE_PERLMOD" is set to \c YES.
 \anchor cfg_perlmod_pretty
<dt>\c PERLMOD_PRETTY <dd>
 \addindex PERLMOD_PRETTY
 If the \c PERLMOD_PRETTY tag is set to \c YES the Perl module output will be 
 nicely formatted so it can be parsed by a human reader.  This is useful 
 if you want to understand what is going on. On the other hand, if this
 tag is set to \c NO the size of the Perl module output will be much smaller
 and Perl will parse it just the same.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_generate_perlmod "GENERATE_PERLMOD" is set to \c YES.
 \anchor cfg_perlmod_makevar_prefix
<dt>\c PERLMOD_MAKEVAR_PREFIX <dd>
 \addindex PERLMOD_MAKEVAR_PREFIX
 The names of the make variables in the generated `doxyrules.make` file 
 are prefixed with the string contained in \c PERLMOD_MAKEVAR_PREFIX. 
 This is useful so different `doxyrules.make` files included by the same
 `Makefile` don't overwrite each other's variables.


This tag requires that the tag \ref cfg_generate_perlmod "GENERATE_PERLMOD" is set to \c YES.
</dl>
\section config_preprocessor Configuration options related to the preprocessor
 \anchor cfg_enable_preprocessing
<dl>

<dt>\c ENABLE_PREPROCESSING <dd>
 \addindex ENABLE_PREPROCESSING
 If the \c ENABLE_PREPROCESSING tag is set to \c YES doxygen will
 evaluate all C-preprocessor directives found in the sources and include
 files.


The default value is: <code>YES</code>.

 \anchor cfg_macro_expansion
<dt>\c MACRO_EXPANSION <dd>
 \addindex MACRO_EXPANSION
 If the \c MACRO_EXPANSION tag is set to \c YES doxygen will expand all macro
 names in the source code. If set to \c NO only conditional 
 compilation will be performed. Macro expansion can be done in a controlled
 way by setting \ref cfg_expand_only_predef "EXPAND_ONLY_PREDEF" to \c YES.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_enable_preprocessing "ENABLE_PREPROCESSING" is set to \c YES.
 \anchor cfg_expand_only_predef
<dt>\c EXPAND_ONLY_PREDEF <dd>
 \addindex EXPAND_ONLY_PREDEF
 If the \c EXPAND_ONLY_PREDEF and \ref cfg_macro_expansion "MACRO_EXPANSION" tags are both set to \c YES
 then the macro expansion is limited to the macros specified with the
 \ref cfg_predefined "PREDEFINED" and \ref cfg_expand_as_defined "EXPAND_AS_DEFINED" tags.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_enable_preprocessing "ENABLE_PREPROCESSING" is set to \c YES.
 \anchor cfg_search_includes
<dt>\c SEARCH_INCLUDES <dd>
 \addindex SEARCH_INCLUDES
 If the \c SEARCH_INCLUDES tag is set to \c YES the includes files
 in the \ref cfg_include_path "INCLUDE_PATH" will be searched if a \c \#include is found.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_enable_preprocessing "ENABLE_PREPROCESSING" is set to \c YES.
 \anchor cfg_include_path
<dt>\c INCLUDE_PATH <dd>
 \addindex INCLUDE_PATH
 The \c INCLUDE_PATH tag can be used to specify one or more directories that
 contain include files that are not input files but should be processed by
 the preprocessor.


This tag requires that the tag \ref cfg_search_includes "SEARCH_INCLUDES" is set to \c YES.
 \anchor cfg_include_file_patterns
<dt>\c INCLUDE_FILE_PATTERNS <dd>
 \addindex INCLUDE_FILE_PATTERNS
 You can use the \c INCLUDE_FILE_PATTERNS tag to specify one or more wildcard 
 patterns (like `*.h` and `*.hpp`) to filter out the header-files in the 
 directories. If left blank, the patterns specified with \ref cfg_file_patterns "FILE_PATTERNS" will 
 be used.


This tag requires that the tag \ref cfg_enable_preprocessing "ENABLE_PREPROCESSING" is set to \c YES.
 \anchor cfg_predefined
<dt>\c PREDEFINED <dd>
 \addindex PREDEFINED
 The \c PREDEFINED tag can be used to specify one or more macro names that
 are defined before the preprocessor is started (similar to the `-D` option of
 e.g. \c gcc). The argument of the tag is a list of macros of the form:
 <code>name</code> or <code>name=definition</code> (no spaces). 
 If the definition and the \c "=" are omitted,  \c "=1" is assumed. To prevent
 a macro definition from being undefined via \c \#undef or recursively expanded
 use the <code>:=</code> operator instead of the \c = operator.


This tag requires that the tag \ref cfg_enable_preprocessing "ENABLE_PREPROCESSING" is set to \c YES.
 \anchor cfg_expand_as_defined
<dt>\c EXPAND_AS_DEFINED <dd>
 \addindex EXPAND_AS_DEFINED
 If the \ref cfg_macro_expansion "MACRO_EXPANSION" and
 \ref cfg_expand_only_predef "EXPAND_ONLY_PREDEF" tags are set to \c YES then
 this tag can be used to specify a list of macro names that should be expanded.
 The macro definition that is found in the sources will be used.
 Use the \ref cfg_predefined "PREDEFINED" tag if you want to use a different macro definition that
 overrules the definition found in the source code.


This tag requires that the tag \ref cfg_enable_preprocessing "ENABLE_PREPROCESSING" is set to \c YES.
 \anchor cfg_skip_function_macros
<dt>\c SKIP_FUNCTION_MACROS <dd>
 \addindex SKIP_FUNCTION_MACROS
 If the \c SKIP_FUNCTION_MACROS tag is set to \c YES then 
 doxygen's preprocessor will remove all refrences to function-like macros that are alone 
 on a line, have an all uppercase name, and do not end with a semicolon. 
 Such function macros are typically 
 used for boiler-plate code, and will confuse the parser if not removed.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_enable_preprocessing "ENABLE_PREPROCESSING" is set to \c YES.
</dl>
\section config_external Configuration options related to external references
 \anchor cfg_tagfiles
<dl>

<dt>\c TAGFILES <dd>
 \addindex TAGFILES
 The \c TAGFILES tag can be used to specify one or more tag files. 

For each 
tag file the location of the external documentation should be added. The 
format of a tag file without this location is as follows: 
\verbatim
  TAGFILES = file1 file2 ... 
\endverbatim
Adding location for the tag files is done as follows: 
\verbatim
  TAGFILES = file1=loc1 "file2 = loc2" ... 
\endverbatim
where `loc1` and `loc2` can be relative or absolute paths or URLs.
 See the section \ref external for more information about the use of tag files.

 \note
  Each tag file must have an unique name 
  (where the name does \e NOT include the path).
  If a tag file is not located in the directory in which doxygen 
  is run, you must also specify the path to the tagfile here.

 \anchor cfg_generate_tagfile
<dt>\c GENERATE_TAGFILE <dd>
 \addindex GENERATE_TAGFILE
 When a file name is specified after \c GENERATE_TAGFILE, doxygen will create
 a tag file that is based on the input files it reads.
 See section \ref external for more information about the usage of 
 tag files.

 \anchor cfg_allexternals
<dt>\c ALLEXTERNALS <dd>
 \addindex ALLEXTERNALS
 If the \c ALLEXTERNALS tag is set to \c YES all external class will be listed
 in the class index. If set to \c NO only the inherited external classes
 will be listed.


The default value is: <code>NO</code>.

 \anchor cfg_external_groups
<dt>\c EXTERNAL_GROUPS <dd>
 \addindex EXTERNAL_GROUPS
 If the \c EXTERNAL_GROUPS tag is set to \c YES all external groups will be listed
 in the modules index. If set to \c NO, only the current project's groups will
 be listed.


The default value is: <code>YES</code>.

 \anchor cfg_external_pages
<dt>\c EXTERNAL_PAGES <dd>
 \addindex EXTERNAL_PAGES
 If the \c EXTERNAL_PAGES tag is set to \c YES all external pages will be listed 
 in the related pages index. If set to \c NO, only the current project's 
 pages will be listed.


The default value is: <code>YES</code>.

 \anchor cfg_perl_path
<dt>\c PERL_PATH <dd>
 \addindex PERL_PATH
 The \c PERL_PATH should be the absolute path and name of the perl script
 interpreter (i.e. the result of `'which perl'`).

The default file (with absolute path) is: <code>/usr/bin/perl</code>.

</dl>
\section config_dot Configuration options related to the dot tool
 \anchor cfg_class_diagrams
<dl>

<dt>\c CLASS_DIAGRAMS <dd>
 \addindex CLASS_DIAGRAMS
 If the \c CLASS_DIAGRAMS tag is set to \c YES doxygen will
 generate a class diagram (in HTML and \f$\mbox{\LaTeX}\f$) for classes with base or
 super classes. Setting the tag to \c NO turns the diagrams off. Note that 
 this option also works with \ref cfg_have_dot "HAVE_DOT" disabled, but it is recommended to 
 install and use \c dot, since it yields more powerful graphs.


The default value is: <code>YES</code>.

 \anchor cfg_mscgen_path
<dt>\c MSCGEN_PATH <dd>
 \addindex MSCGEN_PATH
 You can define message sequence charts within doxygen comments using the \ref cmdmsc "\\msc" 
 command. Doxygen will then run the <a href="http://www.mcternan.me.uk/mscgen/">mscgen tool</a>) to 
 produce the chart and insert it in the documentation. The <code>MSCGEN_PATH</code> tag allows you to 
 specify the directory where the \c mscgen tool resides. If left empty the tool is assumed to 
 be found in the default search path.

 \anchor cfg_hide_undoc_relations
<dt>\c HIDE_UNDOC_RELATIONS <dd>
 \addindex HIDE_UNDOC_RELATIONS
 If set to \c YES, the inheritance and collaboration graphs will hide
 inheritance and usage relations if the target is undocumented
 or is not a class.


The default value is: <code>YES</code>.

 \anchor cfg_have_dot
<dt>\c HAVE_DOT <dd>
 \addindex HAVE_DOT
 If you set the \c HAVE_DOT tag to \c YES then doxygen will assume the \c dot tool is
 available from the \c path. This tool is part of 
 <a href="http://www.graphviz.org/">Graphviz</a>, a graph 
 visualization toolkit from AT\&T and Lucent Bell Labs. The other options in 
 this section have no effect if this option is set to \c NO


The default value is: <code>NO</code>.

 \anchor cfg_dot_num_threads
<dt>\c DOT_NUM_THREADS <dd>
 \addindex DOT_NUM_THREADS
 The \c DOT_NUM_THREADS specifies the number of \c dot invocations doxygen is 
 allowed to run in parallel. When set to \c 0 doxygen will 
 base this on the number of processors available in the system. You can set it 
 explicitly to a value larger than 0 to get control over the balance 
 between CPU load and processing speed.


 Minimum value: <code>0</code>, maximum value: <code>32</code>, default value: <code>0</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_dot_fontname
<dt>\c DOT_FONTNAME <dd>
 \addindex DOT_FONTNAME
 When you want a differently looking font n the dot files that doxygen generates
 you can specify the font name 
 using \c DOT_FONTNAME. You need to make sure dot is able to find the font, 
 which can be done by putting it in a standard location or by setting the 
 \c DOTFONTPATH environment variable or by setting \ref cfg_dot_fontpath "DOT_FONTPATH" to the 
 directory containing the font.

The default value is: <code>Helvetica</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_dot_fontsize
<dt>\c DOT_FONTSIZE <dd>
 \addindex DOT_FONTSIZE
 The \c DOT_FONTSIZE tag can be used to set the size (in points) of the font of dot graphs.


 Minimum value: <code>4</code>, maximum value: <code>24</code>, default value: <code>10</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_dot_fontpath
<dt>\c DOT_FONTPATH <dd>
 \addindex DOT_FONTPATH
 By default doxygen will tell \c dot to use the default font as specified with \ref cfg_dot_fontname "DOT_FONTNAME".
 If you specify a 
 different font using \ref cfg_dot_fontname "DOT_FONTNAME" you can set the path where \c dot 
 can find it using this tag.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_class_graph
<dt>\c CLASS_GRAPH <dd>
 \addindex CLASS_GRAPH
 If the \c CLASS_GRAPH tag is set to \c YES then doxygen
 will generate a graph for each documented class showing the direct and
 indirect inheritance relations. Setting this tag to \c YES will force 
 the \ref cfg_class_diagrams "CLASS_DIAGRAMS" tag to \c NO.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_collaboration_graph
<dt>\c COLLABORATION_GRAPH <dd>
 \addindex COLLABORATION_GRAPH
 If the \c COLLABORATION_GRAPH tag is set to \c YES then doxygen
 will generate a graph for each documented class showing the direct and
 indirect implementation dependencies (inheritance, containment, and
 class references variables) of the class with other documented classes.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_group_graphs
<dt>\c GROUP_GRAPHS <dd>
 \addindex GROUP_GRAPHS
 If the \c GROUP_GRAPHS tag is set to \c YES then doxygen
 will generate a graph for groups, showing the direct groups dependencies.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_uml_look
<dt>\c UML_LOOK <dd>
 \addindex UML_LOOK
 If the \c UML_LOOK tag is set to \c YES doxygen will generate inheritance and
 collaboration diagrams in a style similar to the OMG's Unified Modeling
 Language.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_uml_limit_num_fields
<dt>\c UML_LIMIT_NUM_FIELDS <dd>
 \addindex UML_LIMIT_NUM_FIELDS
 If the \ref cfg_uml_look "UML_LOOK" tag is enabled, the fields and methods are shown inside 
 the class node. If there are many fields or methods and many nodes the 
 graph may become too big to be useful. The \c UML_LIMIT_NUM_FIELDS 
 threshold limits the number of items for each type to make the size more 
 manageable. Set this to 0 for no limit. Note that the threshold may be
 exceeded by 50% before the limit is enforced. So when you set the threshold
 to 10, up to 15 fields may appear, but if the number exceeds 15, the
 total amount of fields shown is limited to 10.


 Minimum value: <code>0</code>, maximum value: <code>100</code>, default value: <code>10</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_template_relations
<dt>\c TEMPLATE_RELATIONS <dd>
 \addindex TEMPLATE_RELATIONS
 If the \c TEMPLATE_RELATIONS tag is set to \c YES then 
 the inheritance and collaboration graphs will show the relations between templates and their instances.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_include_graph
<dt>\c INCLUDE_GRAPH <dd>
 \addindex INCLUDE_GRAPH
 If the \c INCLUDE_GRAPH, \ref cfg_enable_preprocessing "ENABLE_PREPROCESSING" and
 \ref cfg_search_includes "SEARCH_INCLUDES" 
 tags are set to \c YES then doxygen will generate a graph for each documented file
 showing the direct and indirect include dependencies of the file with other
 documented files.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_included_by_graph
<dt>\c INCLUDED_BY_GRAPH <dd>
 \addindex INCLUDED_BY_GRAPH
 If the \c INCLUDED_BY_GRAPH, \ref cfg_enable_preprocessing "ENABLE_PREPROCESSING" and
 \ref cfg_search_includes "SEARCH_INCLUDES"
 tags are set to \c YES then doxygen will generate a graph for each documented file
 showing the direct and indirect include dependencies of the file with other
 documented files.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_call_graph
<dt>\c CALL_GRAPH <dd>
 \addindex CALL_GRAPH
 If the \c CALL_GRAPH tag is set to \c YES then doxygen will 
 generate a call dependency graph for every global function or class method. 
 <br>Note that enabling this option will significantly increase the time of a run.
 So in most cases it will be better to enable call graphs for selected 
 functions only using the \ref cmdcallgraph "\\callgraph" command.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_caller_graph
<dt>\c CALLER_GRAPH <dd>
 \addindex CALLER_GRAPH
 If the \c CALLER_GRAPH tag is set to \c YES then doxygen will 
 generate a caller dependency graph for every global function or class method. 
 <br>Note that enabling this option will significantly increase the time of a run.
 So in most cases it will be better to enable caller graphs for selected 
 functions only using the \ref cmdcallergraph "\\callergraph" command.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_graphical_hierarchy
<dt>\c GRAPHICAL_HIERARCHY <dd>
 \addindex GRAPHICAL_HIERARCHY
 If the \c GRAPHICAL_HIERARCHY tag is set to \c YES then 
 doxygen will graphical hierarchy of all classes instead of a textual one.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_directory_graph
<dt>\c DIRECTORY_GRAPH <dd>
 \addindex DIRECTORY_GRAPH
 If the \c DIRECTORY_GRAPH tag is set 
 to \c YES then doxygen will show the dependencies a directory has on other directories
 in a graphical way. The dependency relations are determined by the \c \#include
 relations between the files in the directories.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_dot_image_format
<dt>\c DOT_IMAGE_FORMAT <dd>
 \addindex DOT_IMAGE_FORMAT
 The \c DOT_IMAGE_FORMAT tag can be used to set the image format of the images
 generated by \c dot.
 \note If you choose \c svg you need to set 
 \ref cfg_html_file_extension "HTML_FILE_EXTENSION" to \c xhtml in order to make the SVG files
 visible in IE 9+ (other browsers do not have this requirement).

Possible values are: 
<code>png</code>, 
<code>jpg</code>, 
<code>gif</code> and 
<code>svg</code>.


The default value is: <code>png</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_interactive_svg
<dt>\c INTERACTIVE_SVG <dd>
 \addindex INTERACTIVE_SVG
 If \ref cfg_dot_image_format "DOT_IMAGE_FORMAT" is set to \c svg, then this option can be set to \c YES to
 enable generation of interactive SVG images that allow zooming and panning. 
 <br>Note that this requires a modern browser other than Internet Explorer. 
 Tested and working are Firefox, Chrome, Safari, and Opera.
 \note For IE 9+ you need to set \ref cfg_html_file_extension "HTML_FILE_EXTENSION" to \c xhtml in order 
 to make the SVG files visible. Older versions of IE do not have SVG support.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_dot_path
<dt>\c DOT_PATH <dd>
 \addindex DOT_PATH
 The \c DOT_PATH tag can be used to specify the path where the \c dot tool can be found. 
 If left blank, it is assumed the \c dot tool can be found in the \c path.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_dotfile_dirs
<dt>\c DOTFILE_DIRS <dd>
 \addindex DOTFILE_DIRS
 The \c DOTFILE_DIRS tag can be used to specify one or more directories that 
 contain dot files that are included in the documentation (see the
 \ref cmddotfile "\\dotfile" command).


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_mscfile_dirs
<dt>\c MSCFILE_DIRS <dd>
 \addindex MSCFILE_DIRS
 The \c MSCFILE_DIRS tag can be used to specify one or more directories that 
 contain msc files that are included in the documentation (see the
 \ref cmdmscfile "\\mscfile" command).

 \anchor cfg_dot_graph_max_nodes
<dt>\c DOT_GRAPH_MAX_NODES <dd>
 \addindex DOT_GRAPH_MAX_NODES
 The \c DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of 
 nodes that will be shown in the graph. If the number of nodes in a graph
 becomes larger than this value, doxygen will truncate the graph, which is 
 visualized by representing a node as a red box. Note that doxygen if the number
 of direct children of the root node in a graph is already larger than
 \c DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note
 that the size of a graph can be further restricted by \ref cfg_max_dot_graph_depth "MAX_DOT_GRAPH_DEPTH".


 Minimum value: <code>0</code>, maximum value: <code>10000</code>, default value: <code>50</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_max_dot_graph_depth
<dt>\c MAX_DOT_GRAPH_DEPTH <dd>
 \addindex MAX_DOT_GRAPH_DEPTH
 The \c MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the 
 graphs generated by \c dot. A depth value of 3 means that only nodes reachable
 from the root by following a path via at most 3 edges will be shown. Nodes
 that lay further from the root node will be omitted. Note that setting this
 option to 1 or 2 may greatly reduce the computation time needed for large
 code bases. Also note that the size of a graph can be further restricted by
 \ref cfg_dot_graph_max_nodes "DOT_GRAPH_MAX_NODES". Using a depth of 0 means no depth restriction.


 Minimum value: <code>0</code>, maximum value: <code>1000</code>, default value: <code>0</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_dot_transparent
<dt>\c DOT_TRANSPARENT <dd>
 \addindex DOT_TRANSPARENT
 Set the \c DOT_TRANSPARENT tag to \c YES to generate images with a transparent
 background. This is disabled by default, because dot on Windows does not 
 seem to support this out of the box.
 <br>
 Warning: Depending on the platform used, 
 enabling this option may lead to badly anti-aliased labels on the edges of 
 a graph (i.e. they become hard to read).


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_dot_multi_targets
<dt>\c DOT_MULTI_TARGETS <dd>
 \addindex DOT_MULTI_TARGETS
 Set the \c DOT_MULTI_TARGETS tag to \c YES allow dot to generate multiple output
 files in one run (i.e. multiple -o and -T options on the command line). This
 makes \c dot run faster, but since only newer versions of \c dot (>1.8.10)
 support this, this feature is disabled by default.


The default value is: <code>NO</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_generate_legend
<dt>\c GENERATE_LEGEND <dd>
 \addindex GENERATE_LEGEND
 If the \c GENERATE_LEGEND tag is set to \c YES doxygen will
 generate a legend page explaining the meaning of the various boxes and
 arrows in the dot generated graphs.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
 \anchor cfg_dot_cleanup
<dt>\c DOT_CLEANUP <dd>
 \addindex DOT_CLEANUP
If the \c DOT_CLEANUP tag is set to \c YES doxygen will
remove the intermediate dot files that are used to generate the various graphs.


The default value is: <code>YES</code>.


This tag requires that the tag \ref cfg_have_dot "HAVE_DOT" is set to \c YES.
</dl>
\section config_examples Examples

Suppose you have a simple project consisting of two files: a source file 
\c example.cc and a header file \c example.h.
Then a minimal configuration file is as simple as:
\verbatim
INPUT            = example.cc example.h
\endverbatim

Assuming the example makes use of Qt classes and \c perl is located 
in <code>/usr/bin</code>, a more realistic configuration file would be:
\verbatim
PROJECT_NAME     = Example
INPUT            = example.cc example.h
WARNINGS         = YES
TAGFILES         = qt.tag
PERL_PATH        = /usr/local/bin/perl
SEARCHENGINE     = NO
\endverbatim

To generate the documentation for the 
<a href="http://www.stack.nl/~dimitri/qdbttabular/index.html">QdbtTabular</a> package
I have used the following configuration file:
\verbatim
PROJECT_NAME     = QdbtTabular
OUTPUT_DIRECTORY = html
WARNINGS         = YES
INPUT            = examples/examples.doc src
FILE_PATTERNS    = *.cc *.h
INCLUDE_PATH     = examples
TAGFILES         = qt.tag
PERL_PATH        = /usr/bin/perl
SEARCHENGINE     = YES
\endverbatim

To regenerate the Qt-1.44 documentation from the sources, you could use the
following config file:
\verbatim
PROJECT_NAME         = Qt
OUTPUT_DIRECTORY     = qt_docs
HIDE_UNDOC_MEMBERS   = YES
HIDE_UNDOC_CLASSES   = YES
ENABLE_PREPROCESSING = YES
MACRO_EXPANSION      = YES
EXPAND_ONLY_PREDEF   = YES
SEARCH_INCLUDES      = YES
FULL_PATH_NAMES      = YES
STRIP_FROM_PATH      = $(QTDIR)/
PREDEFINED           = USE_TEMPLATECLASS Q_EXPORT= \
                       QArrayT:=QArray \
                       QListT:=QList \
                       QDictT:=QDict \
                       QQueueT:=QQueue \
                       QVectorT:=QVector \
                       QPtrDictT:=QPtrDict \
                       QIntDictT:=QIntDict \
                       QStackT:=QStack \
                       QDictIteratorT:=QDictIterator \
                       QListIteratorT:=QListIterator \
                       QCacheT:=QCache \
                       QCacheIteratorT:=QCacheIterator \
                       QIntCacheT:=QIntCache \
                       QIntCacheIteratorT:=QIntCacheIterator \
                       QIntDictIteratorT:=QIntDictIterator \
                       QPtrDictIteratorT:=QPtrDictIterator
INPUT                = $(QTDIR)/doc \
                       $(QTDIR)/src/widgets \
                       $(QTDIR)/src/kernel \
                       $(QTDIR)/src/dialogs \
                       $(QTDIR)/src/tools
FILE_PATTERNS        = *.cpp *.h q*.doc
INCLUDE_PATH         = $(QTDIR)/include 
RECURSIVE            = YES
\endverbatim

For the Qt-2.1 sources I recommend to use the following settings:
\verbatim
PROJECT_NAME          = Qt
PROJECT_NUMBER        = 2.1
HIDE_UNDOC_MEMBERS    = YES
HIDE_UNDOC_CLASSES    = YES
SOURCE_BROWSER        = YES
INPUT                 = $(QTDIR)/src
FILE_PATTERNS         = *.cpp *.h q*.doc
RECURSIVE             = YES
EXCLUDE_PATTERNS      = *codec.cpp moc_* */compat/* */3rdparty/*
ALPHABETICAL_INDEX    = YES
COLS_IN_ALPHA_INDEX   = 3
IGNORE_PREFIX         = Q
ENABLE_PREPROCESSING  = YES
MACRO_EXPANSION       = YES
INCLUDE_PATH          = $(QTDIR)/include
PREDEFINED            = Q_PROPERTY(x)= \
                        Q_OVERRIDE(x)= \
                        Q_EXPORT= \
                        Q_ENUMS(x)= \
                        "QT_STATIC_CONST=static const " \
                        _WS_X11_ \
                        INCLUDE_MENUITEM_DEF
EXPAND_ONLY_PREDEF    = YES
EXPAND_AS_DEFINED     = Q_OBJECT_FAKE Q_OBJECT ACTIVATE_SIGNAL_WITH_PARAM \
                        Q_VARIANT_AS
\endverbatim

Here doxygen's preprocessor is used to substitute some
macro names that are normally substituted by the C preprocessor,
but without doing full macro expansion.


\htmlonly
Go to the <a href="commands.html">next</a> section or return to the
 <a href="index.html">index</a>.
\endhtmlonly

*/
