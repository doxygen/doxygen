<doxygenconfig>
  <group name='Project' docs='Project related configuration options'>
    <option type='string' id='DOXYFILE_ENCODING' format='string' docs='
This tag specifies the encoding used for all characters in the config file 
that follow. The default is UTF-8 which is also the encoding used for all 
text before the first occurrence of this tag. Doxygen uses libiconv (or the 
iconv built into libc) for the transcoding. See 
http://www.gnu.org/software/libiconv for the list of possible encodings. 
' defval='UTF-8'/>
    <option type='string' id='PROJECT_NAME' format='string' docs='
The PROJECT_NAME tag is a single word (or sequence of words) that should 
identify the project. Note that if you do not use Doxywizard you need 
to put quotes around the project name if it contains spaces.' defval='My Project'/>
    <option type='string' id='PROJECT_NUMBER' format='string' docs='
The PROJECT_NUMBER tag can be used to enter a project or revision number. 
This could be handy for archiving the generated documentation or 
if some version control system is used. 
' defval=''/>
    <option type='string' id='PROJECT_BRIEF' format='string' docs='
Using the PROJECT_BRIEF tag one can provide an optional one line description 
for a project that appears at the top of each page and should give viewer 
a quick idea about the purpose of the project. Keep the description short. 
' defval=''/>
    <option type='string' id='PROJECT_LOGO' format='file' docs='
With the PROJECT_LOGO tag one can specify an logo or icon that is 
included in the documentation. The maximum height of the logo should not 
exceed 55 pixels and the maximum width should not exceed 200 pixels. 
Doxygen will copy the logo to the output directory.
' defval=''/>
    <option type='string' id='OUTPUT_DIRECTORY' format='dir' docs='
The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
base path where the generated documentation will be put. 
If a relative path is entered, it will be relative to the location 
where doxygen was started. If left blank the current directory will be used. 
' defval=''/>
    <option type='bool' id='CREATE_SUBDIRS' docs='
If the CREATE_SUBDIRS tag is set to YES, then doxygen will create 
4096 sub-directories (in 2 levels) under the output directory of each output 
format and will distribute the generated files over these directories. 
Enabling this option can be useful when feeding doxygen a huge amount of 
source files, where putting all generated files in the same directory would 
otherwise cause performance problems for the file system. 
' defval='0'/>
    <option type='enum' id='OUTPUT_LANGUAGE' defval='English' docs='
The OUTPUT_LANGUAGE tag is used to specify the language in which all 
documentation generated by doxygen is written. Doxygen will use this 
information to generate all constant output in the proper language. 
The default language is English, other supported languages are: 
Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional, 
Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German, 
Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English 
messages), Korean, Korean-en, Latvian, Lithuanian, Norwegian, Macedonian, 
Persian, Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, 
Slovak, Slovene, Spanish, Swedish, Ukrainian, and Vietnamese. 
'>
      <value name='Afrikaans'/>
      <value name='Arabic'/>
      <value name='Brazilian'/>
      <value name='Catalan'/>
      <value name='Chinese'/>
      <value name='Chinese-Traditional'/>
      <value name='Croatian'/>
      <value name='Czech'/>
      <value name='Danish'/>
      <value name='Dutch'/>
      <value name='English'/>
      <value name='Esperanto'/>
      <value name='Farsi'/>
      <value name='Finnish'/>
      <value name='French'/>
      <value name='German'/>
      <value name='Greek'/>
      <value name='Hungarian'/>
      <value name='Italian'/>
      <value name='Japanese'/>
      <value name='Japanese-en'/>
      <value name='Korean'/>
      <value name='Korean-en'/>
      <value name='Latvian'/>
      <value name='Norwegian'/>
      <value name='Macedonian'/>
      <value name='Persian'/>
      <value name='Polish'/>
      <value name='Portuguese'/>
      <value name='Romanian'/>
      <value name='Russian'/>
      <value name='Serbian'/>
      <value name='Slovak'/>
      <value name='Slovene'/>
      <value name='Spanish'/>
      <value name='Swedish'/>
      <value name='Turkish'/>
      <value name='Ukrainian'/>
      <value name='Vietnamese'/>
    </option>
    <option type='bool' id='BRIEF_MEMBER_DESC' docs='
If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will 
include brief member descriptions after the members that are listed in 
the file and class documentation (similar to JavaDoc). 
Set to NO to disable this. 
' defval='1'/>
    <option type='bool' id='REPEAT_BRIEF' docs='
If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend 
the brief description of a member or function before the detailed description. 
Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the 
brief descriptions will be completely suppressed. 
' defval='1'/>
    <option type='list' id='ABBREVIATE_BRIEF' format='string' docs='
This tag implements a quasi-intelligent brief description abbreviator 
that is used to form the text in various listings. Each string 
in this list, if found as the leading text of the brief description, will be 
stripped from the text and the result after processing the whole list, is 
used as the annotated text. Otherwise, the brief description is used as-is. 
If left blank, the following values are used (&quot;$name&quot; is automatically 
replaced with the name of the entity): &quot;The $name class&quot; &quot;The $name widget&quot; 
&quot;The $name file&quot; &quot;is&quot; &quot;provides&quot; &quot;specifies&quot; &quot;contains&quot; 
&quot;represents&quot; &quot;a&quot; &quot;an&quot; &quot;the&quot; 
'>
      <value name='The $name class'/>
      <value name='The $name widget'/>
      <value name='The $name file'/>
      <value name='is'/>
      <value name='provides'/>
      <value name='specifies'/>
      <value name='contains'/>
      <value name='represents'/>
      <value name='a'/>
      <value name='an'/>
      <value name='the'/>
    </option>
    <option type='bool' id='ALWAYS_DETAILED_SEC' docs='
If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then 
Doxygen will generate a detailed section even if there is only a brief 
description. 
' defval='0'/>
    <option type='bool' id='INLINE_INHERITED_MEMB' docs='
If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all 
inherited members of a class in the documentation of that class as if those 
members were ordinary class members. Constructors, destructors and assignment 
operators of the base classes will not be shown. 
' defval='0'/>
    <option type='bool' id='FULL_PATH_NAMES' docs='
If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full 
path before files name in the file list and in the header files. If set 
to NO the shortest path that makes the file name unique will be used. 
' defval='1'/>
    <option type='list' id='STRIP_FROM_PATH' format='string' docs='
If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag 
can be used to strip a user-defined part of the path. Stripping is 
only done if one of the specified strings matches the left-hand part of 
the path. The tag can be used to show relative paths in the file list. 
If left blank the directory from which doxygen is run is used as the 
path to strip. Note that you specify absolute paths here, but also 
relative paths, which will be relative from the directory where doxygen is 
started.' depends='FULL_PATH_NAMES'>
      <value name=''/>
    </option>
    <option type='list' id='STRIP_FROM_INC_PATH' format='string' docs='
The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of 
the path mentioned in the documentation of a class, which tells 
the reader which header file to include in order to use a class. 
If left blank only the name of the header file containing the class 
definition is used. Otherwise one should specify the include paths that 
are normally passed to the compiler using the -I flag. 
'>
    </option>
    <option type='bool' id='SHORT_NAMES' docs='
If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter 
(but less readable) file names. This can be useful if your file system 
doesn&apos;t support long names like on DOS, Mac, or CD-ROM. 
' defval='0'/>
    <option type='bool' id='JAVADOC_AUTOBRIEF' docs='
If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen 
will interpret the first line (until the first dot) of a JavaDoc-style 
comment as the brief description. If set to NO, the JavaDoc 
comments will behave just like regular Qt-style comments 
(thus requiring an explicit @brief command for a brief description.) 
' defval='0'/>
    <option type='bool' id='QT_AUTOBRIEF' docs='
If the QT_AUTOBRIEF tag is set to YES then Doxygen will 
interpret the first line (until the first dot) of a Qt-style 
comment as the brief description. If set to NO, the comments 
will behave just like regular Qt-style comments (thus requiring 
an explicit \brief command for a brief description.) 
' defval='0'/>
    <option type='bool' id='MULTILINE_CPP_IS_BRIEF' docs='
The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen 
treat a multi-line C++ special comment block (i.e. a block of //! or /// 
comments) as a brief description. This used to be the default behaviour. 
The new default is to treat a multi-line C++ comment block as a detailed 
description. Set this tag to YES if you prefer the old behaviour instead. 
' defval='0'/>
    <option type='bool' id='INHERIT_DOCS' docs='
If the INHERIT_DOCS tag is set to YES (the default) then an undocumented 
member inherits the documentation from any documented member that it 
re-implements. 
' defval='1'/>
    <option type='bool' id='SEPARATE_MEMBER_PAGES' docs='
If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce 
a new page for each member. If set to NO, the documentation of a member will 
be part of the file/class/namespace that contains it. 
' defval='0'/>
    <option type='int' id='TAB_SIZE' docs='
The TAB_SIZE tag can be used to set the number of spaces in a tab. 
Doxygen uses this value to replace tabs by spaces in code fragments. 
' minval='1' maxval='16' defval='4'/>
    <option type='list' id='ALIASES' format='string' docs='
This tag can be used to specify a number of aliases that acts 
as commands in the documentation. An alias has the form &quot;name=value&quot;. 
For example adding &quot;sideeffect=\par Side Effects:\n&quot; will allow you to 
put the command \sideeffect (or @sideeffect) in the documentation, which 
will result in a user-defined paragraph with heading &quot;Side Effects:&quot;. 
You can put \n&apos;s in the value part of an alias to insert newlines. 
'/>
    <option type='list' id='TCL_SUBST' format='string' docs='
This tag can be used to specify a number of word-keyword mappings (TCL only). 
A mapping has the form &quot;name=value&quot;. For example adding 
&quot;class=itcl::class&quot; will allow you to use the command class in the 
itcl::class meaning.
'/>
    <option type='bool' id='OPTIMIZE_OUTPUT_FOR_C' docs='
Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C 
sources only. Doxygen will then generate output that is more tailored for C. 
For instance, some of the names that are used will be different. The list 
of all members will be omitted, etc. 
' defval='0'/>
    <option type='bool' id='OPTIMIZE_OUTPUT_JAVA' docs='
Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java 
sources only. Doxygen will then generate output that is more tailored for 
Java. For instance, namespaces will be presented as packages, qualified 
scopes will look different, etc. 
' defval='0'/>
    <option type='bool' id='OPTIMIZE_FOR_FORTRAN' docs='
Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran 
sources only. Doxygen will then generate output that is more tailored for 
Fortran. 
' defval='0'/>
    <option type='bool' id='OPTIMIZE_OUTPUT_VHDL' docs='
Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL 
sources. Doxygen will then generate output that is tailored for 
VHDL. 
' defval='0'/>
    <option type='list' id='EXTENSION_MAPPING' format='string' docs='
Doxygen selects the parser to use depending on the extension of the files it 
parses. With this tag you can assign which parser to use for a given 
extension. Doxygen has a built-in mapping, but you can override or extend it 
using this tag. The format is ext=language, where ext is a file extension, 
and language is one of the parsers supported by doxygen: IDL, Java, 
Javascript, CSharp, C, C++, D, PHP, Objective-C, Python, Fortran, VHDL, C, 
C++. For instance to make doxygen treat .inc files as Fortran files (default 
is PHP), and .f files as C (default is Fortran), use: inc=Fortran f=C. Note 
that for custom extensions you also need to set FILE_PATTERNS otherwise the 
files are not read by doxygen.
'>
    </option>
    <option type='bool' id='MARKDOWN_SUPPORT' docs='
If MARKDOWN_SUPPORT is enabled (the default) then doxygen pre-processes all 
comments according to the Markdown format, which allows for more readable 
documentation. See http://daringfireball.net/projects/markdown/ for details. 
The output of markdown processing is further processed by doxygen, so you 
can mix doxygen, HTML, and XML commands with Markdown formatting. 
Disable only in case of backward compatibilities issues. 
' defval='1'/>
    <option type='bool' id='AUTOLINK_SUPPORT' docs='
When enabled doxygen tries to link words that correspond to documented 
classes, or namespaces to their corresponding documentation. Such a link can 
be prevented in individual cases by by putting a % sign in front of the word 
or globally by setting AUTOLINK_SUPPORT to NO.
' defval='1'/>
    <option type='bool' id='BUILTIN_STL_SUPPORT' docs='
If you use STL classes (i.e. std::string, std::vector, etc.) but do not want 
to include (a tag file for) the STL sources as input, then you should 
set this tag to YES in order to let doxygen match functions declarations and 
definitions whose arguments contain STL classes (e.g. func(std::string); v.s. 
func(std::string) {}). This also makes the inheritance and collaboration 
diagrams that involve STL classes more complete and accurate. 
' defval='0'/>
    <option type='bool' id='CPP_CLI_SUPPORT' docs='
If you use Microsoft&apos;s C++/CLI language, you should set this option to YES to 
enable parsing support. 
' defval='0'/>
    <option type='bool' id='SIP_SUPPORT' docs='
Set the SIP_SUPPORT tag to YES if your project consists of sip sources only. 
Doxygen will parse them like normal C++ but will assume all classes use public 
instead of private inheritance when no explicit protection keyword is present. 
' defval='0'/>
    <option type='bool' id='IDL_PROPERTY_SUPPORT' docs='
For Microsoft&apos;s IDL there are propget and propput attributes to indicate 
getter and setter methods for a property. Setting this option to YES (the 
default) will make doxygen replace the get and set methods by a property in 
the documentation. This will only work if the methods are indeed getting or 
setting a simple type. If this is not the case, or you want to show the 
methods anyway, you should set this option to NO.
' defval='1'/>
    <option type='bool' id='DISTRIBUTE_GROUP_DOC' docs='
If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC 
tag is set to YES, then doxygen will reuse the documentation of the first 
member in the group (if any) for the other members of the group. By default 
all members of a group must be documented explicitly. 
' defval='0'/>
    <option type='bool' id='SUBGROUPING' docs='
Set the SUBGROUPING tag to YES (the default) to allow class member groups of 
the same type (for instance a group of public functions) to be put as a 
subgroup of that type (e.g. under the Public Functions section). Set it to 
NO to prevent subgrouping. Alternatively, this can be done per class using 
the \nosubgrouping command. 
' defval='1'/>
    <option type='bool' id='INLINE_GROUPED_CLASSES' docs='
When the INLINE_GROUPED_CLASSES tag is set to YES, classes, structs and 
unions are shown inside the group in which they are included (e.g. using 
@ingroup) instead of on a separate page (for HTML and Man pages) or 
section (for LaTeX and RTF).
' defval='0'/>
    <option type='bool' id='INLINE_SIMPLE_STRUCTS' docs='
When the INLINE_SIMPLE_STRUCTS tag is set to YES, structs, classes, and 
unions with only public data fields or simple typedef fields will be shown 
inline in the documentation of the scope in which they are defined (i.e. file, 
namespace, or group documentation), provided this scope is documented. If set 
to NO (the default), structs, classes, and unions are shown on a separate 
page (for HTML and Man pages) or section (for LaTeX and RTF).
' defval='0'/>
    <option type='bool' id='TYPEDEF_HIDES_STRUCT' docs='
When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum 
is documented as struct, union, or enum with the name of the typedef. So 
typedef struct TypeS {} TypeT, will appear in the documentation as a struct 
with name TypeT. When disabled the typedef will appear as a member of a file, 
namespace, or class. And the struct will be named TypeS. This can typically 
be useful for C code in case the coding convention dictates that all compound 
types are typedef&apos;ed and only the typedef is referenced, never the tag name. 
' defval='0'/>
    <option type='int' id='LOOKUP_CACHE_SIZE' docs='
The size of the symbol lookup cache can be set using LOOKUP_CACHE_SIZE. This 
cache is used to resolve symbols given their name and scope. Since this can 
be an expensive process and often the same symbol appear multiple times in 
the code, doxygen keeps a cache of pre-resolved symbols. If the cache is too 
small doxygen will become slower. If the cache is too large, memory is wasted. 
The cache size is given by this formula: 2^(16+LOOKUP_CACHE_SIZE). The valid 
range is 0..9, the default is 0, corresponding to a cache size of 2^16 = 65536 
symbols. 
' minval='0' maxval='9' defval='0'/>
  </group>
  <group name='Build' docs='Build related configuration options'>
    <option type='bool' id='EXTRACT_ALL' docs='
If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in 
documentation are documented, even if no documentation was available. 
Private class members and static file members will be hidden unless 
the EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES 
' defval='0'/>
    <option type='bool' id='EXTRACT_PRIVATE' docs='
If the EXTRACT_PRIVATE tag is set to YES all private members of a class 
will be included in the documentation. 
' defval='0'/>
    <option type='bool' id='EXTRACT_PACKAGE' docs='
If the EXTRACT_PACKAGE tag is set to YES all members with package or internal 
scope will be included in the documentation. 
' defval='0'/>
    <option type='bool' id='EXTRACT_STATIC' docs='
If the EXTRACT_STATIC tag is set to YES all static members of a file 
will be included in the documentation. 
' defval='0'/>
    <option type='bool' id='EXTRACT_LOCAL_CLASSES' docs='
If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs) 
defined locally in source files will be included in the documentation. 
If set to NO only classes defined in header files are included. 
' defval='1'/>
    <option type='bool' id='EXTRACT_LOCAL_METHODS' docs='
This flag is only useful for Objective-C code. When set to YES local 
methods, which are defined in the implementation section but not in 
the interface are included in the documentation. 
If set to NO (the default) only methods in the interface are included. 
' defval='0'/>
    <option type='bool' id='EXTRACT_ANON_NSPACES' docs='
If this flag is set to YES, the members of anonymous namespaces will be 
extracted and appear in the documentation as a namespace called 
&apos;anonymous_namespace{file}&apos;, where file will be replaced with the base 
name of the file that contains the anonymous namespace. By default 
anonymous namespaces are hidden. 
' defval='0'/>
    <option type='bool' id='HIDE_UNDOC_MEMBERS' docs='
If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all 
undocumented members of documented classes, files or namespaces. 
If set to NO (the default) these members will be included in the 
various overviews, but no documentation section is generated. 
This option has no effect if EXTRACT_ALL is enabled. 
' defval='0'/>
    <option type='bool' id='HIDE_UNDOC_CLASSES' docs='
If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all 
undocumented classes that are normally visible in the class hierarchy. 
If set to NO (the default) these classes will be included in the various 
overviews. This option has no effect if EXTRACT_ALL is enabled. 
' defval='0'/>
    <option type='bool' id='HIDE_FRIEND_COMPOUNDS' docs='
If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all 
friend (class|struct|union) declarations. 
If set to NO (the default) these declarations will be included in the 
documentation. 
' defval='0'/>
    <option type='bool' id='HIDE_IN_BODY_DOCS' docs='
If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any 
documentation blocks found inside the body of a function. 
If set to NO (the default) these blocks will be appended to the 
function&apos;s detailed documentation block. 
' defval='0'/>
    <option type='bool' id='INTERNAL_DOCS' docs='
The INTERNAL_DOCS tag determines if documentation 
that is typed after a \internal command is included. If the tag is set 
to NO (the default) then the documentation will be excluded. 
Set it to YES to include the internal documentation. 
' defval='0'/>
    <option type='bool' id='CASE_SENSE_NAMES' docs='
If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate 
file names in lower-case letters. If set to YES upper-case letters are also 
allowed. This is useful if you have classes or files whose names only differ 
in case and if your file system supports case sensitive file names. Windows 
and Mac users are advised to set this option to NO. 
' defval='0' altdefval='portable_fileSystemIsCaseSensitive()'/>
    <option type='bool' id='HIDE_SCOPE_NAMES' docs='
If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen 
will show members with their full class and namespace scopes in the 
documentation. If set to YES the scope will be hidden. 
' defval='0'/>
    <option type='bool' id='SHOW_INCLUDE_FILES' docs='
If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen 
will put a list of the files that are included by a file in the documentation 
of that file. 
' defval='1'/>
    <option type='bool' id='SHOW_GROUPED_MEMBER_INCLUDES' docs='
If the SHOW_GROUPED_MEMBER_INCLUDES tag is set to YES (the default is NO) then Doxygen 
will show the include file for each file member that is grouped.'
defval='0'/>
    <option type='bool' id='FORCE_LOCAL_INCLUDES' docs='
If the FORCE_LOCAL_INCLUDES tag is set to YES then Doxygen 
will list include files with double quotes in the documentation 
rather than with sharp brackets.
' defval='0'/>
    <option type='bool' id='INLINE_INFO' docs='
If the INLINE_INFO tag is set to YES (the default) then a tag [inline] 
is inserted in the documentation for inline members. 
' defval='1'/>
    <option type='bool' id='SORT_MEMBER_DOCS' docs='
If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen 
will sort the (detailed) documentation of file and class members 
alphabetically by member name. If set to NO the members will appear in 
declaration order. 
' defval='1'/>
    <option type='bool' id='SORT_BRIEF_DOCS' docs='
If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the 
brief documentation of file, namespace and class members alphabetically 
by member name. If set to NO (the default) the members will appear in 
declaration order. 
' defval='0'/>
    <option type='bool' id='SORT_MEMBERS_CTORS_1ST' docs='
If the SORT_MEMBERS_CTORS_1ST tag is set to YES then doxygen 
will sort the (brief and detailed) documentation of class members so that 
constructors and destructors are listed first. If set to NO (the default) 
the constructors will appear in the respective orders defined by 
SORT_MEMBER_DOCS and SORT_BRIEF_DOCS. 
This tag will be ignored for brief docs if SORT_BRIEF_DOCS is set to NO 
and ignored for detailed docs if SORT_MEMBER_DOCS is set to NO.' defval='0'/>
    <option type='bool' id='SORT_GROUP_NAMES' docs='
If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the 
hierarchy of group names into alphabetical order. If set to NO (the default) 
the group names will appear in their defined order. 
' defval='0'/>
    <option type='bool' id='SORT_BY_SCOPE_NAME' docs='
If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be 
sorted by fully-qualified names, including namespaces. If set to 
NO (the default), the class list will be sorted only by class name, 
not including the namespace part. 
Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES. 
Note: This option applies only to the class list, not to the 
alphabetical list. 
' defval='0'/>
    <option type='bool' id='STRICT_PROTO_MATCHING' docs='
If the STRICT_PROTO_MATCHING option is enabled and doxygen fails to 
do proper type resolution of all parameters of a function it will reject a 
match between the prototype and the implementation of a member function even 
if there is only one candidate or it is obvious which candidate to choose 
by doing a simple string match. By disabling STRICT_PROTO_MATCHING doxygen 
will still accept a match between prototype and implementation in such cases.
' defval='0'/>
    <option type='bool' id='GENERATE_TODOLIST' docs='
The GENERATE_TODOLIST tag can be used to enable (YES) or 
disable (NO) the todo list. This list is created by putting \todo 
commands in the documentation. 
' defval='1'/>
    <option type='bool' id='GENERATE_TESTLIST' docs='
The GENERATE_TESTLIST tag can be used to enable (YES) or 
disable (NO) the test list. This list is created by putting \test 
commands in the documentation. 
' defval='1'/>
    <option type='bool' id='GENERATE_BUGLIST' docs='
The GENERATE_BUGLIST tag can be used to enable (YES) or 
disable (NO) the bug list. This list is created by putting \bug 
commands in the documentation. 
' defval='1'/>
    <option type='bool' id='GENERATE_DEPRECATEDLIST' docs='
The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or 
disable (NO) the deprecated list. This list is created by putting 
\deprecated commands in the documentation. 
' defval='1'/>
    <option type='list' id='ENABLED_SECTIONS' format='string' docs='
The ENABLED_SECTIONS tag can be used to enable conditional 
documentation sections, marked by \if section-label ... \endif 
and \cond section-label ... \endcond blocks. 
'>
    </option>
    <option type='int' id='MAX_INITIALIZER_LINES' docs='
The MAX_INITIALIZER_LINES tag determines the maximum number of lines 
the initial value of a variable or macro consists of for it to appear in 
the documentation. If the initializer consists of more lines than specified 
here it will be hidden. Use a value of 0 to hide initializers completely. 
The appearance of the initializer of individual variables and macros in the 
documentation can be controlled using \showinitializer or \hideinitializer 
command in the documentation regardless of this setting. 
' minval='0' maxval='10000' defval='30'/>
    <option type='bool' id='SHOW_USED_FILES' docs='
Set the SHOW_USED_FILES tag to NO to disable the list of files generated 
at the bottom of the documentation of classes and structs. If set to YES the 
list will mention the files that were used to generate the documentation.
' defval='1'/>
    <option type='bool' id='SHOW_FILES' docs='
Set the SHOW_FILES tag to NO to disable the generation of the Files page. 
This will remove the Files entry from the Quick Index and from the 
Folder Tree View (if specified). The default is YES. 
' defval='1'/>
    <option type='bool' id='SHOW_NAMESPACES' docs='
Set the SHOW_NAMESPACES tag to NO to disable the generation of the 
Namespaces page.  This will remove the Namespaces entry from the Quick Index 
and from the Folder Tree View (if specified). The default is YES. 
' defval='1'/>
    <option type='string' id='FILE_VERSION_FILTER' format='file' docs='
The FILE_VERSION_FILTER tag can be used to specify a program or script that 
doxygen should invoke to get the current version for each file (typically from 
the version control system). Doxygen will invoke the program by executing (via 
popen()) the command &lt;command&gt; &lt;input-file&gt;, where &lt;command&gt; is the value of 
the FILE_VERSION_FILTER tag, and &lt;input-file&gt; is the name of an input file 
provided by doxygen. Whatever the program writes to standard output 
is used as the file version. See the manual for examples. 
' defval=''/>
    <option type='string' id='LAYOUT_FILE' format='file' docs='
The LAYOUT_FILE tag can be used to specify a layout file which will be parsed 
by doxygen. The layout file controls the global structure of the generated 
output files in an output format independent way. To create the layout file 
that represents doxygen&apos;s defaults, run doxygen with the -l option. 
You can optionally specify a file name after the option, if omitted 
DoxygenLayout.xml will be used as the name of the layout file. 
' defval=''/>
    <option type='list' id='CITE_BIB_FILES' format='file' docs='
The CITE_BIB_FILES tag can be used to specify one or more bib files 
containing the references data. This must be a list of .bib files. The 
.bib extension is automatically appended if omitted. Using this command 
requires the bibtex tool to be installed. See also 
http://en.wikipedia.org/wiki/BibTeX for more info. For LaTeX the style 
of the bibliography can be controlled using LATEX_BIB_STYLE. To use this 
feature you need bibtex and perl available in the search path. Do not use 
file names with spaces, bibtex cannot handle them.
' defval=''/>
  </group>
  <group name='Messages' docs='configuration options related to warning and progress messages'>
    <option type='bool' id='QUIET' docs='
The QUIET tag can be used to turn on/off the messages that are generated 
by doxygen. Possible values are YES and NO. If left blank NO is used. 
' defval='0'/>
    <option type='bool' id='WARNINGS' docs='
The WARNINGS tag can be used to turn on/off the warning messages that are 
generated by doxygen. Possible values are YES and NO. If left blank 
NO is used. 
' defval='1'/>
    <option type='bool' id='WARN_IF_UNDOCUMENTED' docs='
If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings 
for undocumented members. If EXTRACT_ALL is set to YES then this flag will 
automatically be disabled. 
' defval='1'/>
    <option type='bool' id='WARN_IF_DOC_ERROR' docs='
If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for 
potential errors in the documentation, such as not documenting some 
parameters in a documented function, or documenting parameters that 
don&apos;t exist or using markup commands wrongly. 
' defval='1'/>
    <option type='bool' id='WARN_NO_PARAMDOC' docs='
The WARN_NO_PARAMDOC option can be enabled to get warnings for 
functions that are documented, but have no documentation for their parameters 
or return value. If set to NO (the default) doxygen will only warn about 
wrong or incomplete parameter documentation, but not about the absence of 
documentation. 
' defval='0'/>
    <option type='string' id='WARN_FORMAT' format='string' docs='
The WARN_FORMAT tag determines the format of the warning messages that 
doxygen can produce. The string should contain the $file, $line, and $text 
tags, which will be replaced by the file and line number from which the 
warning originated and the warning text. Optionally the format may contain 
$version, which will be replaced by the version of the file (if it could 
be obtained via FILE_VERSION_FILTER) 
' defval='$file:$line: $text'/>
    <option type='string' id='WARN_LOGFILE' format='file' docs='
The WARN_LOGFILE tag can be used to specify a file to which warning 
and error messages should be written. If left blank the output is written 
to stderr. 
' defval=''/>
  </group>
  <group name='Input' docs='configuration options related to the input files'>
    <option type='list' id='INPUT' format='filedir' docs='
The INPUT tag can be used to specify the files and/or directories that contain 
documented source files. You may enter file names like &quot;myfile.cpp&quot; or 
directories like &quot;/usr/src/myproject&quot;. Separate the files or directories 
with spaces. 
'>
      <value name=''/>
    </option>
    <option type='string' id='INPUT_ENCODING' format='string' docs='
This tag can be used to specify the character encoding of the source files 
that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is 
also the default input encoding. Doxygen uses libiconv (or the iconv built 
into libc) for the transcoding. See http://www.gnu.org/software/libiconv for 
the list of possible encodings. 
' defval='UTF-8'/>
    <option type='list' id='FILE_PATTERNS' format='string' docs='
If the value of the INPUT tag contains directories, you can use the 
FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
and *.h) to filter out the source-files in the directories. If left 
blank the following patterns are tested: 
*.c *.cc *.cxx *.cpp *.c++ *.d *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh 
*.hxx *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.dox *.py 
*.f90 *.f *.for *.vhd *.vhdl
'>
      <value name='*.c'/>
      <value name='*.cc'/>
      <value name='*.cxx'/>
      <value name='*.cpp'/>
      <value name='*.c++'/>
      <value name='*.d'/>
      <value name='*.java'/>
      <value name='*.ii'/>
      <value name='*.ixx'/>
      <value name='*.ipp'/>
      <value name='*.i++'/>
      <value name='*.inl'/>
      <value name='*.h'/>
      <value name='*.hh'/>
      <value name='*.hxx'/>
      <value name='*.hpp'/>
      <value name='*.h++'/>
      <value name='*.idl'/>
      <value name='*.odl'/>
      <value name='*.cs'/>
      <value name='*.php'/>
      <value name='*.php3'/>
      <value name='*.inc'/>
      <value name='*.m'/>
      <value name='*.markdown'/>
      <value name='*.md'/>
      <value name='*.mm'/>
      <value name='*.dox'/>
      <value name='*.py'/>
      <value name='*.f90'/>
      <value name='*.f'/>
      <value name='*.for'/>
      <value name='*.vhd'/>
      <value name='*.vhdl'/>
    </option>
    <option type='bool' id='RECURSIVE' docs='
The RECURSIVE tag can be used to turn specify whether or not subdirectories 
should be searched for input files as well. Possible values are YES and NO. 
If left blank NO is used. 
' defval='0'/>
    <option type='list' id='EXCLUDE' format='filedir' docs='
The EXCLUDE tag can be used to specify files and/or directories that should be 
excluded from the INPUT source files. This way you can easily exclude a 
subdirectory from a directory tree whose root is specified with the INPUT tag. 
Note that relative paths are relative to the directory from which doxygen is 
run.
'>
    </option>
    <option type='bool' id='EXCLUDE_SYMLINKS' docs='
The EXCLUDE_SYMLINKS tag can be used to select whether or not files or 
directories that are symbolic links (a Unix file system feature) are excluded 
from the input. 
' defval='0'/>
    <option type='list' id='EXCLUDE_PATTERNS' format='string' docs='
If the value of the INPUT tag contains directories, you can use the 
EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude 
certain files from those directories. Note that the wildcards are matched 
against the file with absolute path, so to exclude all test directories 
for example use the pattern */test/* 
'>
    </option>
    <option type='list' id='EXCLUDE_SYMBOLS' format='string' docs='
The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names 
(namespaces, classes, functions, etc.) that should be excluded from the 
output. The symbol name can be a fully qualified name, a word, or if the 
wildcard * is used, a substring. Examples: ANamespace, AClass, 
AClass::ANamespace, ANamespace::*Test 
'>
    </option>
    <option type='list' id='EXAMPLE_PATH' format='dir' docs='
The EXAMPLE_PATH tag can be used to specify one or more files or 
directories that contain example code fragments that are included (see 
the \include command). 
'>
    </option>
    <option type='list' id='EXAMPLE_PATTERNS' format='string' docs='
If the value of the EXAMPLE_PATH tag contains directories, you can use the 
EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
and *.h) to filter out the source-files in the directories. If left 
blank all files are included. 
'>
      <value name='*'/>
    </option>
    <option type='bool' id='EXAMPLE_RECURSIVE' docs='
If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be 
searched for input files to be used with the \include or \dontinclude 
commands irrespective of the value of the RECURSIVE tag. 
Possible values are YES and NO. If left blank NO is used. 
' defval='0'/>
    <option type='list' id='IMAGE_PATH' format='dir' docs='
The IMAGE_PATH tag can be used to specify one or more files or 
directories that contain image that are included in the documentation (see 
the \image command). 
'>
    </option>
    <option type='string' id='INPUT_FILTER' format='file' docs='
The INPUT_FILTER tag can be used to specify a program that doxygen should 
invoke to filter for each input file. Doxygen will invoke the filter program 
by executing (via popen()) the command &lt;filter&gt; &lt;input-file&gt;, where &lt;filter&gt; 
is the value of the INPUT_FILTER tag, and &lt;input-file&gt; is the name of an 
input file. Doxygen will then use the output that the filter program writes 
to standard output.  If FILTER_PATTERNS is specified, this tag will be ignored. 
Note that the filter must not add or remove lines; it is applied before the 
code is scanned, but not when the output code is generated. If lines are added 
or removed, the anchors will not be placed correctly.
' defval=''/>
    <option type='list' id='FILTER_PATTERNS' format='string' docs='
The FILTER_PATTERNS tag can be used to specify filters on a per file pattern 
basis.  Doxygen will compare the file name with each pattern and apply the 
filter if there is a match.  The filters are a list of the form: 
pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further 
info on how filters are used. If FILTER_PATTERNS is empty or if 
non of the patterns match the file name, INPUT_FILTER is applied. 
'>
    </option>
    <option type='bool' id='FILTER_SOURCE_FILES' docs='
If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using 
INPUT_FILTER) will be used to filter the input files when producing source 
files to browse (i.e. when SOURCE_BROWSER is set to YES). 
' defval='0'/>
    <option type='list' id='FILTER_SOURCE_PATTERNS' format='string' docs='
The FILTER_SOURCE_PATTERNS tag can be used to specify source filters per file 
pattern. A pattern will override the setting for FILTER_PATTERN (if any) 
and it is also possible to disable source filtering for a specific pattern 
using *.ext= (so without naming a filter). This option only has effect when 
FILTER_SOURCE_FILES is enabled.
' depends='FILTER_SOURCE_FILES'/>
    <option type='string' id='USE_MDFILE_AS_MAINPAGE' format='string' docs='
If the USE_MD_FILE_AS_MAINPAGE tag refers to the name of a markdown file that 
is part of the input, its contents will be placed on the main page 
(index.html). This can be useful if you have a project on for instance GitHub 
and want reuse the introduction page also for the doxygen output.
' defval=''/>
  </group>
  <group name='Source Browser' docs='configuration options related to source browsing'>
    <option type='bool' id='SOURCE_BROWSER' docs='
If the SOURCE_BROWSER tag is set to YES then a list of source files will 
be generated. Documented entities will be cross-referenced with these sources. 
Note: To get rid of all source code in the generated output, make sure also 
VERBATIM_HEADERS is set to NO. 
' defval='0'/>
    <option type='bool' id='INLINE_SOURCES' docs='
Setting the INLINE_SOURCES tag to YES will include the body 
of functions and classes directly in the documentation. 
' defval='0'/>
    <option type='bool' id='STRIP_CODE_COMMENTS' docs='
Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct 
doxygen to hide any special comment blocks from generated source code 
fragments. Normal C, C++ and Fortran comments will always remain visible. 
' defval='1'/>
    <option type='bool' id='REFERENCED_BY_RELATION' docs='
If the REFERENCED_BY_RELATION tag is set to YES 
then for each documented function all documented 
functions referencing it will be listed. 
' defval='0'/>
    <option type='bool' id='REFERENCES_RELATION' docs='
If the REFERENCES_RELATION tag is set to YES 
then for each documented function all documented entities 
called/used by that function will be listed. 
' defval='0'/>
    <option type='bool' id='REFERENCES_LINK_SOURCE' docs='
If the REFERENCES_LINK_SOURCE tag is set to YES (the default) 
and SOURCE_BROWSER tag is set to YES, then the hyperlinks from 
functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will 
link to the source code.  Otherwise they will link to the documentation. 
' defval='1'/>
    <option type='bool' id='USE_HTAGS' docs='
If the USE_HTAGS tag is set to YES then the references to source code 
will point to the HTML generated by the htags(1) tool instead of doxygen 
built-in source browser. The htags tool is part of GNU&apos;s global source 
tagging system (see http://www.gnu.org/software/global/global.html). You 
will need version 4.8.6 or higher. 
' defval='0' depends='SOURCE_BROWSER'/>
    <option type='bool' id='VERBATIM_HEADERS' docs='
If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen 
will generate a verbatim copy of the header file for each class for 
which an include is specified. Set to NO to disable this. 
' defval='1'/>
     <option type='bool' id='CLANG_ASSISTED_PARSING' setting='USE_LIBCLANG' docs='
If CLANG_ASSISTED_PARSING is set to YES, then doxygen will use the clang parser 
for more acurate parsing at the cost of reduced performance. This can be 
particularly helpful with template rich C++ code for which doxygen&apos;s built-in 
parser lacks the necessairy type information.
' defval='0'/>
     <option type='list' id='CLANG_OPTIONS' setting='USE_LIBCLANG' docs='
If clang assisted parsing is enabled you can provide the compiler with command 
line options that you would normally use when invoking the compiler. Note that 
the include paths will already be set by doxygen for the files and directories 
specified at INPUT and INCLUDE_PATH.
' defval='' depends='CLANG_ASSISTED_PARSING'/>
  </group>
  <group name='Index' docs='configuration options related to the alphabetical class index'>
    <option type='bool' id='ALPHABETICAL_INDEX' docs='
If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index 
of all compounds will be generated. Enable this if the project 
contains a lot of classes, structs, unions or interfaces. 
' defval='1'/>
    <option type='int' id='COLS_IN_ALPHA_INDEX' docs='
If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then 
the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns 
in which this list will be split (can be a number in the range [1..20]) 
' minval='1' maxval='20' defval='5' depends='ALPHABETICAL_INDEX'/>
    <option type='list' id='IGNORE_PREFIX' format='string' docs='
In case all classes in a project start with a common prefix, all 
classes will be put under the same header in the alphabetical index. 
The IGNORE_PREFIX tag can be used to specify one or more prefixes that 
should be ignored while generating the index headers. 
' depends='ALPHABETICAL_INDEX'>
    </option>
  </group>
  <group name='HTML' docs='configuration options related to the HTML output'>
    <option type='bool' id='GENERATE_HTML' docs='
If the GENERATE_HTML tag is set to YES (the default) Doxygen will 
generate HTML output. 
' defval='1'/>
    <option type='string' id='HTML_OUTPUT' format='dir' docs='
The HTML_OUTPUT tag is used to specify where the HTML docs will be put. 
If a relative path is entered the value of OUTPUT_DIRECTORY will be 
put in front of it. If left blank `html&apos; will be used as the default path. 
' defval='html' depends='GENERATE_HTML'/>
    <option type='string' id='HTML_FILE_EXTENSION' format='string' docs='
The HTML_FILE_EXTENSION tag can be used to specify the file extension for 
each generated HTML page (for example: .htm,.php,.asp). If it is left blank 
doxygen will generate files with .html extension. 
' defval='.html' depends='GENERATE_HTML'/>
    <option type='string' id='HTML_HEADER' format='file' docs='
The HTML_HEADER tag can be used to specify a personal HTML header for 
each generated HTML page. If it is left blank doxygen will generate a 
standard header. Note that when using a custom header you are responsible  
for the proper inclusion of any scripts and style sheets that doxygen 
needs, which is dependent on the configuration options used. 
It is advised to generate a default header using "doxygen -w html 
header.html footer.html stylesheet.css YourConfigFile" and then modify 
that header. Note that the header is subject to change so you typically 
have to redo this when upgrading to a newer version of doxygen or when 
changing the value of configuration settings such as GENERATE_TREEVIEW!
' defval='' depends='GENERATE_HTML'/>
    <option type='string' id='HTML_FOOTER' format='file' docs='
The HTML_FOOTER tag can be used to specify a personal HTML footer for 
each generated HTML page. If it is left blank doxygen will generate a 
standard footer. 
' defval='' depends='GENERATE_HTML'/>
    <option type='string' id='HTML_STYLESHEET' format='file' docs='
The HTML_STYLESHEET tag can be used to specify a user-defined cascading 
style sheet that is used by each HTML page. It can be used to 
fine-tune the look of the HTML output. If left blank doxygen will 
generate a default style sheet. Note that it is recommended to use 
HTML_EXTRA_STYLESHEET instead of this one, as it is more robust and this 
tag will in the future become obsolete.
' defval='' depends='GENERATE_HTML'/>
    <option type='string' id='HTML_EXTRA_STYLESHEET' format='file' docs='
The HTML_EXTRA_STYLESHEET tag can be used to specify an additional 
user-defined cascading style sheet that is included after the standard 
style sheets created by doxygen. Using this option one can overrule 
certain style aspects. This is preferred over using HTML_STYLESHEET 
since it does not replace the standard style sheet and is therefor more 
robust against future updates. Doxygen will copy the style sheet file to 
the output directory.
' defval='' depends='GENERATE_HTML'/>
    <option type='list' id='HTML_EXTRA_FILES' format='file' docs='
The HTML_EXTRA_FILES tag can be used to specify one or more extra images or 
other source files which should be copied to the HTML output directory. Note 
that these files will be copied to the base HTML output directory. Use the 
$relpath^ marker in the HTML_HEADER and/or HTML_FOOTER files to load these 
files. In the HTML_STYLESHEET file, use the file name only. Also note that 
the files will be copied as-is; there are no commands or markers available.
' depends='GENERATE_HTML'/>
    <option type='int' id='HTML_COLORSTYLE_HUE' docs='
The HTML_COLORSTYLE_HUE tag controls the color of the HTML output. 
Doxygen will adjust the colors in the style sheet and background images 
according to this color. Hue is specified as an angle on a colorwheel, 
see http://en.wikipedia.org/wiki/Hue for more information. 
For instance the value 0 represents red, 60 is yellow, 120 is green, 
180 is cyan, 240 is blue, 300 purple, and 360 is red again. 
The allowed range is 0 to 359. 
' minval='0' maxval='359' defval='220' depends='GENERATE_HTML'/>
    <option type='int' id='HTML_COLORSTYLE_SAT' docs='
The HTML_COLORSTYLE_SAT tag controls the purity (or saturation) of 
the colors in the HTML output. For a value of 0 the output will use 
grayscales only. A value of 255 will produce the most vivid colors. 
' minval='0' maxval='255' defval='100' depends='GENERATE_HTML'/>
    <option type='int' id='HTML_COLORSTYLE_GAMMA' docs='
The HTML_COLORSTYLE_GAMMA tag controls the gamma correction applied to 
the luminance component of the colors in the HTML output. Values below 
100 gradually make the output lighter, whereas values above 100 make 
the output darker. The value divided by 100 is the actual gamma applied, 
so 80 represents a gamma of 0.8, The value 220 represents a gamma of 2.2, 
and 100 does not change the gamma.
' minval='40' maxval='240' defval='80' depends='GENERATE_HTML'/>
    <option type='bool' id='HTML_TIMESTAMP' docs='
If the HTML_TIMESTAMP tag is set to YES then the footer of each generated HTML 
page will contain the date and time when the page was generated. Setting 
this to NO can help when comparing the output of multiple runs.
' defval='1' depends='GENERATE_HTML'/>
    <option type='bool' id='HTML_DYNAMIC_SECTIONS' docs='
If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML 
documentation will contain sections that can be hidden and shown after the 
page has loaded. 
' defval='0' depends='GENERATE_HTML'/>
    <option type='int' id='HTML_INDEX_NUM_ENTRIES' docs='
With HTML_INDEX_NUM_ENTRIES one can control the preferred number of 
entries shown in the various tree structured indices initially; the user 
can expand and collapse entries dynamically later on. Doxygen will expand 
the tree to such a level that at most the specified number of entries are 
visible (unless a fully collapsed tree already exceeds this amount). 
So setting the number of entries 1 will produce a full collapsed tree by 
default. 0 is a special value representing an infinite number of entries 
and will result in a full expanded tree by default.
' minval='0' maxval='9999' defval='100' depends='GENERATE_HTML'/>
    <option type='bool' id='GENERATE_DOCSET' docs='
If the GENERATE_DOCSET tag is set to YES, additional index files 
will be generated that can be used as input for Apple&apos;s Xcode 3 
integrated development environment, introduced with OSX 10.5 (Leopard). 
To create a documentation set, doxygen will generate a Makefile in the 
HTML output directory. Running make will produce the docset in that 
directory and running &quot;make install&quot; will install the docset in 
~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find 
it at startup. 
See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html 
for more information. 
' defval='0' depends='GENERATE_HTML'/>
    <option type='string' id='DOCSET_FEEDNAME' format='string' docs='
When GENERATE_DOCSET tag is set to YES, this tag determines the name of the 
feed. A documentation feed provides an umbrella under which multiple 
documentation sets from a single provider (such as a company or product suite) 
can be grouped. 
' defval='Doxygen generated docs' depends='GENERATE_DOCSET'/>
    <option type='string' id='DOCSET_BUNDLE_ID' format='string' docs='
When GENERATE_DOCSET tag is set to YES, this tag specifies a string that 
should uniquely identify the documentation set bundle. This should be a 
reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen 
will append .docset to the name. 
' defval='org.doxygen.Project' depends='GENERATE_DOCSET'/>
    <option type='string' id='DOCSET_PUBLISHER_ID' format='string' docs='
When GENERATE_PUBLISHER_ID tag specifies a string that should uniquely 
identify the documentation publisher. This should be a reverse domain-name 
style string, e.g. com.mycompany.MyDocSet.documentation. 
' defval='org.doxygen.Publisher' depends='GENERATE_DOCSET'/>
    <option type='string' id='DOCSET_PUBLISHER_NAME' format='string' docs='
The GENERATE_PUBLISHER_NAME tag identifies the documentation publisher.
' defval='Publisher' depends='GENERATE_DOCSET'/>
    <option type='bool' id='GENERATE_HTMLHELP' docs='
If the GENERATE_HTMLHELP tag is set to YES, additional index files 
will be generated that can be used as input for tools like the 
Microsoft HTML help workshop to generate a compiled HTML help file (.chm) 
of the generated HTML documentation. 
' defval='0' depends='GENERATE_HTML'/>
    <option type='string' id='CHM_FILE' format='file' docs='
If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can 
be used to specify the file name of the resulting .chm file. You 
can add a path in front of the file if the result should not be 
written to the html output directory. 
' defval='' depends='GENERATE_HTMLHELP'/>
    <option type='string' id='HHC_LOCATION' format='file' docs='
If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can 
be used to specify the location (absolute path including file name) of 
the HTML help compiler (hhc.exe). If non-empty doxygen will try to run 
the HTML help compiler on the generated index.hhp. 
' defval='' depends='GENERATE_HTMLHELP' abspath='1'/>
    <option type='bool' id='GENERATE_CHI' docs='
If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag 
controls if a separate .chi index file is generated (YES) or that 
it should be included in the master .chm file (NO). 
' defval='0' depends='GENERATE_HTMLHELP'/>
    <option type='string' id='CHM_INDEX_ENCODING' format='string' docs='
If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING 
is used to encode HtmlHelp index (hhk), content (hhc) and project file 
content. 
' defval='' depends='GENERATE_HTMLHELP'/>
    <option type='bool' id='BINARY_TOC' docs='
If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag 
controls whether a binary table of contents is generated (YES) or a 
normal table of contents (NO) in the .chm file. 
' defval='0' depends='GENERATE_HTMLHELP'/>
    <option type='bool' id='TOC_EXPAND' docs='
The TOC_EXPAND flag can be set to YES to add extra items for group members 
to the contents of the HTML help documentation and to the tree view. 
' defval='0' depends='GENERATE_HTMLHELP'/>
    <option type='bool' id='GENERATE_QHP' docs='
If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and 
QHP_VIRTUAL_FOLDER are set, an additional index file will be generated 
that can be used as input for Qt&apos;s qhelpgenerator to generate a 
Qt Compressed Help (.qch) of the generated HTML documentation. 
' defval='0' depends='GENERATE_HTML'/>
    <option type='string' id='QCH_FILE' format='file' docs='
If the QHG_LOCATION tag is specified, the QCH_FILE tag can 
be used to specify the file name of the resulting .qch file. 
The path specified is relative to the HTML output folder. 
' defval='' depends='GENERATE_QHP'/>
    <option type='string' id='QHP_NAMESPACE' format='string' docs='
The QHP_NAMESPACE tag specifies the namespace to use when generating 
Qt Help Project output. For more information please see 
http://doc.trolltech.com/qthelpproject.html#namespace 
' defval='org.doxygen.Project' depends='GENERATE_QHP'/>
    <option type='string' id='QHP_VIRTUAL_FOLDER' format='string' docs='
The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating 
Qt Help Project output. For more information please see 
http://doc.trolltech.com/qthelpproject.html#virtual-folders 
' defval='doc' depends='GENERATE_QHP'/>
    <option type='string' id='QHP_CUST_FILTER_NAME' format='string' docs='
If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to 
add. For more information please see 
http://doc.trolltech.com/qthelpproject.html#custom-filters 
' defval='' depends='GENERATE_QHP'/>
    <option type='string' id='QHP_CUST_FILTER_ATTRS' format='string' docs='
The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the 
custom filter to add. For more information please see 
&lt;a href=&quot;http://doc.trolltech.com/qthelpproject.html#custom-filters&quot;&gt; 
Qt Help Project / Custom Filters&lt;/a&gt;. 
' defval='' depends='GENERATE_QHP'/>
    <option type='string' id='QHP_SECT_FILTER_ATTRS' format='string' docs='
The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this 
project&apos;s 
filter section matches. 
&lt;a href=&quot;http://doc.trolltech.com/qthelpproject.html#filter-attributes&quot;&gt; 
Qt Help Project / Filter Attributes&lt;/a&gt;. 
' defval='' depends='GENERATE_QHP'/>
    <option type='string' id='QHG_LOCATION' format='file' docs='
If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can 
be used to specify the location of Qt&apos;s qhelpgenerator. 
If non-empty doxygen will try to run qhelpgenerator on the generated 
.qhp file. 
' defval='' depends='GENERATE_QHP'/>
    <option type='bool' id='GENERATE_ECLIPSEHELP' docs='
If the GENERATE_ECLIPSEHELP tag is set to YES, additional index files  
will be generated, which together with the HTML files, form an Eclipse help 
plugin. To install this plugin and make it available under the help contents 
menu in Eclipse, the contents of the directory containing the HTML and XML 
files needs to be copied into the plugins directory of eclipse. The name of 
the directory within the plugins directory should be the same as 
the ECLIPSE_DOC_ID value. After copying Eclipse needs to be restarted before 
the help appears.
' defval='0' depends='GENERATE_HTML'/>
    <option type='string' id='ECLIPSE_DOC_ID' docs='
A unique identifier for the eclipse help plugin. When installing the plugin 
the directory name containing the HTML and XML files should also have 
this name.
' defval='org.doxygen.Project' depends='GENERATE_ECLIPSEHELP'/>
    <option type='bool' id='DISABLE_INDEX' docs='
The DISABLE_INDEX tag can be used to turn on/off the condensed index (tabs) 
at top of each HTML page. The value NO (the default) enables the index and 
the value YES disables it. Since the tabs have the same information as the 
navigation tree you can set this option to NO if you already set 
GENERATE_TREEVIEW to YES.
' defval='0' depends='GENERATE_HTML'/>
    <option type='bool' id='GENERATE_TREEVIEW' defval='0' docs='
The GENERATE_TREEVIEW tag is used to specify whether a tree-like index 
structure should be generated to display hierarchical information. 
If the tag value is set to YES, a side panel will be generated 
containing a tree-like index structure (just like the one that 
is generated for HTML Help). For this to work a browser that supports 
JavaScript, DHTML, CSS and frames is required (i.e. any modern browser). 
Windows users are probably better off using the HTML help feature. 
Since the tree basically has the same information as the tab index you 
could consider to set DISABLE_INDEX to NO when enabling this option.
' depends='GENERATE_HTML'/>
    <option type='int' id='ENUM_VALUES_PER_LINE' docs='
The ENUM_VALUES_PER_LINE tag can be used to set the number of enum values 
(range [0,1..20]) that doxygen will group on one line in the generated HTML 
documentation. Note that a value of 0 will completely suppress the enum 
values from appearing in the overview section.
' minval='0' maxval='20' defval='4' depends='GENERATE_HTML'/>
    <option type='int' id='TREEVIEW_WIDTH' docs='
If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be 
used to set the initial width (in pixels) of the frame in which the tree 
is shown. 
' minval='0' maxval='1500' defval='250' depends='GENERATE_HTML'/>
    <option type='bool' id='EXT_LINKS_IN_WINDOW' defval='0' docs='
When the EXT_LINKS_IN_WINDOW option is set to YES doxygen will open 
links to external symbols imported via tag files in a separate window. 
' depends='GENERATE_HTML'/>
    <option type='int' id='FORMULA_FONTSIZE' docs='
Use this tag to change the font size of Latex formulas included 
as images in the HTML documentation. The default is 10. Note that 
when you change the font size after a successful doxygen run you need 
to manually remove any form_*.png images from the HTML output directory 
to force them to be regenerated. 
' minval='8' maxval='50' defval='10' depends='GENERATE_HTML'/>
    <option type='bool' id='FORMULA_TRANSPARENT' docs='
Use the FORMULA_TRANPARENT tag to determine whether or not the images 
generated for formulas are transparent PNGs. Transparent PNGs are 
not supported properly for IE 6.0, but are supported on all modern browsers. 
Note that when changing this option you need to delete any form_*.png files 
in the HTML output before the changes have effect. 
' defval='1' depends='GENERATE_HTML'/>
    <option type='bool' id='USE_MATHJAX' docs='
Enable the USE_MATHJAX option to render LaTeX formulas using MathJax 
(see http://www.mathjax.org) which uses client side Javascript for the 
rendering instead of using prerendered bitmaps. Use this if you do not 
have LaTeX installed or if you want to formulas look prettier in the HTML 
output. When enabled you may also need to install MathJax separately and 
configure the path to it using the MATHJAX_RELPATH option.
' defval='0' depends='GENERATE_HTML'/> 
    <option type='enum' id='MATHJAX_FORMAT' defval='HTML-CSS' docs='
When MathJax is enabled you can set the default output format to be used for 
the MathJax output. Supported types are HTML-CSS, NativeMML (i.e. MathML) and 
SVG. The default value is HTML-CSS, which is slower, but has the best 
compatibility. 
' depends='USE_MATHJAX'>
      <value name="HTML-CSS"/>
      <value name="NativeMML"/>
      <value name="SVG"/>
    </option>   
    <option type='string' id='MATHJAX_RELPATH' docs=' 
When MathJax is enabled you need to specify the location relative to the 
HTML output directory using the MATHJAX_RELPATH option. The destination 
directory should contain the MathJax.js script. For instance, if the mathjax 
directory is located at the same level as the HTML output directory, then 
MATHJAX_RELPATH should be ../mathjax. The default value points to 
the MathJax Content Delivery Network so you can quickly see the result without 
installing MathJax.  However, it is strongly recommended to install a local 
copy of MathJax from http://www.mathjax.org before deployment.
' defval='http://cdn.mathjax.org/mathjax/latest' depends='USE_MATHJAX'/>
    <option type='list' id='MATHJAX_EXTENSIONS' format='string' docs='
The MATHJAX_EXTENSIONS tag can be used to specify one or MathJax extension 
names that should be enabled during MathJax rendering. 
' depends='USE_MATHJAX'>
    </option>
    <option type='string' id='MATHJAX_CODEFILE' format='string' docs='
The MATHJAX_CODEFILE tag can be used to specify a file with javascript 
pieces of code that will be used on startup of the MathJax code. 
' depends='USE_MATHJAX'>
    </option>
    <option type='bool' id='SEARCHENGINE' docs='
When the SEARCHENGINE tag is enabled doxygen will generate a search box 
for the HTML output. The underlying search engine uses javascript 
and DHTML and should work on any modern browser. Note that when using 
HTML help (GENERATE_HTMLHELP), Qt help (GENERATE_QHP), or docsets 
(GENERATE_DOCSET) there is already a search function so this one should 
typically be disabled. For large projects the javascript based search engine 
can be slow, then enabling SERVER_BASED_SEARCH may provide a better solution.
' defval='1' depends='GENERATE_HTML'/>
    <option type='bool' id='SERVER_BASED_SEARCH' docs='
When the SERVER_BASED_SEARCH tag is enabled the search engine will be 
implemented using a web server instead of a web client using Javascript. 
There are two flavours of web server based search depending on the 
EXTERNAL_SEARCH setting. When disabled, doxygen will generate a PHP script for 
searching and an index file used by the script. When EXTERNAL_SEARCH is 
enabled the indexing and searching needs to be provided by external tools. 
See the manual for details. 
' defval='0' depends='SEARCHENGINE'/>
    <option type='bool' id='EXTERNAL_SEARCH' docs='
When EXTERNAL_SEARCH is enabled doxygen will no longer generate the PHP 
script for searching. Instead the search results are written to an XML file 
which needs to be processed by an external indexer. Doxygen will invoke an 
external search engine pointed to by the SEARCHENGINE_URL option to obtain 
the search results. Doxygen ships with an example indexer (doxyindexer) and 
search engine (doxysearch.cgi) which are based on the open source search 
engine library Xapian. See the manual for configuration details. 
' defval='0' depends='SEARCHENGINE'/>
    <option type='string' id='SEARCHENGINE_URL' docs='
The SEARCHENGINE_URL should point to a search engine hosted by a web server 
which will returned the search results when EXTERNAL_SEARCH is enabled. 
Doxygen ships with an example search engine (doxysearch) which is based on 
the open source search engine library Xapian. See the manual for configuration 
details. 
' defval='' depends='SEARCHENGINE'/>
    <option type='string' id='SEARCHDATA_FILE' format='file' docs='
When SERVER_BASED_SEARCH and EXTERNAL_SEARCH are both enabled the unindexed 
search data is written to a file for indexing by an external tool. With the 
SEARCHDATA_FILE tag the name of this file can be specified.
' defval='searchdata.xml' depends='SEARCHENGINE'/>
    <option type='string' id='EXTERNAL_SEARCH_ID' docs='
When SERVER_BASED_SEARCH AND EXTERNAL_SEARCH are both enabled the 
EXTERNAL_SEARCH_ID tag can be used as an identifier for the project. This is 
useful in combination with EXTRA_SEARCH_MAPPINGS to search through multiple 
projects and redirect the results back to the right project.
' defval='' depends='SEARCHENGINE'/>
    <option type='list' id='EXTRA_SEARCH_MAPPINGS' docs='
The EXTRA_SEARCH_MAPPINGS tag can be used to enable searching through doxygen 
projects other than the one defined by this configuration file, but that are 
all added to the same external search index. Each project needs to have a 
unique id set via EXTERNAL_SEARCH_ID. The search mapping then maps the id 
of to a relative location where the documentation can be found. 
The format is: EXTRA_SEARCH_MAPPINGS = id1=loc1 id2=loc2 ... 
' defval='0' depends='SEARCHENGINE'/>
  </group>
  <group name='LaTeX' docs='configuration options related to the LaTeX output'>
    <option type='bool' id='GENERATE_LATEX' docs='
If the GENERATE_LATEX tag is set to YES (the default) Doxygen will 
generate Latex output. 
' defval='1'/>
    <option type='string' id='LATEX_OUTPUT' format='dir' docs='
The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. 
If a relative path is entered the value of OUTPUT_DIRECTORY will be 
put in front of it. If left blank `latex&apos; will be used as the default path. 
' defval='latex' depends='GENERATE_LATEX'/>
    <option type='string' id='LATEX_CMD_NAME' format='file' docs='
The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be 
invoked. If left blank `latex&apos; will be used as the default command name. 
Note that when enabling USE_PDFLATEX this option is only used for 
generating bitmaps for formulas in the HTML output, but not in the 
Makefile that is written to the output directory.
' defval='latex' depends='GENERATE_LATEX'/>
    <option type='string' id='MAKEINDEX_CMD_NAME' format='file' docs='
The MAKEINDEX_CMD_NAME tag can be used to specify the command name to 
generate index for LaTeX. If left blank `makeindex&apos; will be used as the 
default command name. 
' defval='makeindex' depends='GENERATE_LATEX'/>
    <option type='bool' id='COMPACT_LATEX' docs='
If the COMPACT_LATEX tag is set to YES Doxygen generates more compact 
LaTeX documents. This may be useful for small projects and may help to 
save some trees in general. 
' defval='0' depends='GENERATE_LATEX'/>
    <option type='enum' id='PAPER_TYPE' defval='a4' docs='
The PAPER_TYPE tag can be used to set the paper type that is used 
by the printer. Possible values are: a4, letter, legal and 
executive. If left blank a4 will be used. 
' depends='GENERATE_LATEX'>
      <value name='a4'/>
      <value name='letter'/>
      <value name='legal'/>
      <value name='executive'/>
    </option>
    <option type='list' id='EXTRA_PACKAGES' format='string' docs='
The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX 
packages that should be included in the LaTeX output. 
' depends='GENERATE_LATEX'>
    </option>
    <option type='string' id='LATEX_HEADER' format='file' docs='
The LATEX_HEADER tag can be used to specify a personal LaTeX header for 
the generated latex document. The header should contain everything until 
the first chapter. If it is left blank doxygen will generate a 
standard header. Notice: only use this tag if you know what you are doing! 
' defval='' depends='GENERATE_LATEX'/>
    <option type='string' id='LATEX_FOOTER' format='file' docs='
The LATEX_FOOTER tag can be used to specify a personal LaTeX footer for 
the generated latex document. The footer should contain everything after 
the last chapter. If it is left blank doxygen will generate a 
standard footer. Notice: only use this tag if you know what you are doing! 
' defval='' depends='GENERATE_LATEX'/>
    <option type='list' id='LATEX_EXTRA_FILES' format='file' docs='
The LATEX_EXTRA_FILES tag can be used to specify one or more extra images 
or other source files which should be copied to the LaTeX output directory. 
Note that the files will be copied as-is; there are no commands or markers 
available. 
' depends='GENERATE_LATEX'/>
    <option type='bool' id='PDF_HYPERLINKS' docs='
If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated 
is prepared for conversion to pdf (using ps2pdf). The pdf file will 
contain links (just like the HTML output) instead of page references 
This makes the output suitable for online browsing using a pdf viewer. 
' defval='1' depends='GENERATE_LATEX'/>
    <option type='bool' id='USE_PDFLATEX' docs='
If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of 
plain latex in the generated Makefile. Set this option to YES to get a 
higher quality PDF documentation. 
' defval='1' depends='GENERATE_LATEX'/>
    <option type='bool' id='LATEX_BATCHMODE' docs='
If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode. 
command to the generated LaTeX files. This will instruct LaTeX to keep 
running if errors occur, instead of asking the user for help. 
This option is also used when generating formulas in HTML. 
' defval='0' depends='GENERATE_LATEX'/>
    <option type='bool' id='LATEX_HIDE_INDICES' docs='
If LATEX_HIDE_INDICES is set to YES then doxygen will not 
include the index chapters (such as File Index, Compound Index, etc.) 
in the output. 
' defval='0' depends='GENERATE_LATEX'/>
    <option type='bool' id='LATEX_SOURCE_CODE' docs='
If LATEX_SOURCE_CODE is set to YES then doxygen will include 
source code with syntax highlighting in the LaTeX output. 
Note that which sources are shown also depends on other settings 
such as SOURCE_BROWSER.
' defval='0' depends='GENERATE_LATEX'/>
    <option type='string' id='LATEX_BIB_STYLE' format='string' docs='
The LATEX_BIB_STYLE tag can be used to specify the style to use for the 
bibliography, e.g. plainnat, or ieeetr. The default style is &quot;plain&quot;. See 
http://en.wikipedia.org/wiki/BibTeX for more info.
' defval='plain' depends='GENERATE_LATEX'/>
  </group>
  <group name='RTF' docs='configuration options related to the RTF output'>
    <option type='bool' id='GENERATE_RTF' docs='
If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output 
The RTF output is optimized for Word 97 and may not look very pretty with 
other RTF readers or editors. 
' defval='0'/>
    <option type='string' id='RTF_OUTPUT' format='dir' docs='
The RTF_OUTPUT tag is used to specify where the RTF docs will be put. 
If a relative path is entered the value of OUTPUT_DIRECTORY will be 
put in front of it. If left blank `rtf&apos; will be used as the default path. 
' defval='rtf' depends='GENERATE_RTF'/>
    <option type='bool' id='COMPACT_RTF' docs='
If the COMPACT_RTF tag is set to YES Doxygen generates more compact 
RTF documents. This may be useful for small projects and may help to 
save some trees in general. 
' defval='0' depends='GENERATE_RTF'/>
    <option type='bool' id='RTF_HYPERLINKS' docs='
If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated 
will contain hyperlink fields. The RTF file will 
contain links (just like the HTML output) instead of page references. 
This makes the output suitable for online browsing using WORD or other 
programs which support those fields. 
Note: wordpad (write) and others do not support links. 
' defval='0' depends='GENERATE_RTF'/>
    <option type='string' id='RTF_STYLESHEET_FILE' format='file' docs='
Load style sheet definitions from file. Syntax is similar to doxygen&apos;s 
config file, i.e. a series of assignments. You only have to provide 
replacements, missing definitions are set to their default value. 
' defval='' depends='GENERATE_RTF'/>
    <option type='string' id='RTF_EXTENSIONS_FILE' format='file' docs='
Set optional variables used in the generation of an rtf document. 
Syntax is similar to doxygen&apos;s config file. 
' defval='' depends='GENERATE_RTF'/>
  </group>
  <group name='Man' docs='configuration options related to the man page output'>
    <option type='bool' id='GENERATE_MAN' docs='
If the GENERATE_MAN tag is set to YES (the default) Doxygen will 
generate man pages 
' defval='0'/>
    <option type='string' id='MAN_OUTPUT' format='dir' docs='
The MAN_OUTPUT tag is used to specify where the man pages will be put. 
If a relative path is entered the value of OUTPUT_DIRECTORY will be 
put in front of it. If left blank `man&apos; will be used as the default path. 
' defval='man' depends='GENERATE_MAN'/>
    <option type='string' id='MAN_EXTENSION' format='string' docs='
The MAN_EXTENSION tag determines the extension that is added to 
the generated man pages (default is the subroutine&apos;s section .3) 
' defval='.3' depends='GENERATE_MAN'/>
    <option type='bool' id='MAN_LINKS' docs='
If the MAN_LINKS tag is set to YES and Doxygen generates man output, 
then it will generate one additional man file for each entity 
documented in the real man page(s). These additional files 
only source the real man page, but without them the man command 
would be unable to find the correct page. The default is NO. 
' defval='0' depends='GENERATE_MAN'/>
  </group>
  <group name='XML' docs='configuration options related to the XML output'>
    <option type='bool' id='GENERATE_XML' docs='
If the GENERATE_XML tag is set to YES Doxygen will 
generate an XML file that captures the structure of 
the code including all documentation. 
' defval='0'/>
    <option type='string' id='XML_OUTPUT' format='dir' docs='
The XML_OUTPUT tag is used to specify where the XML pages will be put. 
If a relative path is entered the value of OUTPUT_DIRECTORY will be 
put in front of it. If left blank `xml&apos; will be used as the default path. 
' defval='xml' depends='GENERATE_XML'/>
    <option type='string' id='XML_SCHEMA' format='string' docs='
The XML_SCHEMA tag can be used to specify an XML schema, 
which can be used by a validating XML parser to check the 
syntax of the XML files. 
' defval='' depends='GENERATE_XML'/>
    <option type='string' id='XML_DTD' format='string' docs='
The XML_DTD tag can be used to specify an XML DTD, 
which can be used by a validating XML parser to check the 
syntax of the XML files. 
' defval='' depends='GENERATE_XML'/>
    <option type='bool' id='XML_PROGRAMLISTING' docs='
If the XML_PROGRAMLISTING tag is set to YES Doxygen will 
dump the program listings (including syntax highlighting 
and cross-referencing information) to the XML output. Note that 
enabling this will significantly increase the size of the XML output. 
' defval='1' depends='GENERATE_XML'/>
  </group>
  <group name='Docbook' docs='configuration options related to the DOCBOOK output'>
    <option type='bool' id='GENERATE_DOCBOOK' docs='
If the GENERATE_DOCBOOK tag is set to YES Doxygen will generate DOCBOOK files 
that can be used to generate PDF.
' defval='0'/>
    <option type='string' id='DOCBOOK_OUTPUT' format='dir' docs='
The DOCBOOK_OUTPUT tag is used to specify where the DOCBOOK pages will be put. 
If a relative path is entered the value of OUTPUT_DIRECTORY will be put in 
front of it. If left blank docbook will be used as the default path.
' defval='docbook' depends='GENERATE_DOCBOOK'/>
  </group>
  <group name='DEF' docs='configuration options for the AutoGen Definitions output'>
    <option type='bool' id='GENERATE_AUTOGEN_DEF' docs='
If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will 
generate an AutoGen Definitions (see autogen.sf.net) file 
that captures the structure of the code including all 
documentation. Note that this feature is still experimental 
and incomplete at the moment. 
' defval='0'/>
  </group>
<!--
  <group name='Sqlite3' docs='configuration options related to Sqlite3 output'>
    <option type='bool' id='GENERATE_SQLITE3' docs='
If the GENERATE_SQLITE3 tag is set to YES doxygen will generate an  
sqlite database with symbols found by doxygen stored in tables.
' defval='0'/>
    <option type='string' id='SQLITE3_OUTPUT' format='dir' docs='
The SQLITE3_OUTPUT tag is used to specify where the Sqlite3 database will be put. 
If a relative path is entered the value of OUTPUT_DIRECTORY will be 
put in front of it. If left blank sqlite3 will be used as the default path. 
' defval='' depends='GENERATE_SQLITE3'/>
  </group>
-->
  <group name='PerlMod' docs='configuration options related to the Perl module output'>
    <option type='bool' id='GENERATE_PERLMOD' docs='
If the GENERATE_PERLMOD tag is set to YES Doxygen will 
generate a Perl module file that captures the structure of 
the code including all documentation. Note that this 
feature is still experimental and incomplete at the 
moment. 
' defval='0'/>
    <option type='bool' id='PERLMOD_LATEX' docs='
If the PERLMOD_LATEX tag is set to YES Doxygen will generate 
the necessary Makefile rules, Perl scripts and LaTeX code to be able 
to generate PDF and DVI output from the Perl module output. 
' defval='0' depends='GENERATE_PERLMOD'/>
    <option type='bool' id='PERLMOD_PRETTY' docs='
If the PERLMOD_PRETTY tag is set to YES the Perl module output will be 
nicely formatted so it can be parsed by a human reader.  This is useful 
if you want to understand what is going on.  On the other hand, if this 
tag is set to NO the size of the Perl module output will be much smaller 
and Perl will parse it just the same. 
' defval='1' depends='GENERATE_PERLMOD'/>
    <option type='string' id='PERLMOD_MAKEVAR_PREFIX' format='string' docs='
The names of the make variables in the generated doxyrules.make file 
are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. 
This is useful so different doxyrules.make files included by the same 
Makefile don&apos;t overwrite each other&apos;s variables.' defval='' depends='GENERATE_PERLMOD'/>
  </group>
  <group name='Preprocessor' docs='Configuration options related to the preprocessor'>
    <option type='bool' id='ENABLE_PREPROCESSING' docs='
If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will 
evaluate all C-preprocessor directives found in the sources and include 
files. 
' defval='1'/>
    <option type='bool' id='MACRO_EXPANSION' docs='
If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro 
names in the source code. If set to NO (the default) only conditional 
compilation will be performed. Macro expansion can be done in a controlled 
way by setting EXPAND_ONLY_PREDEF to YES. 
' defval='0' depends='ENABLE_PREPROCESSING'/>
    <option type='bool' id='EXPAND_ONLY_PREDEF' docs='
If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES 
then the macro expansion is limited to the macros specified with the 
PREDEFINED and EXPAND_AS_DEFINED tags. 
' defval='0' depends='ENABLE_PREPROCESSING'/>
    <option type='bool' id='SEARCH_INCLUDES' docs='
If the SEARCH_INCLUDES tag is set to YES (the default) the includes files 
pointed to by INCLUDE_PATH will be searched when a #include is found. 
' defval='1' depends='ENABLE_PREPROCESSING'/>
    <option type='list' id='INCLUDE_PATH' format='dir' docs='
The INCLUDE_PATH tag can be used to specify one or more directories that 
contain include files that are not input files but should be processed by 
the preprocessor. 
' depends='SEARCH_INCLUDES'>
    </option>
    <option type='list' id='INCLUDE_FILE_PATTERNS' format='string' docs='
You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard 
patterns (like *.h and *.hpp) to filter out the header-files in the 
directories. If left blank, the patterns specified with FILE_PATTERNS will 
be used. 
' depends='ENABLE_PREPROCESSING'>
    </option>
    <option type='list' id='PREDEFINED' format='string' docs='
The PREDEFINED tag can be used to specify one or more macro names that 
are defined before the preprocessor is started (similar to the -D option of 
gcc). The argument of the tag is a list of macros of the form: name 
or name=definition (no spaces). If the definition and the = are 
omitted =1 is assumed. To prevent a macro definition from being 
undefined via #undef or recursively expanded use the := operator 
instead of the = operator. 
' depends='ENABLE_PREPROCESSING'>
    </option>
    <option type='list' id='EXPAND_AS_DEFINED' format='string' docs='
If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then 
this tag can be used to specify a list of macro names that should be expanded. 
The macro definition that is found in the sources will be used. 
Use the PREDEFINED tag if you want to use a different macro definition that 
overrules the definition found in the source code. 
' depends='ENABLE_PREPROCESSING'>
    </option>
    <option type='bool' id='SKIP_FUNCTION_MACROS' docs='
If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then 
doxygen&apos;s preprocessor will remove all references to function-like macros 
that are alone on a line, have an all uppercase name, and do not end with a 
semicolon, because these will confuse the parser if not removed. 
' defval='1' depends='ENABLE_PREPROCESSING'/>
  </group>
  <group name='External' docs='Configuration::additions related to external references'>
    <option type='list' id='TAGFILES' format='file' docs='
The TAGFILES option can be used to specify one or more tagfiles. For each 
tag file the location of the external documentation should be added. The 
format of a tag file without this location is as follows: 
  TAGFILES = file1 file2 ... 
Adding location for the tag files is done as follows: 
  TAGFILES = file1=loc1 &quot;file2 = loc2&quot; ... 
where &quot;loc1&quot; and &quot;loc2&quot; can be relative or absolute paths 
or URLs. Note that each tag file must have a unique name (where the name does 
NOT include the path). If a tag file is not located in the directory in which 
doxygen is run, you must also specify the path to the tagfile here. 
'>
    </option>
    <option type='string' id='GENERATE_TAGFILE' format='file' docs='
When a file name is specified after GENERATE_TAGFILE, doxygen will create 
a tag file that is based on the input files it reads. 
' defval=''/>
    <option type='bool' id='ALLEXTERNALS' docs='
If the ALLEXTERNALS tag is set to YES all external classes will be listed 
in the class index. If set to NO only the inherited external classes 
will be listed. 
' defval='0'/>
    <option type='bool' id='EXTERNAL_GROUPS' docs='
If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed 
in the modules index. If set to NO, only the current project&apos;s groups will 
be listed. 
' defval='1'/>
    <option type='bool' id='EXTERNAL_PAGES' docs='
If the EXTERNAL_PAGES tag is set to YES all external pages will be listed 
in the related pages index. If set to NO, only the current project&apos;s 
pages will be listed. 
' defval='1'/>
    <option type='string' id='PERL_PATH' format='dir' docs='
The PERL_PATH should be the absolute path and name of the perl script 
interpreter (i.e. the result of `which perl&apos;). 
' defval='/usr/bin/perl'/>
  </group>
  <group name='Dot' docs='Configuration options related to the dot tool'>
    <option type='bool' id='CLASS_DIAGRAMS' docs='
If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will 
generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base 
or super classes. Setting the tag to NO turns the diagrams off. Note that 
this option also works with HAVE_DOT disabled, but it is recommended to 
install and use dot, since it yields more powerful graphs. 
' defval='1'/>
    <option type='string' id='MSCGEN_PATH' format='string' docs='
You can define message sequence charts within doxygen comments using the \msc 
command. Doxygen will then run the mscgen tool (see 
http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the 
documentation. The MSCGEN_PATH tag allows you to specify the directory where 
the mscgen tool resides. If left empty the tool is assumed to be found in the 
default search path. 
' defval=''/>
    <option type='bool' id='HIDE_UNDOC_RELATIONS' docs='
If set to YES, the inheritance and collaboration graphs will hide 
inheritance and usage relations if the target is undocumented 
or is not a class. 
' defval='1'/>
    <option type='bool' id='HAVE_DOT' docs='
If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is 
available from the path. This tool is part of Graphviz, a graph visualization 
toolkit from AT&amp;T and Lucent Bell Labs. The other options in this section 
have no effect if this option is set to NO (the default) 
' defval='0'/>
    <option type='int' id='DOT_NUM_THREADS' docs='
The DOT_NUM_THREADS specifies the number of dot invocations doxygen is 
allowed to run in parallel. When set to 0 (the default) doxygen will 
base this on the number of processors available in the system. You can set it 
explicitly to a value larger than 0 to get control over the balance 
between CPU load and processing speed.  
' defval='0' minval='0' maxval='32' depends='HAVE_DOT'/>
    <option type='string' id='DOT_FONTNAME' format='string' docs='
By default doxygen will use the Helvetica font for all dot files that 
doxygen generates. When you want a differently looking font you can specify 
the font name using DOT_FONTNAME. You need to make sure dot is able to find 
the font, which can be done by putting it in a standard location or by setting 
the DOTFONTPATH environment variable or by setting DOT_FONTPATH to the 
directory containing the font. 
' defval='Helvetica' depends='HAVE_DOT'/>
    <option type='int' id='DOT_FONTSIZE' docs='
The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs. 
The default size is 10pt. 
' minval='4' maxval='24' defval='10' depends='HAVE_DOT'/>
    <option type='string' id='DOT_FONTPATH' format='string' docs='
By default doxygen will tell dot to use the Helvetica font. 
If you specify a different font using DOT_FONTNAME you can use DOT_FONTPATH to 
set the path where dot can find it.
' defval='' depends='HAVE_DOT'/>
    <option type='bool' id='CLASS_GRAPH' docs='
If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen 
will generate a graph for each documented class showing the direct and 
indirect inheritance relations. Setting this tag to YES will force the 
CLASS_DIAGRAMS tag to NO. 
' defval='1' depends='HAVE_DOT'/>
    <option type='bool' id='COLLABORATION_GRAPH' docs='
If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen 
will generate a graph for each documented class showing the direct and 
indirect implementation dependencies (inheritance, containment, and 
class references variables) of the class with other documented classes. 
' defval='1' depends='HAVE_DOT'/>
    <option type='bool' id='GROUP_GRAPHS' docs='
If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen 
will generate a graph for groups, showing the direct groups dependencies 
' defval='1' depends='HAVE_DOT'/>
    <option type='bool' id='UML_LOOK' docs='
If the UML_LOOK tag is set to YES doxygen will generate inheritance and 
collaboration diagrams in a style similar to the OMG&apos;s Unified Modeling 
Language. 
' defval='0' depends='HAVE_DOT'/>
    <option type='int' id='UML_LIMIT_NUM_FIELDS' docs='
If the UML_LOOK tag is enabled, the fields and methods are shown inside 
the class node. If there are many fields or methods and many nodes the 
graph may become too big to be useful. The UML_LIMIT_NUM_FIELDS 
threshold limits the number of items for each type to make the size more 
manageable. Set this to 0 for no limit. Note that the threshold may be 
exceeded by 50% before the limit is enforced.
' defval='10' minval='0' maxval='100' depends='HAVE_DOT'/>
    <option type='bool' id='TEMPLATE_RELATIONS' docs='
If set to YES, the inheritance and collaboration graphs will show the 
relations between templates and their instances. 
' defval='0' depends='HAVE_DOT'/>
    <option type='bool' id='INCLUDE_GRAPH' docs='
If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT 
tags are set to YES then doxygen will generate a graph for each documented 
file showing the direct and indirect include dependencies of the file with 
other documented files. 
' defval='1' depends='HAVE_DOT'/>
    <option type='bool' id='INCLUDED_BY_GRAPH' docs='
If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and 
HAVE_DOT tags are set to YES then doxygen will generate a graph for each 
documented header file showing the documented files that directly or 
indirectly include this file. 
' defval='1' depends='HAVE_DOT'/>
    <option type='bool' id='CALL_GRAPH' docs='
If the CALL_GRAPH and HAVE_DOT options are set to YES then 
doxygen will generate a call dependency graph for every global function 
or class method. Note that enabling this option will significantly increase 
the time of a run. So in most cases it will be better to enable call graphs 
for selected functions only using the \callgraph command. 
' defval='0' depends='HAVE_DOT'/>
    <option type='bool' id='CALLER_GRAPH' docs='
If the CALLER_GRAPH and HAVE_DOT tags are set to YES then 
doxygen will generate a caller dependency graph for every global function 
or class method. Note that enabling this option will significantly increase 
the time of a run. So in most cases it will be better to enable caller 
graphs for selected functions only using the \callergraph command. 
' defval='0' depends='HAVE_DOT'/>
    <option type='bool' id='GRAPHICAL_HIERARCHY' docs='
If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen 
will generate a graphical hierarchy of all classes instead of a textual one. 
' defval='1' depends='HAVE_DOT'/>
    <option type='bool' id='DIRECTORY_GRAPH' docs='
If the DIRECTORY_GRAPH and HAVE_DOT tags are set to YES 
then doxygen will show the dependencies a directory has on other directories 
in a graphical way. The dependency relations are determined by the #include 
relations between the files in the directories. 
' defval='1' depends='HAVE_DOT'/>
    <option type='enum' id='DOT_IMAGE_FORMAT' defval='png' docs='
The DOT_IMAGE_FORMAT tag can be used to set the image format of the images 
generated by dot. Possible values are svg, png, jpg, or gif. 
If left blank png will be used. If you choose svg you need to set 
HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
visible in IE 9+ (other browsers do not have this requirement).
' depends='HAVE_DOT'>
      <value name='png'/>
      <value name='jpg'/>
      <value name='gif'/>
      <value name='svg'/>
    </option>
    <option type='bool' id='INTERACTIVE_SVG' docs='
If DOT_IMAGE_FORMAT is set to svg, then this option can be set to YES to 
enable generation of interactive SVG images that allow zooming and panning. 
Note that this requires a modern browser other than Internet Explorer. 
Tested and working are Firefox, Chrome, Safari, and Opera. For IE 9+ you 
need to set HTML_FILE_EXTENSION to xhtml in order to make the SVG files 
visible. Older versions of IE do not have SVG support. 
' defval='0' depends='HAVE_DOT'/>
    <option type='string' id='DOT_PATH' format='dir' docs='
The tag DOT_PATH can be used to specify the path where the dot tool can be 
found. If left blank, it is assumed the dot tool can be found in the path. 
' defval='' depends='HAVE_DOT'/>
    <option type='list' id='DOTFILE_DIRS' format='dir' docs='
The DOTFILE_DIRS tag can be used to specify one or more directories that 
contain dot files that are included in the documentation (see the 
\dotfile command). 
' depends='HAVE_DOT'>
    </option>
    <option type='list' id='MSCFILE_DIRS' format='dir' docs='
The MSCFILE_DIRS tag can be used to specify one or more directories that 
contain msc files that are included in the documentation (see the 
\mscfile command). 
' >
    </option>
    <option type='int' id='DOT_GRAPH_MAX_NODES' docs='
The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of 
nodes that will be shown in the graph. If the number of nodes in a graph 
becomes larger than this value, doxygen will truncate the graph, which is 
visualized by representing a node as a red box. Note that doxygen if the 
number of direct children of the root node in a graph is already larger than 
DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note 
that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH. 
' minval='0' maxval='10000' defval='50' depends='HAVE_DOT'/>
    <option type='int' id='MAX_DOT_GRAPH_DEPTH' docs='
The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the 
graphs generated by dot. A depth value of 3 means that only nodes reachable 
from the root by following a path via at most 3 edges will be shown. Nodes 
that lay further from the root node will be omitted. Note that setting this 
option to 1 or 2 may greatly reduce the computation time needed for large 
code bases. Also note that the size of a graph can be further restricted by 
DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction. 
' minval='0' maxval='1000' defval='0' depends='HAVE_DOT'/>
    <option type='bool' id='DOT_TRANSPARENT' docs='
Set the DOT_TRANSPARENT tag to YES to generate images with a transparent 
background. This is disabled by default, because dot on Windows does not 
seem to support this out of the box. Warning: Depending on the platform used, 
enabling this option may lead to badly anti-aliased labels on the edges of 
a graph (i.e. they become hard to read). 
' defval='0' depends='HAVE_DOT'/>
    <option type='bool' id='DOT_MULTI_TARGETS' docs='
Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output 
files in one run (i.e. multiple -o and -T options on the command line). This 
makes dot run faster, but since only newer versions of dot (&gt;1.8.10) 
support this, this feature is disabled by default. 
' defval='0' depends='HAVE_DOT'/>
    <option type='bool' id='GENERATE_LEGEND' docs='
If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will 
generate a legend page explaining the meaning of the various boxes and 
arrows in the dot generated graphs. 
' defval='1' depends='HAVE_DOT'/>
    <option type='bool' id='DOT_CLEANUP' docs='
If the DOT_CLEANUP tag is set to YES (the default) Doxygen will 
remove the intermediate dot files that are used to generate 
the various graphs. 
' defval='1' depends='HAVE_DOT'/>
    <option type='obsolete' id='USE_WINDOWS_ENCODING'/>
    <option type='obsolete' id='DETAILS_AT_TOP'/>
    <option type='obsolete' id='QTHELP_FILE'/>
    <option type='obsolete' id='QTHELP_CONFIG'/>
    <option type='obsolete' id='DOXYGEN2QTHELP_LOC'/>
    <option type='obsolete' id='MAX_DOT_GRAPH_WIDTH'/>
    <option type='obsolete' id='MAX_DOT_GRAPH_HEIGHT'/>
    <option type='obsolete' id='CGI_NAME'/>
    <option type='obsolete' id='CGI_URL'/>
    <option type='obsolete' id='DOC_URL'/>
    <option type='obsolete' id='DOC_ABSPATH'/>
    <option type='obsolete' id='BIN_ABSPATH'/>
    <option type='obsolete' id='EXT_DOC_PATHS'/>
    <option type='obsolete' id='USE_INLINE_TREES'/>
    <option type='obsolete' id='SHOW_DIRECTORIES'/>
    <option type='obsolete' id='HTML_ALIGN_MEMBERS'/>
    <option type='obsolete' id='SYMBOL_CACHE_SIZE'/>
  </group>
</doxygenconfig>
